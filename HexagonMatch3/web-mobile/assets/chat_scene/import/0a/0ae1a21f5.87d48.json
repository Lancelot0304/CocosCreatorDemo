[
  1,
  [
    "f0BIwQ8D5Ml7nTNQbh1YlS",
    "ecpdLyjvZBwrvm+cedCcQy",
    "e97GVMl6JHh5Ml5qEDdSGa",
    "29FYIk+N1GYaeWH/q1NxQO",
    "71VhFCTINJM6/Ky3oX9nBT",
    "41D7kWhyFGY7q4NDlzkazn",
    "31vIlawANFZqnzLlSuHBfc",
    "6aoKpq6+5BVaCIpoemqt7E",
    "a8Anh32NZGRZegUtSgEj26",
    "b4P/PCArtIdIH38t6mlw8Y",
    "e8Ueib+qJEhL6mXAHdnwbi"
  ],
  [
    "node",
    "_parent",
    "_spriteFrame",
    "_textureSetter",
    "_N$normalSprite",
    "_N$pressedSprite",
    "_N$hoverSprite",
    "_N$disabledSprite",
    "scene"
  ],
  [
    [
      "cc.Node",
      [
        "_name",
        "_objFlags",
        "_id",
        "_components",
        "_contentSize",
        "_parent",
        "_children",
        "_trs",
        "_color"
      ],
      0,
      9,
      5,
      1,
      2,
      7,
      5
    ],
    "cc.SpriteFrame",
    "cc.Texture2D",
    [
      "cc.Widget",
      [
        "_alignFlags",
        "_originalWidth",
        "_bottom",
        "alignMode",
        "_originalHeight",
        "node"
      ],
      -2,
      1
    ],
    [
      "cc.Layout",
      [
        "_resize",
        "_N$layoutType",
        "_N$spacingX",
        "_N$spacingY",
        "node",
        "_layoutSize"
      ],
      -1,
      1,
      5
    ],
    [
      "cc.Sprite",
      [
        "_type",
        "_sizeMode",
        "node",
        "_materials",
        "_spriteFrame"
      ],
      1,
      1,
      3,
      6
    ],
    [
      "cc.Label",
      [
        "_string",
        "_fontSize",
        "_N$horizontalAlign",
        "_N$verticalAlign",
        "_lineHeight",
        "_enableWrapText",
        "_N$overflow",
        "_N$cacheMode",
        "node",
        "_materials"
      ],
      -5,
      1,
      3
    ],
    [
      "cc.SceneAsset",
      [
        "_name",
        "asyncLoadAssets"
      ],
      1
    ],
    [
      "cc.Canvas",
      [
        "_fitWidth",
        "_fitHeight",
        "node",
        "_designResolution"
      ],
      1,
      1,
      5
    ],
    [
      "e1b90/rohdEk4SdmmEZANaD",
      [
        "node"
      ],
      3,
      1
    ],
    [
      "cc.Button",
      [
        "_N$transition",
        "node",
        "clickEvents",
        "_N$normalColor",
        "_N$pressedColor",
        "_N$disabledColor",
        "_N$target",
        "_N$normalSprite",
        "_N$pressedSprite",
        "_N$hoverSprite",
        "_N$disabledSprite"
      ],
      2,
      1,
      9,
      5,
      5,
      5,
      1,
      6,
      6,
      6,
      6
    ],
    [
      "cc.ClickEvent",
      [
        "_componentId",
        "handler",
        "target"
      ],
      1,
      1
    ],
    [
      "cc.Scene",
      [
        "_name",
        "_children",
        "_anchorPoint",
        "_trs"
      ],
      2,
      2,
      5,
      7
    ],
    [
      "cc.Camera",
      [
        "_clearFlags",
        "_depth",
        "node"
      ],
      1,
      1
    ],
    [
      "cc.TextAsset",
      [
        "_name",
        "text"
      ],
      1
    ]
  ],
  [
    [
      3,
      3,
      0,
      1,
      4,
      5,
      5
    ],
    [
      5,
      0,
      1,
      2,
      3,
      4,
      3
    ],
    [
      0,
      0,
      5,
      6,
      3,
      4,
      7,
      2
    ],
    [
      0,
      0,
      1,
      6,
      3,
      4,
      3
    ],
    [
      0,
      0,
      1,
      5,
      3,
      8,
      4,
      3
    ],
    [
      10,
      0,
      1,
      2,
      3,
      4,
      5,
      6,
      7,
      8,
      9,
      10,
      2
    ],
    [
      11,
      0,
      1,
      2,
      3
    ],
    [
      6,
      0,
      1,
      5,
      2,
      3,
      6,
      7,
      8,
      9,
      8
    ],
    [
      0,
      0,
      5,
      6,
      3,
      4,
      2
    ],
    [
      0,
      0,
      5,
      3,
      4,
      7,
      2
    ],
    [
      3,
      0,
      5,
      2
    ],
    [
      4,
      0,
      1,
      2,
      4,
      5,
      4
    ],
    [
      7,
      0,
      1,
      3
    ],
    [
      0,
      0,
      2,
      6,
      3,
      8,
      4,
      7,
      3
    ],
    [
      0,
      0,
      6,
      3,
      4,
      7,
      2
    ],
    [
      0,
      0,
      5,
      3,
      8,
      4,
      2
    ],
    [
      0,
      0,
      5,
      3,
      7,
      2
    ],
    [
      8,
      0,
      1,
      2,
      3,
      3
    ],
    [
      3,
      0,
      2,
      5,
      3
    ],
    [
      3,
      0,
      1,
      5,
      3
    ],
    [
      9,
      0,
      1
    ],
    [
      4,
      0,
      1,
      3,
      4,
      5,
      4
    ],
    [
      5,
      2,
      3,
      4,
      1
    ],
    [
      12,
      0,
      1,
      2,
      3,
      2
    ],
    [
      13,
      0,
      1,
      2,
      3
    ],
    [
      6,
      0,
      1,
      4,
      2,
      3,
      8,
      9,
      6
    ],
    [
      14,
      0,
      1,
      3
    ]
  ],
  [
    [
      [
        {
          "name": "default_btn_disabled",
          "rect": [
            0,
            0,
            40,
            40
          ],
          "offset": [
            0,
            0
          ],
          "originalSize": [
            40,
            40
          ],
          "capInsets": [
            12,
            12,
            12,
            12
          ]
        }
      ],
      [
        1
      ],
      0,
      [
        0
      ],
      [
        3
      ],
      [
        4
      ]
    ],
    [
      [
        [
          12,
          "ChatScene",
          null
        ],
        [
          13,
          "Canvas",
          "a286bbGknJLZpRpxROV6M94",
          [
            -4,
            -5,
            -6,
            -7,
            -8
          ],
          [
            [
              17,
              true,
              false,
              -1,
              [
                5,
                720,
                1280
              ]
            ],
            [
              10,
              45,
              -2
            ],
            [
              20,
              -3
            ]
          ],
          [
            4,
            4294769916
          ],
          [
            5,
            720,
            1280
          ],
          [
            360,
            640,
            0,
            0,
            0,
            0,
            1,
            1,
            1,
            1
          ]
        ],
        [
          14,
          "socket",
          [
            -11,
            -12,
            -13
          ],
          [
            [
              11,
              1,
              1,
              20,
              -9,
              [
                5,
                340,
                50
              ]
            ],
            [
              18,
              4,
              70,
              -10
            ]
          ],
          [
            5,
            340,
            50
          ],
          [
            0,
            35,
            0,
            0,
            0,
            0,
            1,
            1,
            1,
            1
          ]
        ],
        [
          2,
          "New Node",
          1,
          [
            2,
            -16
          ],
          [
            [
              21,
              1,
              2,
              20,
              -14,
              [
                5,
                720,
                120
              ]
            ],
            [
              19,
              40,
              300,
              -15
            ]
          ],
          [
            5,
            720,
            120
          ],
          [
            0,
            -402.671,
            0,
            0,
            0,
            0,
            1,
            1,
            1,
            1
          ]
        ],
        [
          3,
          "Background",
          512,
          [
            -19
          ],
          [
            [
              1,
              1,
              0,
              -17,
              [
                6
              ],
              7
            ],
            [
              0,
              0,
              45,
              100,
              40,
              -18
            ]
          ],
          [
            5,
            100,
            40
          ]
        ],
        [
          3,
          "Background",
          512,
          [
            -22
          ],
          [
            [
              1,
              1,
              0,
              -20,
              [
                13
              ],
              14
            ],
            [
              0,
              0,
              45,
              100,
              40,
              -21
            ]
          ],
          [
            5,
            100,
            40
          ]
        ],
        [
          3,
          "Background",
          512,
          [
            -25
          ],
          [
            [
              1,
              1,
              0,
              -23,
              [
                20
              ],
              21
            ],
            [
              0,
              0,
              45,
              100,
              40,
              -24
            ]
          ],
          [
            5,
            100,
            40
          ]
        ],
        [
          3,
          "Background",
          512,
          [
            -28
          ],
          [
            [
              1,
              1,
              0,
              -26,
              [
                27
              ],
              28
            ],
            [
              0,
              0,
              45,
              100,
              40,
              -27
            ]
          ],
          [
            5,
            100,
            40
          ]
        ],
        [
          2,
          "http",
          3,
          [
            -31
          ],
          [
            [
              11,
              1,
              1,
              20,
              -29,
              [
                5,
                100,
                50
              ]
            ],
            [
              10,
              4,
              -30
            ]
          ],
          [
            5,
            100,
            50
          ],
          [
            0,
            -35,
            0,
            0,
            0,
            0,
            1,
            1,
            1,
            1
          ]
        ],
        [
          15,
          "background",
          1,
          [
            [
              0,
              0,
              45,
              200,
              150,
              -32
            ],
            [
              1,
              1,
              0,
              -33,
              [
                0
              ],
              1
            ]
          ],
          [
            4,
            4281214491
          ],
          [
            5,
            720,
            1280
          ]
        ],
        [
          2,
          "connect",
          2,
          [
            4
          ],
          [
            [
              5,
              2,
              -34,
              [
                [
                  6,
                  "e1b90/rohdEk4SdmmEZANaD",
                  "onSocketConnectBtn",
                  1
                ]
              ],
              [
                4,
                4293322470
              ],
              [
                4,
                4291348680
              ],
              [
                4,
                3363338360
              ],
              4,
              8,
              9,
              10,
              11
            ]
          ],
          [
            5,
            100,
            40
          ],
          [
            -120,
            0,
            0,
            0,
            0,
            0,
            1,
            1,
            1,
            1
          ]
        ],
        [
          8,
          "send",
          2,
          [
            5
          ],
          [
            [
              5,
              2,
              -35,
              [
                [
                  6,
                  "e1b90/rohdEk4SdmmEZANaD",
                  "onSocketSendBtn",
                  1
                ]
              ],
              [
                4,
                4293322470
              ],
              [
                4,
                4291348680
              ],
              [
                4,
                3363338360
              ],
              5,
              15,
              16,
              17,
              18
            ]
          ],
          [
            5,
            100,
            40
          ]
        ],
        [
          2,
          "close",
          2,
          [
            6
          ],
          [
            [
              5,
              2,
              -36,
              [
                [
                  6,
                  "e1b90/rohdEk4SdmmEZANaD",
                  "onSocketCloseBtn",
                  1
                ]
              ],
              [
                4,
                4293322470
              ],
              [
                4,
                4291348680
              ],
              [
                4,
                3363338360
              ],
              6,
              22,
              23,
              24,
              25
            ]
          ],
          [
            5,
            100,
            40
          ],
          [
            120,
            0,
            0,
            0,
            0,
            0,
            1,
            1,
            1,
            1
          ]
        ],
        [
          8,
          "send",
          8,
          [
            7
          ],
          [
            [
              5,
              2,
              -37,
              [
                [
                  6,
                  "e1b90/rohdEk4SdmmEZANaD",
                  "onHttpSendBtn",
                  1
                ]
              ],
              [
                4,
                4293322470
              ],
              [
                4,
                4291348680
              ],
              [
                4,
                3363338360
              ],
              7,
              29,
              30,
              31,
              32
            ]
          ],
          [
            5,
            100,
            40
          ]
        ],
        [
          23,
          "New Node",
          [
            1
          ],
          [
            0,
            0,
            0
          ],
          [
            0,
            0,
            0,
            0,
            0,
            0,
            1,
            1,
            1,
            1
          ]
        ],
        [
          16,
          "Main Camera",
          1,
          [
            [
              24,
              7,
              -1,
              -38
            ]
          ],
          [
            0,
            0,
            368.9268220121709,
            0,
            0,
            0,
            1,
            1,
            1,
            1
          ]
        ],
        [
          9,
          "cocos",
          1,
          [
            [
              22,
              -39,
              [
                2
              ],
              3
            ]
          ],
          [
            5,
            195,
            270
          ],
          [
            0,
            50,
            0,
            0,
            0,
            0,
            1,
            1,
            1,
            1
          ]
        ],
        [
          9,
          "label",
          1,
          [
            [
              25,
              "Hello, World!",
              60,
              60,
              1,
              1,
              -40,
              [
                4
              ]
            ]
          ],
          [
            5,
            342.33,
            75.6
          ],
          [
            0,
            -180,
            0,
            0,
            0,
            0,
            1,
            1,
            1,
            1
          ]
        ],
        [
          4,
          "Label",
          512,
          4,
          [
            [
              7,
              "connect",
              20,
              false,
              1,
              1,
              1,
              1,
              -41,
              [
                5
              ]
            ]
          ],
          [
            4,
            4278190080
          ],
          [
            5,
            100,
            40
          ]
        ],
        [
          4,
          "Label",
          512,
          5,
          [
            [
              7,
              "send",
              20,
              false,
              1,
              1,
              1,
              1,
              -42,
              [
                12
              ]
            ]
          ],
          [
            4,
            4278190080
          ],
          [
            5,
            100,
            40
          ]
        ],
        [
          4,
          "Label",
          512,
          6,
          [
            [
              7,
              "close",
              20,
              false,
              1,
              1,
              1,
              1,
              -43,
              [
                19
              ]
            ]
          ],
          [
            4,
            4278190080
          ],
          [
            5,
            100,
            40
          ]
        ],
        [
          4,
          "Label",
          512,
          7,
          [
            [
              7,
              "send",
              20,
              false,
              1,
              1,
              1,
              1,
              -44,
              [
                26
              ]
            ]
          ],
          [
            4,
            4278190080
          ],
          [
            5,
            100,
            40
          ]
        ]
      ],
      0,
      [
        0,
        0,
        1,
        0,
        0,
        1,
        0,
        0,
        1,
        0,
        -1,
        15,
        0,
        -2,
        9,
        0,
        -3,
        16,
        0,
        -4,
        17,
        0,
        -5,
        3,
        0,
        0,
        2,
        0,
        0,
        2,
        0,
        -1,
        10,
        0,
        -2,
        11,
        0,
        -3,
        12,
        0,
        0,
        3,
        0,
        0,
        3,
        0,
        -2,
        8,
        0,
        0,
        4,
        0,
        0,
        4,
        0,
        -1,
        18,
        0,
        0,
        5,
        0,
        0,
        5,
        0,
        -1,
        19,
        0,
        0,
        6,
        0,
        0,
        6,
        0,
        -1,
        20,
        0,
        0,
        7,
        0,
        0,
        7,
        0,
        -1,
        21,
        0,
        0,
        8,
        0,
        0,
        8,
        0,
        -1,
        13,
        0,
        0,
        9,
        0,
        0,
        9,
        0,
        0,
        10,
        0,
        0,
        11,
        0,
        0,
        12,
        0,
        0,
        13,
        0,
        0,
        15,
        0,
        0,
        16,
        0,
        0,
        17,
        0,
        0,
        18,
        0,
        0,
        19,
        0,
        0,
        20,
        0,
        0,
        21,
        0,
        8,
        14,
        1,
        1,
        14,
        2,
        1,
        3,
        4,
        1,
        10,
        5,
        1,
        11,
        6,
        1,
        12,
        7,
        1,
        13,
        44
      ],
      [
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0
      ],
      [
        -1,
        2,
        -1,
        2,
        -1,
        -1,
        -1,
        2,
        4,
        5,
        6,
        7,
        -1,
        -1,
        2,
        4,
        5,
        6,
        7,
        -1,
        -1,
        2,
        4,
        5,
        6,
        7,
        -1,
        -1,
        2,
        4,
        5,
        6,
        7
      ],
      [
        1,
        5,
        1,
        6,
        1,
        1,
        1,
        0,
        0,
        2,
        0,
        3,
        1,
        1,
        0,
        0,
        2,
        0,
        3,
        1,
        1,
        0,
        0,
        2,
        0,
        3,
        1,
        1,
        0,
        0,
        2,
        0,
        3
      ]
    ],
    [
      [
        {
          "name": "HelloWorld",
          "rect": [
            0,
            0,
            195,
            270
          ],
          "offset": [
            0,
            0
          ],
          "originalSize": [
            195,
            270
          ],
          "capInsets": [
            0,
            0,
            0,
            0
          ]
        }
      ],
      [
        1
      ],
      0,
      [
        0
      ],
      [
        3
      ],
      [
        7
      ]
    ],
    [
      [
        {
          "name": "singleColor",
          "rect": [
            0,
            0,
            2,
            2
          ],
          "offset": [
            0,
            0
          ],
          "originalSize": [
            2,
            2
          ],
          "capInsets": [
            0,
            0,
            0,
            0
          ]
        }
      ],
      [
        1
      ],
      0,
      [
        0
      ],
      [
        3
      ],
      [
        8
      ]
    ],
    [
      [
        "0,9729,9729,33071,33071,0,0,1",
        -1
      ],
      [
        2
      ],
      0,
      [],
      [],
      []
    ],
    [
      [
        "0,9729,9729,33071,33071,0,0,1",
        -1
      ],
      [
        2
      ],
      0,
      [],
      [],
      []
    ],
    [
      [
        "0,9729,9729,33071,33071,0,0,1",
        -1
      ],
      [
        2
      ],
      0,
      [],
      [],
      []
    ],
    [
      [
        "0,9729,9729,33071,33071,0,0,1",
        -1
      ],
      [
        2
      ],
      0,
      [],
      [],
      []
    ],
    [
      [
        [
          26,
          "proto.d",
          "import * as $protobuf from \"protobufjs\";\n/** Namespace Battle. */\nexport namespace Battle {\n\n    /** C2S_CMD enum. */\n    enum C2S_CMD {\n        Test = 10001\n    }\n\n    /** S2C_CMD enum. */\n    enum S2C_CMD {\n        Test = 20001\n    }\n\n    /** Properties of a Person. */\n    interface IPerson {\n\n        /** Person name */\n        name?: (string|null);\n\n        /** Person id */\n        id?: (number|null);\n\n        /** Person email */\n        email?: (string|null);\n    }\n\n    /** Represents a Person. */\n    class Person implements IPerson {\n\n        /**\n         * Constructs a new Person.\n         * @param [properties] Properties to set\n         */\n        constructor(properties?: Battle.IPerson);\n\n        /** Person name. */\n        public name: string;\n\n        /** Person id. */\n        public id: number;\n\n        /** Person email. */\n        public email: string;\n\n        /**\n         * Creates a new Person instance using the specified properties.\n         * @param [properties] Properties to set\n         * @returns Person instance\n         */\n        public static create(properties?: Battle.IPerson): Battle.Person;\n\n        /**\n         * Encodes the specified Person message. Does not implicitly {@link Battle.Person.verify|verify} messages.\n         * @param message Person message or plain object to encode\n         * @param [writer] Writer to encode to\n         * @returns Writer\n         */\n        public static encode(message: Battle.IPerson, writer?: $protobuf.Writer): $protobuf.Writer;\n\n        /**\n         * Encodes the specified Person message, length delimited. Does not implicitly {@link Battle.Person.verify|verify} messages.\n         * @param message Person message or plain object to encode\n         * @param [writer] Writer to encode to\n         * @returns Writer\n         */\n        public static encodeDelimited(message: Battle.IPerson, writer?: $protobuf.Writer): $protobuf.Writer;\n\n        /**\n         * Decodes a Person message from the specified reader or buffer.\n         * @param reader Reader or buffer to decode from\n         * @param [length] Message length if known beforehand\n         * @returns Person\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        public static decode(reader: ($protobuf.Reader|Uint8Array), length?: number): Battle.Person;\n\n        /**\n         * Decodes a Person message from the specified reader or buffer, length delimited.\n         * @param reader Reader or buffer to decode from\n         * @returns Person\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        public static decodeDelimited(reader: ($protobuf.Reader|Uint8Array)): Battle.Person;\n\n        /**\n         * Verifies a Person message.\n         * @param message Plain object to verify\n         * @returns `null` if valid, otherwise the reason why it is not\n         */\n        public static verify(message: { [k: string]: any }): (string|null);\n\n        /**\n         * Creates a Person message from a plain object. Also converts values to their respective internal types.\n         * @param object Plain object\n         * @returns Person\n         */\n        public static fromObject(object: { [k: string]: any }): Battle.Person;\n\n        /**\n         * Creates a plain object from a Person message. Also converts values to other types if specified.\n         * @param message Person\n         * @param [options] Conversion options\n         * @returns Plain object\n         */\n        public static toObject(message: Battle.Person, options?: $protobuf.IConversionOptions): { [k: string]: any };\n\n        /**\n         * Converts this Person to JSON.\n         * @returns JSON object\n         */\n        public toJSON(): { [k: string]: any };\n    }\n}\n\n/** Namespace Chat. */\nexport namespace Chat {\n\n    /** C2S_CMD enum. */\n    enum C2S_CMD {\n        Message = 10001\n    }\n\n    /** S2C_CMD enum. */\n    enum S2C_CMD {\n        Message = 20001\n    }\n\n    /** Properties of a Message. */\n    interface IMessage {\n\n        /** Message word */\n        word?: (string|null);\n\n        /** Message timestamp */\n        timestamp?: (number|null);\n    }\n\n    /** Represents a Message. */\n    class Message implements IMessage {\n\n        /**\n         * Constructs a new Message.\n         * @param [properties] Properties to set\n         */\n        constructor(properties?: Chat.IMessage);\n\n        /** Message word. */\n        public word: string;\n\n        /** Message timestamp. */\n        public timestamp: number;\n\n        /**\n         * Creates a new Message instance using the specified properties.\n         * @param [properties] Properties to set\n         * @returns Message instance\n         */\n        public static create(properties?: Chat.IMessage): Chat.Message;\n\n        /**\n         * Encodes the specified Message message. Does not implicitly {@link Chat.Message.verify|verify} messages.\n         * @param message Message message or plain object to encode\n         * @param [writer] Writer to encode to\n         * @returns Writer\n         */\n        public static encode(message: Chat.IMessage, writer?: $protobuf.Writer): $protobuf.Writer;\n\n        /**\n         * Encodes the specified Message message, length delimited. Does not implicitly {@link Chat.Message.verify|verify} messages.\n         * @param message Message message or plain object to encode\n         * @param [writer] Writer to encode to\n         * @returns Writer\n         */\n        public static encodeDelimited(message: Chat.IMessage, writer?: $protobuf.Writer): $protobuf.Writer;\n\n        /**\n         * Decodes a Message message from the specified reader or buffer.\n         * @param reader Reader or buffer to decode from\n         * @param [length] Message length if known beforehand\n         * @returns Message\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        public static decode(reader: ($protobuf.Reader|Uint8Array), length?: number): Chat.Message;\n\n        /**\n         * Decodes a Message message from the specified reader or buffer, length delimited.\n         * @param reader Reader or buffer to decode from\n         * @returns Message\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        public static decodeDelimited(reader: ($protobuf.Reader|Uint8Array)): Chat.Message;\n\n        /**\n         * Verifies a Message message.\n         * @param message Plain object to verify\n         * @returns `null` if valid, otherwise the reason why it is not\n         */\n        public static verify(message: { [k: string]: any }): (string|null);\n\n        /**\n         * Creates a Message message from a plain object. Also converts values to their respective internal types.\n         * @param object Plain object\n         * @returns Message\n         */\n        public static fromObject(object: { [k: string]: any }): Chat.Message;\n\n        /**\n         * Creates a plain object from a Message message. Also converts values to other types if specified.\n         * @param message Message\n         * @param [options] Conversion options\n         * @returns Plain object\n         */\n        public static toObject(message: Chat.Message, options?: $protobuf.IConversionOptions): { [k: string]: any };\n\n        /**\n         * Converts this Message to JSON.\n         * @returns JSON object\n         */\n        public toJSON(): { [k: string]: any };\n    }\n\n    /** Properties of a MessageRequest. */\n    interface IMessageRequest {\n\n        /** MessageRequest senderId */\n        senderId?: (string|null);\n\n        /** MessageRequest receiverId */\n        receiverId?: (string|null);\n\n        /** MessageRequest message */\n        message?: (Chat.IMessage|null);\n    }\n\n    /** Represents a MessageRequest. */\n    class MessageRequest implements IMessageRequest {\n\n        /**\n         * Constructs a new MessageRequest.\n         * @param [properties] Properties to set\n         */\n        constructor(properties?: Chat.IMessageRequest);\n\n        /** MessageRequest senderId. */\n        public senderId: string;\n\n        /** MessageRequest receiverId. */\n        public receiverId: string;\n\n        /** MessageRequest message. */\n        public message?: (Chat.IMessage|null);\n\n        /**\n         * Creates a new MessageRequest instance using the specified properties.\n         * @param [properties] Properties to set\n         * @returns MessageRequest instance\n         */\n        public static create(properties?: Chat.IMessageRequest): Chat.MessageRequest;\n\n        /**\n         * Encodes the specified MessageRequest message. Does not implicitly {@link Chat.MessageRequest.verify|verify} messages.\n         * @param message MessageRequest message or plain object to encode\n         * @param [writer] Writer to encode to\n         * @returns Writer\n         */\n        public static encode(message: Chat.IMessageRequest, writer?: $protobuf.Writer): $protobuf.Writer;\n\n        /**\n         * Encodes the specified MessageRequest message, length delimited. Does not implicitly {@link Chat.MessageRequest.verify|verify} messages.\n         * @param message MessageRequest message or plain object to encode\n         * @param [writer] Writer to encode to\n         * @returns Writer\n         */\n        public static encodeDelimited(message: Chat.IMessageRequest, writer?: $protobuf.Writer): $protobuf.Writer;\n\n        /**\n         * Decodes a MessageRequest message from the specified reader or buffer.\n         * @param reader Reader or buffer to decode from\n         * @param [length] Message length if known beforehand\n         * @returns MessageRequest\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        public static decode(reader: ($protobuf.Reader|Uint8Array), length?: number): Chat.MessageRequest;\n\n        /**\n         * Decodes a MessageRequest message from the specified reader or buffer, length delimited.\n         * @param reader Reader or buffer to decode from\n         * @returns MessageRequest\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        public static decodeDelimited(reader: ($protobuf.Reader|Uint8Array)): Chat.MessageRequest;\n\n        /**\n         * Verifies a MessageRequest message.\n         * @param message Plain object to verify\n         * @returns `null` if valid, otherwise the reason why it is not\n         */\n        public static verify(message: { [k: string]: any }): (string|null);\n\n        /**\n         * Creates a MessageRequest message from a plain object. Also converts values to their respective internal types.\n         * @param object Plain object\n         * @returns MessageRequest\n         */\n        public static fromObject(object: { [k: string]: any }): Chat.MessageRequest;\n\n        /**\n         * Creates a plain object from a MessageRequest message. Also converts values to other types if specified.\n         * @param message MessageRequest\n         * @param [options] Conversion options\n         * @returns Plain object\n         */\n        public static toObject(message: Chat.MessageRequest, options?: $protobuf.IConversionOptions): { [k: string]: any };\n\n        /**\n         * Converts this MessageRequest to JSON.\n         * @returns JSON object\n         */\n        public toJSON(): { [k: string]: any };\n    }\n\n    /** MessageErrorCode enum. */\n    enum MessageErrorCode {\n        Succeed = 0,\n        Failed = 1\n    }\n\n    /** Properties of a MessageRespone. */\n    interface IMessageRespone {\n\n        /** MessageRespone senderId */\n        senderId?: (string|null);\n\n        /** MessageRespone receiverId */\n        receiverId?: (string|null);\n\n        /** MessageRespone message */\n        message?: (Chat.IMessage|null);\n\n        /** MessageRespone result */\n        result?: (number|null);\n    }\n\n    /** Represents a MessageRespone. */\n    class MessageRespone implements IMessageRespone {\n\n        /**\n         * Constructs a new MessageRespone.\n         * @param [properties] Properties to set\n         */\n        constructor(properties?: Chat.IMessageRespone);\n\n        /** MessageRespone senderId. */\n        public senderId: string;\n\n        /** MessageRespone receiverId. */\n        public receiverId: string;\n\n        /** MessageRespone message. */\n        public message?: (Chat.IMessage|null);\n\n        /** MessageRespone result. */\n        public result: number;\n\n        /**\n         * Creates a new MessageRespone instance using the specified properties.\n         * @param [properties] Properties to set\n         * @returns MessageRespone instance\n         */\n        public static create(properties?: Chat.IMessageRespone): Chat.MessageRespone;\n\n        /**\n         * Encodes the specified MessageRespone message. Does not implicitly {@link Chat.MessageRespone.verify|verify} messages.\n         * @param message MessageRespone message or plain object to encode\n         * @param [writer] Writer to encode to\n         * @returns Writer\n         */\n        public static encode(message: Chat.IMessageRespone, writer?: $protobuf.Writer): $protobuf.Writer;\n\n        /**\n         * Encodes the specified MessageRespone message, length delimited. Does not implicitly {@link Chat.MessageRespone.verify|verify} messages.\n         * @param message MessageRespone message or plain object to encode\n         * @param [writer] Writer to encode to\n         * @returns Writer\n         */\n        public static encodeDelimited(message: Chat.IMessageRespone, writer?: $protobuf.Writer): $protobuf.Writer;\n\n        /**\n         * Decodes a MessageRespone message from the specified reader or buffer.\n         * @param reader Reader or buffer to decode from\n         * @param [length] Message length if known beforehand\n         * @returns MessageRespone\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        public static decode(reader: ($protobuf.Reader|Uint8Array), length?: number): Chat.MessageRespone;\n\n        /**\n         * Decodes a MessageRespone message from the specified reader or buffer, length delimited.\n         * @param reader Reader or buffer to decode from\n         * @returns MessageRespone\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        public static decodeDelimited(reader: ($protobuf.Reader|Uint8Array)): Chat.MessageRespone;\n\n        /**\n         * Verifies a MessageRespone message.\n         * @param message Plain object to verify\n         * @returns `null` if valid, otherwise the reason why it is not\n         */\n        public static verify(message: { [k: string]: any }): (string|null);\n\n        /**\n         * Creates a MessageRespone message from a plain object. Also converts values to their respective internal types.\n         * @param object Plain object\n         * @returns MessageRespone\n         */\n        public static fromObject(object: { [k: string]: any }): Chat.MessageRespone;\n\n        /**\n         * Creates a plain object from a MessageRespone message. Also converts values to other types if specified.\n         * @param message MessageRespone\n         * @param [options] Conversion options\n         * @returns Plain object\n         */\n        public static toObject(message: Chat.MessageRespone, options?: $protobuf.IConversionOptions): { [k: string]: any };\n\n        /**\n         * Converts this MessageRespone to JSON.\n         * @returns JSON object\n         */\n        public toJSON(): { [k: string]: any };\n    }\n}\n\n/** Namespace Login. */\nexport namespace Login {\n\n    /** C2S_CMD enum. */\n    enum C2S_CMD {\n        Open = 1001,\n        Error = 1002,\n        Close = 1003,\n        Login = 1004,\n        HeartBeat = 1005\n    }\n\n    /** S2C_CMD enum. */\n    enum S2C_CMD {\n        Open = 2001,\n        Error = 2002,\n        Closed = 2003,\n        Login = 2004,\n        HeartBeat = 2005\n    }\n\n    /** Properties of a LoginRequest. */\n    interface ILoginRequest {\n\n        /** LoginRequest userId */\n        userId?: (string|null);\n    }\n\n    /** Represents a LoginRequest. */\n    class LoginRequest implements ILoginRequest {\n\n        /**\n         * Constructs a new LoginRequest.\n         * @param [properties] Properties to set\n         */\n        constructor(properties?: Login.ILoginRequest);\n\n        /** LoginRequest userId. */\n        public userId: string;\n\n        /**\n         * Creates a new LoginRequest instance using the specified properties.\n         * @param [properties] Properties to set\n         * @returns LoginRequest instance\n         */\n        public static create(properties?: Login.ILoginRequest): Login.LoginRequest;\n\n        /**\n         * Encodes the specified LoginRequest message. Does not implicitly {@link Login.LoginRequest.verify|verify} messages.\n         * @param message LoginRequest message or plain object to encode\n         * @param [writer] Writer to encode to\n         * @returns Writer\n         */\n        public static encode(message: Login.ILoginRequest, writer?: $protobuf.Writer): $protobuf.Writer;\n\n        /**\n         * Encodes the specified LoginRequest message, length delimited. Does not implicitly {@link Login.LoginRequest.verify|verify} messages.\n         * @param message LoginRequest message or plain object to encode\n         * @param [writer] Writer to encode to\n         * @returns Writer\n         */\n        public static encodeDelimited(message: Login.ILoginRequest, writer?: $protobuf.Writer): $protobuf.Writer;\n\n        /**\n         * Decodes a LoginRequest message from the specified reader or buffer.\n         * @param reader Reader or buffer to decode from\n         * @param [length] Message length if known beforehand\n         * @returns LoginRequest\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        public static decode(reader: ($protobuf.Reader|Uint8Array), length?: number): Login.LoginRequest;\n\n        /**\n         * Decodes a LoginRequest message from the specified reader or buffer, length delimited.\n         * @param reader Reader or buffer to decode from\n         * @returns LoginRequest\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        public static decodeDelimited(reader: ($protobuf.Reader|Uint8Array)): Login.LoginRequest;\n\n        /**\n         * Verifies a LoginRequest message.\n         * @param message Plain object to verify\n         * @returns `null` if valid, otherwise the reason why it is not\n         */\n        public static verify(message: { [k: string]: any }): (string|null);\n\n        /**\n         * Creates a LoginRequest message from a plain object. Also converts values to their respective internal types.\n         * @param object Plain object\n         * @returns LoginRequest\n         */\n        public static fromObject(object: { [k: string]: any }): Login.LoginRequest;\n\n        /**\n         * Creates a plain object from a LoginRequest message. Also converts values to other types if specified.\n         * @param message LoginRequest\n         * @param [options] Conversion options\n         * @returns Plain object\n         */\n        public static toObject(message: Login.LoginRequest, options?: $protobuf.IConversionOptions): { [k: string]: any };\n\n        /**\n         * Converts this LoginRequest to JSON.\n         * @returns JSON object\n         */\n        public toJSON(): { [k: string]: any };\n    }\n\n    /** LoginErrorCode enum. */\n    enum LoginErrorCode {\n        Succeed = 0,\n        Failed = 1\n    }\n\n    /** Properties of a LoginRespone. */\n    interface ILoginRespone {\n\n        /** LoginRespone userId */\n        userId?: (string|null);\n\n        /** LoginRespone result */\n        result?: (number|null);\n    }\n\n    /** Represents a LoginRespone. */\n    class LoginRespone implements ILoginRespone {\n\n        /**\n         * Constructs a new LoginRespone.\n         * @param [properties] Properties to set\n         */\n        constructor(properties?: Login.ILoginRespone);\n\n        /** LoginRespone userId. */\n        public userId: string;\n\n        /** LoginRespone result. */\n        public result: number;\n\n        /**\n         * Creates a new LoginRespone instance using the specified properties.\n         * @param [properties] Properties to set\n         * @returns LoginRespone instance\n         */\n        public static create(properties?: Login.ILoginRespone): Login.LoginRespone;\n\n        /**\n         * Encodes the specified LoginRespone message. Does not implicitly {@link Login.LoginRespone.verify|verify} messages.\n         * @param message LoginRespone message or plain object to encode\n         * @param [writer] Writer to encode to\n         * @returns Writer\n         */\n        public static encode(message: Login.ILoginRespone, writer?: $protobuf.Writer): $protobuf.Writer;\n\n        /**\n         * Encodes the specified LoginRespone message, length delimited. Does not implicitly {@link Login.LoginRespone.verify|verify} messages.\n         * @param message LoginRespone message or plain object to encode\n         * @param [writer] Writer to encode to\n         * @returns Writer\n         */\n        public static encodeDelimited(message: Login.ILoginRespone, writer?: $protobuf.Writer): $protobuf.Writer;\n\n        /**\n         * Decodes a LoginRespone message from the specified reader or buffer.\n         * @param reader Reader or buffer to decode from\n         * @param [length] Message length if known beforehand\n         * @returns LoginRespone\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        public static decode(reader: ($protobuf.Reader|Uint8Array), length?: number): Login.LoginRespone;\n\n        /**\n         * Decodes a LoginRespone message from the specified reader or buffer, length delimited.\n         * @param reader Reader or buffer to decode from\n         * @returns LoginRespone\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        public static decodeDelimited(reader: ($protobuf.Reader|Uint8Array)): Login.LoginRespone;\n\n        /**\n         * Verifies a LoginRespone message.\n         * @param message Plain object to verify\n         * @returns `null` if valid, otherwise the reason why it is not\n         */\n        public static verify(message: { [k: string]: any }): (string|null);\n\n        /**\n         * Creates a LoginRespone message from a plain object. Also converts values to their respective internal types.\n         * @param object Plain object\n         * @returns LoginRespone\n         */\n        public static fromObject(object: { [k: string]: any }): Login.LoginRespone;\n\n        /**\n         * Creates a plain object from a LoginRespone message. Also converts values to other types if specified.\n         * @param message LoginRespone\n         * @param [options] Conversion options\n         * @returns Plain object\n         */\n        public static toObject(message: Login.LoginRespone, options?: $protobuf.IConversionOptions): { [k: string]: any };\n\n        /**\n         * Converts this LoginRespone to JSON.\n         * @returns JSON object\n         */\n        public toJSON(): { [k: string]: any };\n    }\n\n    /** Properties of a HeartBeatRequest. */\n    interface IHeartBeatRequest {\n\n        /** HeartBeatRequest userId */\n        userId?: (string|null);\n    }\n\n    /** Represents a HeartBeatRequest. */\n    class HeartBeatRequest implements IHeartBeatRequest {\n\n        /**\n         * Constructs a new HeartBeatRequest.\n         * @param [properties] Properties to set\n         */\n        constructor(properties?: Login.IHeartBeatRequest);\n\n        /** HeartBeatRequest userId. */\n        public userId: string;\n\n        /**\n         * Creates a new HeartBeatRequest instance using the specified properties.\n         * @param [properties] Properties to set\n         * @returns HeartBeatRequest instance\n         */\n        public static create(properties?: Login.IHeartBeatRequest): Login.HeartBeatRequest;\n\n        /**\n         * Encodes the specified HeartBeatRequest message. Does not implicitly {@link Login.HeartBeatRequest.verify|verify} messages.\n         * @param message HeartBeatRequest message or plain object to encode\n         * @param [writer] Writer to encode to\n         * @returns Writer\n         */\n        public static encode(message: Login.IHeartBeatRequest, writer?: $protobuf.Writer): $protobuf.Writer;\n\n        /**\n         * Encodes the specified HeartBeatRequest message, length delimited. Does not implicitly {@link Login.HeartBeatRequest.verify|verify} messages.\n         * @param message HeartBeatRequest message or plain object to encode\n         * @param [writer] Writer to encode to\n         * @returns Writer\n         */\n        public static encodeDelimited(message: Login.IHeartBeatRequest, writer?: $protobuf.Writer): $protobuf.Writer;\n\n        /**\n         * Decodes a HeartBeatRequest message from the specified reader or buffer.\n         * @param reader Reader or buffer to decode from\n         * @param [length] Message length if known beforehand\n         * @returns HeartBeatRequest\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        public static decode(reader: ($protobuf.Reader|Uint8Array), length?: number): Login.HeartBeatRequest;\n\n        /**\n         * Decodes a HeartBeatRequest message from the specified reader or buffer, length delimited.\n         * @param reader Reader or buffer to decode from\n         * @returns HeartBeatRequest\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        public static decodeDelimited(reader: ($protobuf.Reader|Uint8Array)): Login.HeartBeatRequest;\n\n        /**\n         * Verifies a HeartBeatRequest message.\n         * @param message Plain object to verify\n         * @returns `null` if valid, otherwise the reason why it is not\n         */\n        public static verify(message: { [k: string]: any }): (string|null);\n\n        /**\n         * Creates a HeartBeatRequest message from a plain object. Also converts values to their respective internal types.\n         * @param object Plain object\n         * @returns HeartBeatRequest\n         */\n        public static fromObject(object: { [k: string]: any }): Login.HeartBeatRequest;\n\n        /**\n         * Creates a plain object from a HeartBeatRequest message. Also converts values to other types if specified.\n         * @param message HeartBeatRequest\n         * @param [options] Conversion options\n         * @returns Plain object\n         */\n        public static toObject(message: Login.HeartBeatRequest, options?: $protobuf.IConversionOptions): { [k: string]: any };\n\n        /**\n         * Converts this HeartBeatRequest to JSON.\n         * @returns JSON object\n         */\n        public toJSON(): { [k: string]: any };\n    }\n\n    /** HeartBeatErrorCode enum. */\n    enum HeartBeatErrorCode {\n        Succeed = 0,\n        Failed = 1\n    }\n\n    /** Properties of a HeartBeatRespone. */\n    interface IHeartBeatRespone {\n\n        /** HeartBeatRespone userId */\n        userId?: (string|null);\n\n        /** HeartBeatRespone result */\n        result?: (number|null);\n    }\n\n    /** Represents a HeartBeatRespone. */\n    class HeartBeatRespone implements IHeartBeatRespone {\n\n        /**\n         * Constructs a new HeartBeatRespone.\n         * @param [properties] Properties to set\n         */\n        constructor(properties?: Login.IHeartBeatRespone);\n\n        /** HeartBeatRespone userId. */\n        public userId: string;\n\n        /** HeartBeatRespone result. */\n        public result: number;\n\n        /**\n         * Creates a new HeartBeatRespone instance using the specified properties.\n         * @param [properties] Properties to set\n         * @returns HeartBeatRespone instance\n         */\n        public static create(properties?: Login.IHeartBeatRespone): Login.HeartBeatRespone;\n\n        /**\n         * Encodes the specified HeartBeatRespone message. Does not implicitly {@link Login.HeartBeatRespone.verify|verify} messages.\n         * @param message HeartBeatRespone message or plain object to encode\n         * @param [writer] Writer to encode to\n         * @returns Writer\n         */\n        public static encode(message: Login.IHeartBeatRespone, writer?: $protobuf.Writer): $protobuf.Writer;\n\n        /**\n         * Encodes the specified HeartBeatRespone message, length delimited. Does not implicitly {@link Login.HeartBeatRespone.verify|verify} messages.\n         * @param message HeartBeatRespone message or plain object to encode\n         * @param [writer] Writer to encode to\n         * @returns Writer\n         */\n        public static encodeDelimited(message: Login.IHeartBeatRespone, writer?: $protobuf.Writer): $protobuf.Writer;\n\n        /**\n         * Decodes a HeartBeatRespone message from the specified reader or buffer.\n         * @param reader Reader or buffer to decode from\n         * @param [length] Message length if known beforehand\n         * @returns HeartBeatRespone\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        public static decode(reader: ($protobuf.Reader|Uint8Array), length?: number): Login.HeartBeatRespone;\n\n        /**\n         * Decodes a HeartBeatRespone message from the specified reader or buffer, length delimited.\n         * @param reader Reader or buffer to decode from\n         * @returns HeartBeatRespone\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        public static decodeDelimited(reader: ($protobuf.Reader|Uint8Array)): Login.HeartBeatRespone;\n\n        /**\n         * Verifies a HeartBeatRespone message.\n         * @param message Plain object to verify\n         * @returns `null` if valid, otherwise the reason why it is not\n         */\n        public static verify(message: { [k: string]: any }): (string|null);\n\n        /**\n         * Creates a HeartBeatRespone message from a plain object. Also converts values to their respective internal types.\n         * @param object Plain object\n         * @returns HeartBeatRespone\n         */\n        public static fromObject(object: { [k: string]: any }): Login.HeartBeatRespone;\n\n        /**\n         * Creates a plain object from a HeartBeatRespone message. Also converts values to other types if specified.\n         * @param message HeartBeatRespone\n         * @param [options] Conversion options\n         * @returns Plain object\n         */\n        public static toObject(message: Login.HeartBeatRespone, options?: $protobuf.IConversionOptions): { [k: string]: any };\n\n        /**\n         * Converts this HeartBeatRespone to JSON.\n         * @returns JSON object\n         */\n        public toJSON(): { [k: string]: any };\n    }\n}\n"
        ]
      ],
      0,
      0,
      [],
      [],
      []
    ],
    [
      [
        "0,9729,9729,33071,33071,0,0,1",
        -1
      ],
      [
        2
      ],
      0,
      [],
      [],
      []
    ],
    [
      [
        {
          "name": "default_btn_pressed",
          "rect": [
            0,
            0,
            40,
            40
          ],
          "offset": [
            0,
            0
          ],
          "originalSize": [
            40,
            40
          ],
          "capInsets": [
            12,
            12,
            12,
            12
          ]
        }
      ],
      [
        1
      ],
      0,
      [
        0
      ],
      [
        3
      ],
      [
        9
      ]
    ],
    [
      [
        {
          "name": "default_btn_normal",
          "rect": [
            0,
            0,
            40,
            40
          ],
          "offset": [
            0,
            0
          ],
          "originalSize": [
            40,
            40
          ],
          "capInsets": [
            12,
            12,
            12,
            12
          ]
        }
      ],
      [
        1
      ],
      0,
      [
        0
      ],
      [
        3
      ],
      [
        10
      ]
    ]
  ]
]