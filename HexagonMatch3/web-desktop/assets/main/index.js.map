{"version":3,"sources":["assets/scripts/Frameworks/SceneDirector/ActiveIndicatorLayer.ts","assets/scripts/Frameworks/AssetCache/AssetCache.ts","assets/scripts/Frameworks/AssetCache/AssetDirLoader.ts","assets/scripts/Frameworks/AssetCache/AssetLoader.ts","assets/scripts/Frameworks/Utils/Debuger.ts","assets/scripts/Frameworks/DefaultConfigs/DefaultConfig.ts","assets/scripts/Defines/Defines.ts","assets/scripts/Frameworks/Utils/DeviceTypeUtils.ts","assets/scripts/Frameworks/EWS/Entity/EntityBase.ts","assets/scripts/Frameworks/EWS/Entity/EntityNodePool.ts","assets/scripts/Frameworks/Event/EventDispatcher.ts","assets/scripts/Frameworks/Utils/GameMath.ts","assets/scripts/Frameworks/STL/Heap.ts","assets/scripts/Frameworks/Network/Http/HttpWrapper/Base/HttpWrapperBase.ts","assets/scripts/Frameworks/Network/Http/HttpWrapper/Web/HttpWrapperWeb.ts","assets/scripts/Frameworks/IGame/IGame.ts","assets/scripts/Frameworks/SceneDirector/LaunchScene.ts","assets/scripts/Frameworks/LayerDirector/LayerBase.ts","assets/scripts/Frameworks/LayerDirector/LayerDirectorError.ts","assets/scripts/Frameworks/LayerDirector/LayerDirector.ts","assets/scripts/Frameworks/LayerDirector/LayerEnterParamBase.ts","assets/scripts/Frameworks/LayerDirector/LayerLoader.ts","assets/launch_scene/LoadingScene.ts","assets/scripts/Frameworks/EWS/FSM/Message.ts","assets/scripts/Frameworks/Components/PageView/PageViewCell.ts","assets/scripts/Frameworks/Components/PageView/PageView.ts","assets/scripts/Frameworks/PlayerInfo/PlayerInfo.ts","assets/scripts/Frameworks/SceneDirector/PreloadAssetInfo.ts","assets/scripts/Frameworks/Components/RedDot/RedDotEvent.ts","assets/scripts/Frameworks/Components/RedDot/RedDotNotifyCenter.ts","assets/scripts/Frameworks/Components/RedDot/RedDotObserver.ts","assets/scripts/Frameworks/SceneDirector/SceneBase.ts","assets/scripts/Frameworks/SceneDirector/SceneDirectorError.ts","assets/scripts/Frameworks/SceneDirector/SceneDirector.ts","assets/scripts/Frameworks/SceneDirector/SceneEnterParamBase.ts","assets/scripts/Frameworks/Components/Buttons/SimpleButton.ts","assets/scripts/Frameworks/Components/CheckBox/SimpleCheckBox.ts","assets/scripts/Frameworks/EWS/FSM/SimpleStateMachine.ts","assets/scripts/Frameworks/Network/Socket/SocketDispatcher/Base/SocketDispatcherBase.ts","assets/scripts/Frameworks/Network/Socket/SocketWrapper/SocketFactory.ts","assets/scripts/Frameworks/Network/Socket/SocketHeartBeat/Base/SocketHeartBeatBase.ts","assets/scripts/Frameworks/Network/Socket/SocketMessagePhraser/Base/SocketMessagePhraserBase.ts","assets/scripts/Frameworks/Network/Socket/SocketWrapper/Base/SocketWrapperBase.ts","assets/scripts/Frameworks/Network/Socket/SocketWrapper/Web/SocketWrapperWeb.ts","assets/scripts/Frameworks/Network/Socket/SocketWrapper/Weixin/SocketWrapperWeixin.ts","assets/scripts/Frameworks/EWS/FSM/StackStateMachine.ts","assets/scripts/Frameworks/STL/Stack.ts","assets/scripts/Frameworks/EWS/FSM/StateMachine.ts","assets/scripts/Frameworks/EWS/FSM/StatePool.ts","assets/scripts/Frameworks/EWS/FSM/State.ts","assets/scripts/Frameworks/SceneDirector/SwitchSceneEnterParam.ts","assets/scripts/Frameworks/SceneDirector/SwitchScene.ts","assets/scripts/Frameworks/Components/TabView/TabItem.ts","assets/scripts/Frameworks/Components/TabView/TabViewCell.ts","assets/scripts/Frameworks/Components/TabView/TabView.ts","assets/scripts/Frameworks/Components/TableView/TableViewCell.ts","assets/scripts/Frameworks/Components/TableView/TableView.ts","assets/scripts/Frameworks/TiledMap/TiledMapJsonPhraser.ts","assets/scripts/Frameworks/Components/UITopViewAdaptor/UITopViewAdaptor.ts","assets/scripts/Frameworks/Utils/Utils.ts","assets/scripts/Frameworks/EWS/World/WorldBase.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AAEA;AACA;AACA;AACA;AAEA;AAAoD;AAQhD;AAAA;AAPA;;AASA;AARc;AACV;AACA;AACA;AACJ;AAKJ;AAAA;AAXa;AAaP;AAGN;AAAkD;AAAlD;AAAA;AAQY;AACA;AACA;;AA6FZ;AAvGqB;AAKV;AACH;AACJ;AAIc;AACV;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACJ;AAEc;AACV;AACJ;AAEO;AACH;AACJ;AAEQ;AACJ;AACI;AACH;AACL;AAEQ;AACJ;AACA;AACI;AACA;AACI;AACI;AACA;AACI;AACH;AACJ;AAAM;AACH;AACH;AACJ;AACJ;AACL;AAEQ;AACJ;AACI;AACH;AACD;AACI;AACA;AACI;AACA;AACH;AACJ;AACL;AAEO;AAEP;AACO;AAEP;AACA;AACI;AACA;AACA;AACA;AACJ;AACO;AAEP;AACA;AACI;AACI;AACA;AACH;AACL;AACO;AAEP;AACO;AAEP;AACO;AAEP;;AApGwB;AACD;AAHN;AADpB;AACoB;AAuGrB;AAvGA;AAAqB;;;;;;;;;;ACvBrB;AACA;AACA;AAEA;AASI;AAEA;AATc;AACV;AACI;AACH;AACD;AACJ;AAKO;AACH;AACJ;AAEO;AACH;AACA;AACI;AACH;AAAM;AACH;AACI;AACI;AACH;AAAM;AACH;AACH;AACL;AACH;AACL;AAEO;AACH;AACA;AACI;AACA;AACI;AACH;AACJ;AAED;AACA;AACJ;AAEO;AAKH;AACI;AACI;AACA;AACI;AACH;AAAM;AACH;AAEQ;AACJ;AAEI;AACI;AACH;AACD;AACJ;AACJ;AACH;AACJ;AAAM;AACH;AACA;AACH;AACL;AACJ;AAEO;AAIH;AACI;AACI;AAEQ;AACJ;AAEI;AACI;AACH;AACD;AACJ;AACJ;AACH;AAAM;AACH;AACA;AACH;AACL;AACJ;AAEO;AACH;AACJ;AAnGe;AAoGnB;AArGA;AAAqB;;;;;;;;;;ACHrB;AAWI;AAUQ;AAPJ;AACA;AACA;AACA;AACJ;AAhBc;AAKV;AACA;AACJ;AAgBQ;AACJ;AACJ;AAEQ;AACJ;AACJ;AAEO;AACH;AACJ;AACJ;AAAA;;;;;;;;;;;ACpCA;AAYI;AAYQ;AACA;AATJ;AACA;AACA;AACA;AACA;AACJ;AAnBc;AAMV;AACA;AACJ;AAmBQ;AACJ;AACJ;AAEQ;AACJ;AACJ;AAEO;AACH;AACJ;AACJ;AAAA;;;;;;;;;;;;;;;;;;ACxCA;AAAA;AA2CA;AAvBkB;AAAgC;AAAA;AAAA;;AAC1C;AACI;AACH;AACL;AAEc;AAAkC;AAAA;AAAA;;AAC5C;AACI;AACH;AACL;AAEc;AAAiC;AAAA;AAAA;;AAC3C;AACI;AACH;AACL;AAEc;AAAiC;AAAA;AAAA;;AAC3C;AACI;AACH;AACL;AAxCuB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEC;AACA;AACT;AAyBnB;AA3CA;AAAqB;;;;;;;;;;ACArB;AAAA;AAQA;AAN2B;AAEA;AAEA;AAE3B;AARA;AAAqB;;;;;;;;;;;ACDrB;AAAA;AACI;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACJ;AAEA;AAAA;AACI;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACJ;;;;;;;;;;;ACrBA;AAAA;AACI;AACA;AACA;AACJ;AAEA;AAAA;AA6CA;AA5CkB;AACV;AAEA;AACA;AACI;AACH;AAAM;AACH;AACH;AAED;AACJ;AAEc;AACV;AACJ;AAEc;AACV;AACJ;AAEc;AACV;AACJ;AAEc;AACV;AACJ;AAEc;AACV;AACA;AACA;AACI;AAA0B;AACtB;AACH;AACG;AACJ;AAA8B;AAC1B;AACH;AACG;AACP;AACD;AACJ;AACJ;AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AClDA;AAEA;AAEM;AAGN;AAAwC;AAAxC;AAAA;AAEY;AAqBR;;AAEG;AAEK;AAyBR;;AAEG;AACK;;AAqBZ;AAzEW;AACH;AACJ;AAEO;AACH;AACA;AACI;AACA;AACA;AACH;AACD;AACJ;AAEO;AACH;AACI;AACH;AACL;AAOO;AACH;AACJ;AACQ;AACJ;AACJ;AAEU;AACN;AACA;AACJ;AAIO;AACH;AACI;AACH;AACL;AAEO;AAEP;AAMO;AACH;AACJ;AACO;AACH;AACI;AACH;AACD;AACJ;AAEO;AACH;AACA;AACJ;AAEO;AACH;AACA;AACA;AACJ;AA3EiB;AADpB;AACoB;AA4ErB;AA5EA;AAAqB;;;;;;;;;;ACRrB;AACA;AAKA;;AAEG;AACH;AAUI;AADQ;AAGR;AATc;AACV;AACI;AACH;AACD;AACJ;AAKA;;;;AAIG;AACI;AACH;AACA;AACA;AACA;AACI;AACH;AAAM;AACH;AACA;AACA;AACI;AACH;AACJ;AAED;AACI;AACA;AACA;AACI;AACH;AACD;AACA;AACH;AACD;AACJ;AAEA;;;AAGG;AACI;AACH;AACI;AACH;AACD;AACA;AACI;AACA;AACH;AACL;AAEO;AACH;AACI;AACH;AACD;AACA;AACI;AACH;AAAM;AACH;AACH;AACL;AAEO;AACH;AACI;AACA;AACH;AACD;AACJ;AA5Ee;AACA;AA4EnB;AA9EA;AAAqB;;;;;;;;;;ACTrB;AAAA;AAQY;AAgCZ;AAtCkB;AACV;AACA;AACA;AACJ;AAGU;AACN;AACJ;AAEA;AACI;AACJ;AAEA;AACI;AACJ;AAEA;AACI;AACJ;AAEA;AACI;AACJ;AAEA;AACI;AACJ;AAEA;AACI;AACJ;AAEA;AACI;AACJ;AACJ;AAAA;;;;;;;;;;;;ACxCA;AAAA;AACW;AACA;AACA;AAMX;AAJW;AACH;AACA;AACJ;AACJ;AAAA;AATa;AAWb;AAAA;AA8JA;AA5JI;;;;;AAKG;AACW;AAEV;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAGA;AACA;AACA;AAGA;AAEI;AACA;AACA;AACA;AACA;AAEJ;AACI;AACH;AAED;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACJ;AAEc;AACV;AACJ;AAEc;AACV;AACJ;AAEc;AACV;AACA;AACA;AACA;AACJ;AAEA;;;;;;AAMG;AACY;AACX;AACA;AAEA;AACA;AACI;AACH;AAED;AACA;AACI;AACH;AAED;AACA;AACI;AACH;AAED;AACA;AACI;AACH;AAED;AACA;AACI;AACH;AAED;AACA;AACI;AACH;AAED;AACA;AACA;AACI;AACH;AAED;AACJ;AAEA;;;;;AAKG;AACW;AACV;AACA;AACI;AACA;AACA;AACI;AACH;AACJ;AACD;AACJ;AAEc;AAA6D;AAAsB;AAC7F;AAEA;AACA;AACJ;AAEc;AACV;AACA;AACA;AACJ;AACJ;AAAA;;;;;;;;;;;AC1KA;AAKI;AAJQ;AACA;AACA;AAGJ;AACA;AACJ;AAEO;AACH;AACJ;AAEO;AACH;AACJ;AAEO;AACH;AACJ;AAEO;AACH;AACJ;AAEO;AACH;AACJ;AAEO;AACH;AACJ;AAEO;AACH;AACJ;AAEO;AACH;AACJ;AAEO;AACH;AACA;AACJ;AAEO;AACH;AACI;AACA;AACA;AACA;AACA;AACA;AACH;AACD;AACJ;AAEO;AACH;AACI;AACA;AACA;AACA;AACA;AACA;AACA;AACH;AACD;AACJ;AAEJ;AACA;AACA;AACA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEY;AACJ;AACI;AACH;AAED;AACI;AACH;AAED;AACI;AACH;AAED;AACA;AACI;AACH;AAED;AACA;AACI;AACH;AACD;AACJ;AAEQ;AACJ;AACA;AACI;AACA;AACA;AACA;AACH;AACL;AAEQ;AACJ;AACA;AACA;AACI;AACH;AAED;AACA;AACI;AACH;AAED;AACI;AACH;AACD;AACA;AACA;AACA;AACJ;AAEJ;AAAA;;;;;;;;;;;;AC/IA;AAAA;AACI;AACA;AACA;AACA;AACA;AACJ;AAEA;AAAA;AACI;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACJ;AAEA;AAAA;AAEY;AAQA;AAQA;AAgDZ;AA/DW;AACH;AACJ;AACU;AACN;AACJ;AAGO;AACH;AACJ;AACO;AACH;AACJ;AAGO;AACH;AACJ;AACU;AACN;AACJ;AAEU;AACN;AACJ;AAEU;AACN;AACJ;AAEU;AACN;AACJ;AAEU;AACN;AACJ;AAEU;AACN;AACJ;AAEU;AACN;AACJ;AAEU;AACN;AACJ;AAEU;AACN;AACJ;AAEU;AACN;AACA;AACJ;AAKJ;AAAA;;;;;;;;;;;;;;;;;;;;;;;;ACvFA;AAIA;AAA4C;AAA5C;AAAA;AAQY;;AAsEZ;AA5EkB;AACV;AACA;AACA;AACJ;AAGU;AACN;AACJ;AAGO;AACH;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACJ;AAEO;AACH;AACI;AACH;AACL;AAEO;AACH;AACI;AACA;AACH;AACL;AAEU;AACN;AACJ;AAEU;AACN;AACJ;AAEU;AACN;AACJ;AAEU;AACN;AACJ;AAEU;AACN;AACJ;AAEU;AACN;AACJ;AAEU;AACN;AACJ;AAEU;AACN;AACJ;AAGJ;AAAA;;;;;;;;;;;AClFA;AAGA;AAQA;AAWI;AADQ;AAEJ;AACJ;AAVc;AACV;AACI;AACH;AACD;AACJ;AAOO;AACH;AACJ;AAEO;AAIH;AACJ;AAEO;AACH;AACJ;AAEO;AACH;AACA;AACI;AACH;AACD;AACJ;AAEO;AACH;AACA;AACI;AACH;AAAM;AACH;AACA;AACH;AACL;AAEO;AACH;AACA;AACI;AACI;AACJ;AACH;AAAM;AACH;AACH;AACL;AAEO;AACH;AACA;AACI;AACH;AACD;AACJ;AA/De;AAgEnB;AAlEA;AAAqB;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACXrB;AAGM;AAGN;AAAkD;AAAlD;AAAA;AAEY;;AASZ;AAPI;AACI;AACA;AACI;AACA;AACH;AACL;AAV0B;AAD7B;AAC6B;AAW9B;AAXA;AAA8B;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACN9B;AACA;AAIM;AAEN;AAAgD;AAAhD;AAAA;AAEY;;AAmEZ;AAlEW;AACH;AACJ;AAEO;AACH;AACJ;AAEO;AACH;AACJ;AAEA;AACI;AACA;AACJ;AAEA;AACI;AACA;AACJ;AAEA;AACI;AACA;AACJ;AAEA;AACI;AACA;AACJ;AAEA;AACI;AACA;AACJ;AAEA;AACI;AACA;AACA;AACJ;AAEA;AACI;AACA;AACJ;AAEA;AACI;AACA;AACJ;AAEA;AACI;AACJ;AA1D0B;AAD7B;AAC6B;AAqE9B;AArEA;AAA8B;;;;;;;;;;;ACN9B;AAAA;AACI;AACA;AACA;AACA;AACA;AACA;AACJ;AAEA;AAEI;AADgB;AAGhB;AACc;AACV;AACA;AACJ;AACuB;AACA;AACA;AACA;AACA;AACA;AAC3B;AAfA;AAAqB;;;;;;;;;;;ACVrB;AACA;AACA;AACA;AAIA;AAWI;AAVA;AACA;AACA;AAUA;AARc;AACV;AACA;AACA;AACJ;AAKJ;AAAA;AAda;AAgBb;AAMI;AAJQ;AACA;AACA;AACA;AAEJ;AACA;AACJ;AAEQ;AACJ;AACI;AACH;AACD;AACA;AAAK;AACD;AACI;AACA;AACH;AACJ;AACD;AACJ;AAEQ;AACJ;AACI;AACH;AACD;AACA;AACI;AACA;AACH;AACD;AACJ;AAEO;AACH;AACI;AACH;AACD;AACA;AACI;AACH;AACD;AACJ;AAEQ;AACJ;AACI;AACH;AACD;AACA;AACI;AACA;AACI;AACI;AACA;AACA;AACA;AACA;AACA;AACH;AAAM;AACH;AACH;AACJ;AACJ;AACD;AACJ;AAEO;AACH;AACI;AACH;AACD;AACA;AACA;AACA;AACI;AACI;AACA;AACH;AACD;AACH;AACD;AACJ;AAEO;AAGH;AACI;AACA;AACH;AAED;AACA;AACA;AACA;AACA;AACA;AACJ;AAEQ;AACJ;AACI;AACH;AACD;AACI;AACH;AAED;AACA;AACA;AACI;AACA;AACA;AACH;AAAM;AACH;AACA;AACA;AACA;AACH;AACD;AACJ;AAEO;AAIH;AACI;AACA;AACH;AAED;AACA;AACA;AACA;AACI;AACH;AAAM;AACH;AACA;AACA;AACH;AACL;AAEO;AACH;AACI;AACH;AAED;AACI;AACA;AACA;AACI;AACH;AACJ;AAED;AACI;AACA;AACI;AACH;AACJ;AACL;AAEO;AACH;AACI;AACA;AACH;AACD;AACA;AACA;AACI;AACH;AACD;AACJ;AAEO;AACH;AACI;AACH;AACD;AACA;AACI;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;AAEA;AACI;AACA;AACJ;AAGA;AACI;AACA;AACA;AACA;AACJ;AAEA;AACI;AACA;AACJ;AAEA;AACI;AACA;AACJ;AAGO;AACH;AACI;AACA;AACA;AACI;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACH;AACD;AACH;AACD;AACJ;AAGO;AACH;AACJ;AAEO;AACH;AACJ;AAEO;AACH;AACA;AACI;AACA;AACJ;AACJ;AAEO;AACH;AACA;AACJ;AACO;AACH;AACA;AACI;AACH;AACD;AACJ;AArG0B;AAD7B;AAC6B;AAgH9B;AAhHA;AAA8B;;;;;;;;;;;ACb9B;AAAA;AACI;AACA;AACA;AACA;AACA;AACJ;AAEA;AAEI;AADgB;AAGhB;AACc;AACV;AACA;AACJ;AACuB;AACA;AACA;AACA;AACA;AAC3B;AAdA;AAAqB;;;;;;;;;;ACPrB;AACA;AACA;AAEA;AAEA;AACA;AACA;AAEA;AAYI;AAHQ;AACA;AAIR;AAZc;AACV;AACI;AACH;AACD;AACJ;AASQ;AACJ;AACI;AACA;AACA;AACH;AAED;AACA;AACI;AACA;AACA;AACA;AACH;AAAM;AACH;AACH;AACD;AACJ;AAEQ;AACJ;AACI;AACA;AACA;AACH;AACD;AACA;AACA;AACA;AACI;AACH;AAAM;AACH;AACH;AACD;AACJ;AAEQ;AACJ;AACI;AACA;AACH;AACD;AACA;AACA;AACA;AACA;AACJ;AAEO;AAAP;AAMI;AACA;AACI;AAAK;AACD;AACA;AACI;AACH;AACJ;AACJ;AAGD;AACA;AACI;AACI;AACA;AACI;AACH;AACJ;AACD;AACI;AACI;AAAK;AACD;AACA;AACI;AACH;AACJ;AACJ;AACD;AACA;AACJ;AACJ;AACW;AACP;AACA;AACA;AAEQ;AACI;AAAK;AACD;AACA;AAEQ;AACA;AACJ;AACP;AACD;AACA;AACH;AAAM;AACH;AACA;AACH;AACL;;AApBR;AAAW;AAqBV;AACD;AACJ;AAEO;AAKH;AACA;AACJ;AAEO;AACH;AACA;AACA;AACJ;AA3Ie;AA+InB;AAhJA;AAAqB;;;;;;;;;;ACTrB;AAAA;AAEA;AAAA;AAAA;;;;;;;;;;ACJA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;;;;;AAEM;AAGN;AAA0C;AAA1C;AAAA;AAEY;AACA;AACA;;AAuDZ;AAtDI;AACI;AACA;AACJ;AAEA;AACI;AACA;AACA;AACJ;AAEA;AACI;AACA;AACA;AACJ;AAEA;AACI;AACJ;AAEQ;AACJ;AACA;AACA;AACJ;AAEQ;AACJ;AACA;AACA;AACJ;AAEQ;AACJ;AACA;AAEA;AACA;AACA;AACJ;AACQ;AACJ;AACA;AAEA;AACA;AACA;AACJ;AAEQ;AACJ;AACA;AACJ;AA1DiB;AADpB;AACoB;AA2DrB;AA3DA;AAAqB;;;;;;;;;ACbrB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;;;;;;AAEM;AAEN;AAAA;AACI;AACA;AACA;AACA;AACJ;AAGA;AAA4C;AAA5C;AAAA;AAII;AAGA;AAGA;AAEO;AACC;AAsCA;AACA;AAqCA;;AA0GZ;AArLI;AAAA;AACI;AACJ;AAEA;AAEI;AACI;AACH;AAED;AACI;AAAkC;AAC9B;AACA;AACA;AACA;AACH;AACG;AACJ;AAAoC;AAChC;AACA;AACA;AACA;AACH;AACG;AACJ;AAAoC;AAChC;AACA;AACA;AACA;AACH;AACG;AACJ;AACI;AACP;AACL;;;AAjCC;AAqCM;AACH;AACA;AACJ;AAEA;AACI;AACJ;AAEA;AACI;AACJ;AAEA;AACI;AACJ;AAEA;AACI;AACA;AACA;AACJ;AAEQ;AACJ;AACA;AACA;AACA;AACJ;AAEQ;AACJ;AACA;AACA;AACJ;AAGQ;AACJ;AACA;AAEA;AACI;AACI;AACA;AACJ;AACI;AACJ;AACI;AACP;AACL;AACQ;AACJ;AACA;AACA;AACA;AACA;AAEI;AACI;AACI;AACA;AACJ;AACI;AACP;AACJ;AAAM;AACH;AACI;AACI;AACA;AACJ;AACI;AACP;AACJ;AACL;AACQ;AACJ;AACA;AACA;AACA;AACA;AACI;AACI;AACI;AACA;AACA;AACJ;AACI;AACA;AACA;AAC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;AACI;AACI;AACA;AACJ;AACI;AACA;AACP;AACD;AAGA;AACI;AACA;AACI;AACA;AACH;AACJ;AAED;AACI;AACI;AACH;AACD;AACH;AAED;AACJ;AAEQ;AAEJ;AACI;AAAoC;AAChC;AACH;AACG;AACJ;AAAkC;AAC9B;AACH;AACG;AACP;AAED;AACA;AACA;AACJ;AAIO;AACH;AACI;AACA;AACI;AACH;AACJ;AACD;AACJ;AAEQ;AACJ;AACA;AACI;AACH;AACD;AACJ;AACQ;AACJ;AACA;AACA;AACI;AACH;AACD;AAEA;AACI;AACH;AAAM;AACH;AACA;AACH;AACL;AAEO;AACH;AACI;AACH;AAED;AACA;AACI;AACH;AACD;AACI;AACA;AACA;AACH;AACL;AACO;AACH;AACJ;AAEO;AACH;AACJ;AAGO;AACH;AACA;AACJ;AAGO;AACH;AACJ;AAEO;AACH;AACA;AACJ;AAEO;AAEH;AACI;AACA;AACA;AACA;AACH;AACD;AAEA;AACA;AACJ;AAEO;AACH;AACI;AACA;AACA;AACH;AACD;AACJ;AAEO;AACH;AACI;AACH;AACD;AACA;AACI;AACA;AACI;AACH;AACJ;AACD;AACJ;AAEO;AACH;AACI;AACH;AACD;AACA;AACI;AACA;AACI;AACH;AACJ;AACD;AACJ;AAEO;AACH;AACJ;AAEO;AACH;AACA;AACJ;AACO;AACH;AACA;AACI;AACI;AACA;AACJ;AACI;AACA;AACJ;AACI;AACP;AACD;AACJ;AAEO;AACH;AACJ;AAEO;AACH;AACJ;AAEO;AACH;AACJ;AAtgBA;AADC;AACgC;AAHhB;AADpB;AACoB;AA4gBrB;AA5gBA;AAAqB;;;;;;;;;;;ACzBrB;AAEA;AAAA;AAgCA;AAtBkB;AACV;AACA;AACI;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACH;AACD;AACJ;AAEO;AACH;AACA;AACI;AACH;AACD;AACJ;AACJ;AAAA;AAhCa;AAkCb;AAAA;AAcA;AATkB;AACV;AACA;AACI;AACA;AACA;AACH;AACD;AACJ;AACJ;AAAA;AAda;AAgBb;AAAA;AAmCA;AAxBkB;AACV;AACA;AACI;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACI;AAAK;AACD;AACH;AACJ;AACD;AACA;AACH;AACD;AACJ;AAEO;AACH;AACJ;AACJ;AAAA;AAnCa;AAqCb;AAAA;AAyCA;AAjCkB;AACV;AACA;AACI;AACA;AACA;AACA;AACA;AACA;AACA;AACI;AAAK;AACD;AACH;AACJ;AAEJ;AACD;AACJ;AAEO;AACH;AACA;AAAK;AACD;AACA;AACI;AACH;AACD;AACI;AACH;AACJ;AACD;AACJ;AAEJ;AAAA;AAzCa;AA2Cb;AAAA;AAsBA;AAlBkB;AACV;AACA;AACI;AACA;AACA;AACI;AAAK;AACD;AACH;AACJ;AAEJ;AACD;AACJ;AAEO;AACH;AACJ;AACJ;AAAA;AAtBa;AAwBb;AAeI;AARQ;AACA;AACA;AACA;AACA;AAEA;AACA;AAEJ;AACA;AACA;AACA;AACJ;AAlBc;AACV;AACA;AACJ;AAiBU;AACN;AACA;AACA;AACJ;AAEQ;AACJ;AACA;AACJ;AAEQ;AACJ;AACA;AACA;AACI;AACI;AACA;AACA;AACI;AACA;AACH;AAAM;AACH;AACA;AACH;AACJ;AACJ;AAEL;AAEQ;AACJ;AACA;AAEA;AACI;AAAK;AACD;AAEA;AACI;AACA;AACA;AACA;AACA;AACA;AACI;AACA;AACA;AACH;AACJ;AACJ;AACJ;AACL;AAEO;AACH;AACJ;AAEO;AACH;AACJ;AAEO;AACH;AACI;AACH;AACD;AACJ;AAEO;AACH;AACA;AACI;AACH;AACD;AACJ;AAEO;AACH;AACI;AACH;AACD;AACJ;AAEO;AACH;AACA;AACI;AAKA;AACH;AACD;AACJ;AAEO;AACH;AACJ;AAEO;AACH;AACA;AACI;AACH;AACD;AACJ;AACJ;AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AC9RA;AAIM;AAGN;AAA8C;AAA9C;AAAA;AAEI;AACQ;;AAgCZ;AA/BI;AACI;AACJ;AAEA;AAEO;AAEH;AACI;AACH;AACD;AACA;AACA;AACI;AACA;AACI;AACA;AACI;AACH;AACD;AACA;AACA;AACH;AAAM;AACH;AACA;AACH;AACJ;AACL;AAhCiB;AADpB;AACoB;AAmCrB;AAnCA;AAAqB;;;;;;;;;;ACPrB;AACA;AAAA;AA6GA;AA5GI;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAmCG;AACW;AAEV;AAEQ;AACJ;AAEI;AACJ;AAEJ;AAAK;AACD;AAAuD;AAEvD;AACI;AACI;AACA;AACH;AACD;AACH;AAAM;AACH;AACI;AACA;AACH;AACD;AACA;AACH;AACJ;AAED;AACA;AACI;AACA;AACH;AACD;AACJ;AAGc;AAEV;AACA;AACI;AACA;AACI;AACH;AAAM;AACH;AACA;AACI;AACA;AACH;AACJ;AACJ;AAED;AACA;AACI;AACH;AACD;AACJ;AAEe;AACX;AACA;AACI;AACI;AACH;AAAM;AACH;AACH;AACJ;AACD;AACJ;AACJ;AAAA;;;;;;;;;;AC9GA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;;;;;AAKM;AAGN;AAAuC;AAAvC;AAAA;AASY;;AA6BZ;AAtCqB;AAIV;AACH;AACA;AACJ;AAIO;AACH;AACA;AACJ;AAEO;AACH;AACA;AACA;AACJ;AAEO;AACH;AACJ;AAEO;AACH;AACA;AACI;AACH;AACL;AAEO;AACH;AACI;AACH;AACL;;AAnCuB;AACR;AAHE;AADpB;AACoB;AAsCrB;AAtCA;AAAqB","sourcesContent":["import LayerBase from \"../LayerDirector/LayerBase\";\r\nimport LayerDirectorError from \"../LayerDirector/LayerDirectorError\";\r\nimport IGame from \"../IGame/IGame\";\r\nimport DefaultConfig from \"../DefaultConfigs/DefaultConfig\";\r\nimport AssetCache from \"../AssetCache/AssetCache\";\r\nimport LayerEnterParamBase from \"../LayerDirector/LayerEnterParamBase\";\r\n\r\nexport class ActiveIndicatorLayerEnterParam extends LayerEnterParamBase {\r\n    enterParam: Object = null;\r\n    public static create(enterParam: Object): ActiveIndicatorLayerEnterParam {\r\n        let param = new ActiveIndicatorLayerEnterParam();\r\n        param.enterParam = enterParam;\r\n        return param\r\n    }\r\n\r\n    private constructor() {\r\n        super();\r\n    }\r\n}\r\n\r\nconst { ccclass, property } = cc._decorator;\r\n\r\n@ccclass\r\nexport default class ActiveIndicatorLayer extends LayerBase {\r\n\r\n    private static readonly indicatorAnimatorPath: string = \"prefab/ActiveIndicator/ActiveIndicator\"\r\n    public static readonly LayerName: string = \"ActiveIndicatorLayer\";\r\n\r\n    public getLayerName(): string {\r\n        return ActiveIndicatorLayer.LayerName;\r\n    }\r\n    private _showIndicatorDelay: number = 0.0;\r\n    private _indicatorRoot: cc.Node = null;\r\n    private _indicatorAnimator: cc.Node = null\r\n    public static open(enterParam?: ActiveIndicatorLayerEnterParam, completeCallback?: (error: LayerDirectorError, layer: LayerBase) => void): ActiveIndicatorLayer {\r\n        let node: cc.Node = new cc.Node();\r\n        let widget = node.addComponent(cc.Widget);\r\n        widget.isAlignLeft = true;\r\n        widget.left = 0;\r\n        widget.isAlignRight = true;\r\n        widget.right = 0;\r\n        widget.isAlignBottom = true;\r\n        widget.bottom = 0;\r\n        widget.isAlignTop = true;\r\n        widget.top = 0;\r\n        widget.alignMode = cc.Widget.AlignMode.ONCE\r\n        node.addComponent(cc.BlockInputEvents);\r\n        let layer = node.addComponent(ActiveIndicatorLayer);\r\n        IGame.getInstance().addLayer(layer, enterParam, completeCallback);\r\n        return layer;\r\n    }\r\n\r\n    public static close() {\r\n        IGame.getInstance().removeLayerWithID(ActiveIndicatorLayer.LayerName);\r\n    }\r\n\r\n    public getLayerZOrder(): number {\r\n        return DefaultConfig.ZORDER_UI_LAYER_ACITIVE_INDICATOR;\r\n    }\r\n\r\n    private updateIndicator() {\r\n        if (this._showIndicatorDelay <= 0) {\r\n            this.setIndicatorVisable(true);\r\n        }\r\n    }\r\n\r\n    private setIndicatorVisable(visable: boolean) {\r\n        this._indicatorRoot.active = visable;\r\n        if (this._indicatorAnimator) {\r\n            let animator = this._indicatorAnimator.getComponent(cc.Animation);\r\n            if (animator) {\r\n                if (visable) {\r\n                    let state = animator.play(\"loop\");\r\n                    if (state) {\r\n                        state.wrapMode = cc.WrapMode.Loop;\r\n                    }\r\n                } else {\r\n                    animator.stop();\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    private onIndicatorAnimationLoaded(error: Error, resource: cc.Prefab) {\r\n        if (!cc.isValid(this.node)) {\r\n            return;\r\n        }\r\n        if (error == null) {\r\n            this._indicatorAnimator = cc.instantiate(resource);\r\n            if (this._indicatorAnimator) {\r\n                this._indicatorRoot.addChild(this._indicatorAnimator);\r\n                this.updateIndicator();\r\n            }\r\n        }\r\n    }\r\n\r\n    public onLayerLoad(): void {\r\n\r\n    }\r\n    public onLayerEnable(): void {\r\n\r\n    }\r\n    onLayerEnter(param: LayerEnterParamBase) {\r\n        this._indicatorRoot = new cc.Node();\r\n        this.node.addChild(this._indicatorRoot);\r\n        this.setIndicatorVisable(false);\r\n        AssetCache.getInstance().getAsset(\"resources\", ActiveIndicatorLayer.indicatorAnimatorPath, cc.Prefab, null, this.onIndicatorAnimationLoaded.bind(this));\r\n    }\r\n    public onLayerStart(): void {\r\n\r\n    }\r\n    onLayerUpdate(dt) {\r\n        if (this._showIndicatorDelay > 0) {\r\n            this._showIndicatorDelay -= dt;\r\n            this.updateIndicator();\r\n        }\r\n    }\r\n    public onLayerExit(): void {\r\n\r\n    }\r\n    public onLayerDisable(): void {\r\n\r\n    }\r\n    public onLayerDestroy(): void {\r\n\r\n    }\r\n}\r\n","import Debuger from \"../Utils/Debuger\";\r\nimport AssetDirLoader from \"./AssetDirLoader\";\r\nimport AssetLoader from \"./AssetLoader\";\r\n\r\nexport default class AssetCache {\r\n    private static _instance: AssetCache = null;\r\n    public static getInstance(): AssetCache {\r\n        if (!this._instance) {\r\n            this._instance = new AssetCache();\r\n        }\r\n        return this._instance;\r\n    }\r\n\r\n    private constructor() {\r\n\r\n    }\r\n    public getAssetBundleSync(id: string): cc.AssetManager.Bundle {\r\n        return cc.assetManager.getBundle(id);\r\n    }\r\n\r\n    public getAssetBundle(id: string, complete?: (error: Error, bundle: cc.AssetManager.Bundle) => void) {\r\n        let bundle = cc.assetManager.getBundle(id);\r\n        if (bundle) {\r\n            complete && complete(null, bundle);\r\n        } else {\r\n            cc.assetManager.loadBundle(id, (error: Error, bundle: cc.AssetManager.Bundle) => {\r\n                if (error == null) {\r\n                    complete && complete(error, bundle);\r\n                } else {\r\n                    complete && complete(error, null);\r\n                }\r\n            })\r\n        }\r\n    }\r\n\r\n    public getAssetSync(bundleID: string, url: string, type: typeof cc.Asset): cc.Asset {\r\n        let bundle = this.getAssetBundleSync(bundleID);\r\n        if (bundle) {\r\n            let res = bundle.get(url, type)\r\n            if (res) {\r\n                return res;\r\n            }\r\n        }\r\n\r\n        Debuger.error(Debuger.FILTER_TAG01, \"AssetCache.getAssetSync failed bundle:\", bundleID, \"url:\", url)\r\n        return null;\r\n    }\r\n\r\n    public getAsset(bundleID: string, url: string,\r\n        type: typeof cc.Asset,\r\n        progressCallback?: (completedCount: number, totalCount: number, item: cc.AssetManager.RequestItem) => void,\r\n        completeCallback?: (error: Error, resource: cc.Asset) => void) {\r\n\r\n        this.getAssetBundle(bundleID, (error: Error, bundle: cc.AssetManager.Bundle) => {\r\n            if (bundle) {\r\n                let res = bundle.get(url, type)\r\n                if (res) {\r\n                    completeCallback(null, res);\r\n                } else {\r\n                    let loader = AssetLoader.create(bundle, url, type,\r\n                        (completedCount: number, totalCount: number, item: cc.AssetManager.RequestItem) => {\r\n                            progressCallback && progressCallback(completedCount, totalCount, item);\r\n                        },\r\n                        (error: Error, resource: cc.Asset) => {\r\n                            if (error) {\r\n                                Debuger.error(Debuger.FILTER_TAG01, \"AssetCache.getAsset failed bundle:\", bundleID, \"url:\", url)\r\n                            }\r\n                            completeCallback && completeCallback(error, resource);\r\n                        });\r\n                    loader.load();\r\n                }\r\n            } else {\r\n                Debuger.error(Debuger.FILTER_TAG01, \"AssetCache.getAsset failed bundle:\", bundleID, \"url:\", url)\r\n                completeCallback(error, null);\r\n            }\r\n        })\r\n    }\r\n\r\n    public loadAssetDir(bundleID: string, url: string,\r\n        progressCallback?: (finish: number, total: number, item: cc.AssetManager.RequestItem) => void,\r\n        completeCallback?: (error: Error, assets: cc.Asset[]) => void): void {\r\n\r\n        this.getAssetBundle(bundleID, (error: Error, bundle: cc.AssetManager.Bundle) => {\r\n            if (bundle) {\r\n                let loader = AssetDirLoader.create(bundle, url,\r\n                    (completeCount: number, totalCount: number, item: cc.AssetManager.RequestItem) => {\r\n                        progressCallback && progressCallback(completeCount, totalCount, item);\r\n                    },\r\n                    (error: Error, assets: cc.Asset[]) => {\r\n                        if (error) {\r\n                            Debuger.error(Debuger.FILTER_TAG01, \"AssetCache.loadAssetDir failed bundle:\", bundleID, \"url:\", url)\r\n                        }\r\n                        completeCallback && completeCallback(error, assets);\r\n                    })\r\n                loader.load();\r\n            } else {\r\n                Debuger.error(Debuger.FILTER_TAG01, \"AssetCache.loadAssetDir failed bundle:\", bundleID, \"url:\", url)\r\n                completeCallback(error, null);\r\n            }\r\n        })\r\n    }\r\n\r\n    public getCashedAssetCount(): number {\r\n        return cc.assetManager.assets.count;\r\n    }\r\n}\r\n","\r\nexport default class AssetDirLoader {\r\n\r\n    public static create(\r\n        bundle: cc.AssetManager.Bundle,\r\n        url: string,\r\n        progressCallback?: (completedCount: number, totalCount: number, item: cc.AssetManager.RequestItem) => void,\r\n        completeCallback?: (error: Error, assets: cc.Asset[]) => void): AssetDirLoader {\r\n        let instance = new AssetDirLoader(bundle, url, progressCallback, completeCallback);\r\n        return instance;\r\n    }\r\n\r\n    private constructor(bundle: cc.AssetManager.Bundle, url: string,\r\n        progressCallback?: (completedCount: number, totalCount: number, item: cc.AssetManager.RequestItem) => void,\r\n        completeCallback?: (error: Error, assets: cc.Asset[]) => void) {\r\n        this._bundle = bundle;\r\n        this._url = url;\r\n        this._progressCallback = progressCallback;\r\n        this._completeCallback = completeCallback;\r\n    }\r\n\r\n    private _bundle: cc.AssetManager.Bundle;\r\n    private _url: string = \"\";\r\n    private _progressCallback: (completedCount: number, totalCount: number, item: cc.AssetManager.RequestItem) => void\r\n    private _completeCallback: (error: Error, assets: cc.Asset[]) => void\r\n\r\n    private innerProgressCallback(completedCount: number, totalCount: number, item: cc.AssetManager.RequestItem) {\r\n        this._progressCallback && this._progressCallback(completedCount, totalCount, item);\r\n    }\r\n\r\n    private innerCompleteCallback(error: Error, assets: cc.Asset[]): void {\r\n        this._completeCallback && this._completeCallback(error, assets);\r\n    }\r\n\r\n    public load() {\r\n        this._bundle.loadDir(this._url, this.innerProgressCallback.bind(this), this.innerCompleteCallback.bind(this));\r\n    }\r\n}\r\n","\r\nexport default class AssetLoader {\r\n\r\n    public static create(\r\n        bundle: cc.AssetManager.Bundle,\r\n        url: string,\r\n        type: typeof cc.Asset,\r\n        progressCallback?: (completedCount: number, totalCount: number, item: cc.AssetManager.RequestItem) => void,\r\n        completeCallback?: (error: Error, resource: cc.Asset) => void): AssetLoader {\r\n        let instance = new AssetLoader(bundle, url, type, progressCallback, completeCallback);\r\n        return instance;\r\n    }\r\n\r\n    private constructor(bundle: cc.AssetManager.Bundle, url: string,\r\n        type: typeof cc.Asset,\r\n        progressCallback?: (completedCount: number, totalCount: number, item: cc.AssetManager.RequestItem) => void,\r\n        completeCallback?: (error: Error, resource: cc.Asset) => void) {\r\n        this._bundle = bundle;\r\n        this._url = url;\r\n        this._type = type;\r\n        this._progressCallback = progressCallback;\r\n        this._completeCallback = completeCallback;\r\n    }\r\n\r\n    private _bundle: cc.AssetManager.Bundle;\r\n    private _url: string = \"\";\r\n    private _type: typeof cc.Asset = null\r\n    private _progressCallback: (completedCount: number, totalCount: number, item: cc.AssetManager.RequestItem) => void\r\n    private _completeCallback: (error: Error, resource: cc.Asset) => void\r\n\r\n    private innerProgressCallback(completedCount: number, totalCount: number, item: cc.AssetManager.RequestItem) {\r\n        this._progressCallback && this._progressCallback(completedCount, totalCount, item);\r\n    }\r\n\r\n    private innerCompleteCallback(error: Error, resource: cc.Asset): void {\r\n        this._completeCallback && this._completeCallback(error, resource);\r\n    }\r\n\r\n    public load() {\r\n        this._bundle.load(this._url, this._type, this.innerProgressCallback.bind(this), this.innerCompleteCallback.bind(this));\r\n    }\r\n}\r\n","\r\nexport default class Debuger {\r\n\r\n    public static readonly FILTER_TAG01: number = 0x00000001;\r\n    public static readonly FILTER_TAG02: number = 0x00000002;\r\n    public static readonly FILTER_TAG03: number = 0x00000004;\r\n    public static readonly FILTER_TAG04: number = 0x00000010;\r\n    public static readonly FILTER_TAG05: number = 0x10000020;\r\n    public static readonly FILTER_TAG06: number = 0x00000040;\r\n    public static readonly FILTER_TAG07: number = 0x00000080;\r\n    public static readonly FILTER_TAG08: number = 0x00000100;\r\n    public static readonly FILTER_TAG09: number = 0x00000200;\r\n    public static readonly FILTER_TAG10: number = 0x00000400;\r\n    public static readonly FILTER_TAG11: number = 0x00000800;\r\n    public static readonly FILTER_TAG12: number = 0x00001000;\r\n    public static readonly FILTER_TAG13: number = 0x00001200;\r\n\r\n    private static readonly FILTER_TAG_NONE: number = 0x00000000;\r\n    private static readonly FILTER_TAG_ALL: number = 0xffffffff;\r\n    private static _filterTag: number = Debuger.FILTER_TAG_ALL;\r\n\r\n    public static log(tag: number, message?: any, ...optionalParams: any[]) {\r\n        if ((this._filterTag & tag) != 0) {\r\n            console.log(message, ...optionalParams);\r\n        }\r\n    }\r\n\r\n    public static error(tag: number, message?: any, ...optionalParams: any[]) {\r\n        if ((this._filterTag & tag) != 0) {\r\n            console.error(message, ...optionalParams);\r\n        }\r\n    }\r\n\r\n    public static warn(tag: number, message?: any, ...optionalParams: any[]) {\r\n        if ((this._filterTag & tag) != 0) {\r\n            console.warn(message, ...optionalParams);\r\n        }\r\n    }\r\n\r\n    public static info(tag: number, message?: any, ...optionalParams: any[]) {\r\n        if ((this._filterTag & tag) != 0) {\r\n            console.info(message, ...optionalParams);\r\n        }\r\n    }\r\n}\r\n","\r\nexport default class DefaultConfig {\r\n\r\n    public static readonly ZORDER_UI_ROOT = 10000;\r\n\r\n    public static readonly ZORDER_UI_LAYER_DEFAULT = 100;\r\n\r\n    public static readonly ZORDER_UI_LAYER_ACITIVE_INDICATOR = 1000;\r\n\r\n}\r\n","export enum AssetBundleID {\r\n    Resources = \"resources\",\r\n    Common = \"common\",\r\n    MainScene = \"main_scene\",\r\n    GameScene = \"game_scene\",\r\n    ResultScene = \"result_scene\",\r\n    ShaderScene = \"shader_scene\",\r\n    LockStepScene = \"lock_step_scene\",\r\n    DropScene = \"drop_scene\",\r\n    ChatScene = \"chat_scene\",\r\n}\r\n\r\nexport enum SceneName {\r\n    LoadingScene = \"LoadingScene\",\r\n    SwitchScene = \"SwitchScene\",\r\n    MainScene = \"MainScene\",\r\n    GameScene = \"GameScene\",\r\n    ResultScene = \"ResultScene\",\r\n    ShaderScene = \"ShaderScene\",\r\n    LockStepScene = \"LockStepScene\",\r\n    DropScene = \"DropScene\",\r\n    ChatScene = \"ChatScene\",\r\n}","\r\nexport enum DeviceType {\r\n    Normal,\r\n    NotchIOS,\r\n    NotchAndriod,\r\n}\r\n\r\nexport default class DeviceTypeUtils {\r\n    public static getDeviceType(): DeviceType {\r\n        let size = cc.director.getWinSize();\r\n\r\n        let screenRatio = size.height / size.width;\r\n        if (this.isLiuHai(screenRatio)) {\r\n            return DeviceType.NotchIOS;\r\n        } else if (this.isQuanMian(screenRatio)) {\r\n            return DeviceType.NotchAndriod;\r\n        }\r\n\r\n        return DeviceType.Normal;\r\n    }\r\n\r\n    public static isQuanMian(screenRatio: number): boolean {\r\n        return screenRatio > 1.789 && screenRatio < 19 / 9;\r\n    }\r\n\r\n    public static isEqual19_9(screenRatio: number) {\r\n        return screenRatio == 19 / 9;\r\n    }\r\n\r\n    public static isLiuHai(screenRatio: number): boolean {\r\n        return screenRatio >= 19 / 9;\r\n    }\r\n\r\n    public static isNormal(screenRatio: number): boolean {\r\n        return screenRatio <= 1.789;\r\n    }\r\n\r\n    public static getTopViewAdpatHeight(): number {\r\n        let height = 0;\r\n        let type = this.getDeviceType();\r\n        switch (type) {\r\n            case DeviceType.NotchIOS: {\r\n                height = 64;\r\n            }\r\n                break;\r\n            case DeviceType.NotchAndriod: {\r\n                height = 60;\r\n            }\r\n                break;\r\n        }\r\n        return height;\r\n    }\r\n}\r\n","\n\nimport WorldBase from \"../World/WorldBase\";\nimport Message from \"../FSM/Message\";\nimport EntityNodePool from \"./EntityNodePool\";\n\nconst { ccclass, property } = cc._decorator;\n\n@ccclass\nexport default class EntityBase extends cc.Component {\n\n    private m_identifier: number = 0;\n    public getIdentifier(): number {\n        return this.m_identifier;\n    }\n\n    public getPosition(): cc.Vec2 {\n        let position = cc.v2(0, 0);\n        if (this.node) {\n            let nodePosition = this.node.getPosition();\n            position.x = nodePosition.x;\n            position.y = nodePosition.y\n        }\n        return position;\n    }\n\n    public setPosition(position: cc.Vec2): void {\n        if (this.node) {\n            this.node.setPosition(position);\n        }\n    }\n\n    /**\n     *  Message\n     */\n\n    private _world: WorldBase = null;\n    public getWorld(): WorldBase {\n        return this._world;\n    }\n    private setWorld(world: WorldBase): void {\n        this._world = world;\n    }\n\n    protected initEntity(world: WorldBase) {\n        this.m_identifier = world.getNextValidID();\n        this.setWorld(world);\n    }\n\n\n\n    public dispatchMessage(entityID: number, message: Message) {\n        if (this._world) {\n            this._world.dispatchMessage(entityID, message);\n        }\n    }\n\n    public onMessage(msg: Message) {\n\n    }\n\n    /**\n     * EntityNodePool\n     */\n    private m_prefabName: string = '';\n    public getPrefabName(): string {\n        return this.m_prefabName;\n    }\n    public setPrefabName(name: string): void {\n        if (name == this.m_prefabName) {\n            return;\n        }\n        this.m_prefabName = name;\n    }\n\n    public recycle() {\n        this.node.removeFromParent(false);\n        EntityNodePool.getInstance().putEntityNode(this);\n    }\n\n    public onRecycle() {\n        this.setWorld(null);\n        this.m_identifier = WorldBase.InvalidID;\n        this.m_prefabName = \"\";\n    }\n}\n","import EntityBase from \"./EntityBase\";\nimport AssetCache from \"../../AssetCache/AssetCache\";\nimport Debuger from \"../../Utils/Debuger\";\n\n\n\n\n/**\n * 实体对象池\n */\nexport default class EntityNodePool {\n    private static maxPoolCapacity = 100;\n    private static instance: EntityNodePool = null;\n    public static getInstance(): EntityNodePool {\n        if (this.instance == null) {\n            this.instance = new EntityNodePool();\n        }\n        return this.instance;\n    }\n    private _entityNodePools: Object = {}\n    constructor() {\n\n    }\n    /**\n     * 获取实体对象\n     * @param fileName prefab名\n     * @param className 类名\n     */\n    public getEntityNode(bundleName: string, fileName: string, className: string): EntityBase {\n        let node: cc.Node = null;\n        // 存在Pool从Pool中取出一个node\n        let nodePool = this._entityNodePools[fileName] as cc.NodePool;\n        if (nodePool && nodePool.size() > 0) {\n            node = nodePool.get();\n        } else {\n            // 不存在Pool则创建一个node\n            let res = AssetCache.getInstance().getAssetSync(bundleName, fileName, cc.Prefab);\n            if (res) {\n                node = cc.instantiate(res as cc.Prefab);\n            }\n        }\n\n        if (node) {\n            // node中没有需要的类则添加需要的类，并且设置prefab名\n            let component = node.getComponent(className) as EntityBase;\n            if (!component) {\n                component = node.addComponent(className);\n            }\n            component.setPrefabName(bundleName + \"/\" + fileName);\n            return component;\n        }\n        return null;\n    }\n\n    /**\n     * 存放实体\n     * @param entity \n     */\n    public putEntityNode(entity: EntityBase): void {\n        if (!entity) {\n            return;\n        }\n        let prefabFileName = entity.getPrefabName();\n        if (prefabFileName != '') {\n            this.putPrefabNode(entity.node, prefabFileName);\n            entity.onRecycle();\n        }\n    }\n\n    public putPrefabNode(node: cc.Node, prefabFileName: string) {\n        if (!this._entityNodePools.hasOwnProperty(prefabFileName)) {\n            this._entityNodePools[prefabFileName] = new cc.NodePool(prefabFileName);\n        }\n        let nodePool = this._entityNodePools[prefabFileName] as cc.NodePool;\n        if (nodePool.size() < EntityNodePool.maxPoolCapacity) {\n            nodePool.put(node);\n        } else {\n            Debuger.log(Debuger.FILTER_TAG01, \"Pool is Full\");\n        }\n    }\n\n    public clear(): void {\n        for (let key in this._entityNodePools) {\n            let pool = this._entityNodePools[key] as cc.NodePool;\n            pool.clear();\n        }\n        this._entityNodePools = {};\n    }\n}\n\n","\r\nexport default class EventDispatcher {\r\n\r\n    public static create(): EventDispatcher {\r\n        let instance = new EventDispatcher();\r\n        instance.init();\r\n        return instance;\r\n    }\r\n\r\n    private _eventTarget: cc.EventTarget = null;\r\n    protected init() {\r\n        this._eventTarget = new cc.EventTarget();\r\n    }\r\n\r\n    hasEventListener(type: string): boolean {\r\n        return this._eventTarget.hasEventListener(type);\r\n    }\r\n\r\n    registListener<T extends Function>(type: string, callback: T, target?: any): T {\r\n        return this._eventTarget.on<T>(type, callback, target, false)\r\n    }\r\n\r\n    removeListener(type: string, callback?: Function, target?: any): void {\r\n        this._eventTarget.off(type, callback, target);\r\n    }\r\n\r\n    removeListenerTarget(target: any): void {\r\n        this._eventTarget.targetOff(target);\r\n    }\r\n\r\n    removeAllListener(keyOrTarget: string | any): void {\r\n        this._eventTarget.removeAll(keyOrTarget)\r\n    }\r\n\r\n    registListenerOnce(type: string, callback: (arg1?: any, arg2?: any, arg3?: any, arg4?: any, arg5?: any) => void, target?: any): void {\r\n        this._eventTarget.once(type, callback)\r\n    }\r\n\r\n    dispatchEvent(event: cc.Event.EventCustom): void {\r\n        this._eventTarget.dispatchEvent(event);\r\n    }\r\n}\r\n","\r\nexport class QuadricEquation {\r\n    public a: number = 0;\r\n    public b: number = 0;\r\n    public c: number = 0;\r\n\r\n    public getPoint(x: number): cc.Vec2 {\r\n        let result = cc.v2(x, this.a * x * x + this.b * x + this.c)\r\n        return result;\r\n    }\r\n}\r\n\r\nexport default class GameMath {\r\n\r\n    /**\r\n     * 已知3点求一元二次方程\r\n     * @param pointA \r\n     * @param pointB \r\n     * @param pointC \r\n     */\r\n    public static getQuadricEquation(pointA: cc.Vec2, pointB: cc.Vec2, pointC: cc.Vec2): QuadricEquation {\r\n\r\n        let a11 = 1;\r\n        let a12 = pointA.x;\r\n        let a13 = pointA.x * pointA.x\r\n\r\n        let a21 = 1;\r\n        let a22 = pointB.x;\r\n        let a23 = pointB.x * pointB.x\r\n\r\n        let a31 = 1;\r\n        let a32 = pointC.x;\r\n        let a33 = pointC.x * pointC.x\r\n\r\n\r\n        let b11 = pointA.y;\r\n        let b21 = pointB.y;\r\n        let b31 = pointC.y;\r\n\r\n\r\n        let CAbs =\r\n            a11 * a22 * a33 +\r\n            a12 * a23 * a31 +\r\n            a13 * a21 * a32 -\r\n            a13 * a22 * a31 -\r\n            a11 * a23 * a32 -\r\n            a12 * a21 * a33;\r\n\r\n        if (CAbs == 0) {\r\n            return null;\r\n        }\r\n\r\n        let c11 = (a22 * a33 - a23 * a32) / CAbs;\r\n        let c12 = -1 * (a12 * a33 - a13 * a32) / CAbs;\r\n        let c13 = (a12 * a23 - a13 * a22) / CAbs;\r\n\r\n        let c21 = -1 * (a21 * a33 - a23 * a31) / CAbs;\r\n        let c22 = (a11 * a33 - a13 * a31) / CAbs;\r\n        let c23 = -1 * (a11 * a23 - a13 * a21) / CAbs;\r\n\r\n        let c31 = (a21 * a32 - a22 * a31) / CAbs\r\n        let c32 = -1 * (a11 * a32 - a12 * a31) / CAbs;\r\n        let c33 = (a11 * a22 - a12 * a21) / CAbs;\r\n\r\n        let a = c11 * b11 + c12 * b21 + c13 * b31;\r\n        let b = c21 * b11 + c22 * b21 + c23 * b31;\r\n        let c = c31 * b11 + c32 * b21 + c33 * b31;\r\n\r\n        let equation = new QuadricEquation();\r\n        equation.a = c;\r\n        equation.b = b;\r\n        equation.c = a;\r\n        return equation;\r\n    }\r\n\r\n    public static degreeToRadian(degree: number): number {\r\n        return degree / 180 * Math.PI;\r\n    }\r\n\r\n    public static radinToDegree(radin: number): number {\r\n        return radin / Math.PI * 180;\r\n    }\r\n\r\n    public static randomInteger(min: number, max: number): number {\r\n        let delta = max - min;\r\n        let radom = Math.round(Math.random() * delta)\r\n        let value = min + radom\r\n        return value;\r\n    }\r\n\r\n    /**\r\n     * 判断水平射线是否与线段相交\r\n     * 用于判断点是否在多边形内\r\n     * @param point 水平射线起点\r\n     * @param start 线段起点\r\n     * @param end 线段终点\r\n     */\r\n    private static isHorizontalRayIntersectsSegment(point: cc.Vec2, start: cc.Vec2, end: cc.Vec2): boolean {\r\n        // 射线法的实现\r\n        // 从point水平向右做一条射线进行判断\r\n\r\n        // 射线平行、重合，线段首尾端点重合的情况\r\n        if (start.y == end.y) {\r\n            return false;\r\n        }\r\n\r\n        // 线段在射线上边\r\n        if (start.y > point.y && end.y > point.y) {\r\n            return false\r\n        }\r\n\r\n        // 线段在射线下边\r\n        if (start.y < point.y && end.y < point.y) {\r\n            return false\r\n        }\r\n\r\n        // 线段在射线左边\r\n        if (start.x < point.x && end.x < point.x) {\r\n            return false\r\n        }\r\n\r\n        // 射线经过线段下端点\r\n        if (start.y == point.y && end.y > point.y) {\r\n            return false\r\n        }\r\n\r\n        // 射线经过线段下端点\r\n        if (end.y == point.y && start.y > point.y) {\r\n            return false\r\n        }\r\n\r\n        // 交点在射线起点的左侧\r\n        let xSeg = end.x - (end.x - start.x) / (end.y - start.y) * (end.y - point.y);\r\n        if (xSeg < point.x) {\r\n            return false\r\n        }\r\n\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * 判断点是否在多边形内\r\n     * 射线法，从点做一条水平向右的射线，交点为奇数在多边形内，否则在多边形外\r\n     * @param point \r\n     * @param polygonVertexes \r\n     */\r\n    public static isPointInPolygon(point: cc.Vec2, polygonVertexes: cc.Vec2[]): boolean {\r\n        let intersectionCount = 0;\r\n        for (let i = 0; i < polygonVertexes.length; i++) {\r\n            let vertex = polygonVertexes[i];\r\n            let nextVertex = polygonVertexes[(i + 1) % polygonVertexes.length];\r\n            if (this.isHorizontalRayIntersectsSegment(point, vertex, nextVertex)) {\r\n                intersectionCount += 1\r\n            }\r\n        }\r\n        return intersectionCount % 2 == 1\r\n    }\r\n\r\n    public static getScaleFromViewSize(viewSize: cc.Size, designSize: cc.Size, minSacle: number = 0, maxScal: number = 1): number {\r\n        let scale = Math.min(viewSize.width / designSize.width,\r\n            viewSize.height / designSize.height)\r\n        scale = GameMath.clamp(scale, minSacle, maxScal);\r\n        return scale;\r\n    }\r\n\r\n    public static clamp(value: number, min: number, max: number): number {\r\n        let minValue = Math.min(min, max);\r\n        let maxValue = Math.max(min, max);\r\n        return Math.max(Math.min(value, maxValue), minValue);\r\n    }\r\n}\r\n","export default class Heap<T>  {\n    private m_elements:T[] = [];\n    private compareFunc:(a: T, b: T) => boolean = null;\n    private equalsFunc:(a: T, b: T) => boolean = null;\n    \n    constructor(compareFunc:(a: T, b: T) => boolean, equalsFunc:(a: T, b: T) => boolean){\n        this.compareFunc = compareFunc;\n        this.equalsFunc = equalsFunc;\n    }\n\n    public getElements():T[]{\n        return this.m_elements\n    }\n\n    public isEmpty():boolean{\n        return this.m_elements.length <= 0;\n    }\n\n    public length():number{\n        return this.m_elements.length;\n    }\n\n    public peek():T{\n        return this.m_elements[0];\n    }\n\n    public leftChildIndexFromIndex(index:number):number{\n        return index * 2 + 1\n    }\n\n    public rightChildIndexFromIndex(index:number):number{\n        return index * 2 + 2\n    }\n\n    public parentIndexFormIndex(index:number):number{\n        return Math.floor((index - 1) / 2); \n    }\n\n    public indexOf(element:T):number{\n        return this._indexOf(element,0);\n    }\n\n    public push(element:T):void{\n        this.m_elements.push(element);\n        this.shiftUpFromIndex(this.length() - 1);\n    }\n\n    public pop():T{\n        if (!this.isEmpty()) {\n            let temp = this.m_elements[0];\n            this.m_elements[0] = this.m_elements[this.length() - 1];\n            this.m_elements[this.length() - 1] = temp;\n            let result = this.m_elements.pop();\n            this.shiftDownFormIndex(0);\n            return result;\n        }\n        return null\n    }\n\n    public removeAtIndex(index:number):T{\n        if (index < this.length()){\n            let temp = this.m_elements[index];\n            this.m_elements[index] = this.m_elements[this.length() - 1];\n            this.m_elements[this.length() - 1] = temp;\n            let removeElement = this.m_elements.pop();\n            this.shiftDownFormIndex(index);\n            this.shiftUpFromIndex(index);\n            return removeElement;\n        }\n        return null;\n    }\n\n//     func setValue(of element:Element, at index:Int) {\n//         guard index < self.count - 1 else {\n//             return\n//         }\n        \n        \n//         let oldValue = self.m_elements[index]\n//         self.m_elements[index] = element\n//         print(self)\n//         if self.compareFunc(oldValue, element) {\n//             self.shiftDown(from: index)\n//         }else{\n//             self.shiftUp(from: index)\n//         }\n//         print(self)\n//     }\n\n    private _indexOf(element:T, fromIndex:number):number{\n        if (fromIndex >= this.length()) {\n            return -1;\n        }\n\n        if (this.compareFunc(element, this.m_elements[fromIndex])) {\n            return - 1;\n        }\n        \n        if (this.equalsFunc(element, this.m_elements[fromIndex])){\n            return fromIndex;\n        }\n        \n        let leftSearchIndex = this._indexOf(element, this.leftChildIndexFromIndex(fromIndex))\n        if (leftSearchIndex != -1) {\n            return leftSearchIndex\n        }\n\n        let rightSearchIndex = this._indexOf(element, this.rightChildIndexFromIndex(fromIndex))\n        if (rightSearchIndex != -1) {\n            return rightSearchIndex\n        }\n        return -1;\n    }\n\n    private shiftUpFromIndex(index:number){\n        let parentIndex = this.parentIndexFormIndex(index);\n        if (parentIndex >= 0 && this.compareFunc(this.m_elements[index], this.m_elements[parentIndex])) {\n            let temp = this.m_elements[index];\n            this.m_elements[index] = this.m_elements[parentIndex];\n            this.m_elements[parentIndex] = temp;\n            this.shiftUpFromIndex(parentIndex);\n        }\n    }\n\n    private shiftDownFormIndex(index:number){\n        let candidate = index;\n        let leftChildIndex = this.leftChildIndexFromIndex(index);\n        if (leftChildIndex < this.length() && this.compareFunc(this.m_elements[leftChildIndex], this.m_elements[candidate])) {\n            candidate = leftChildIndex\n        }\n\n        let rightChildIndex = this.rightChildIndexFromIndex(index);\n        if (rightChildIndex < this.length() && this.compareFunc(this.m_elements[rightChildIndex], this.m_elements[candidate])) {\n            candidate = rightChildIndex\n        }\n\n        if (candidate == index) {\n            return\n        }\n        let temp = this.m_elements[index];\n        this.m_elements[index] = this.m_elements[candidate];\n        this.m_elements[candidate] = temp;\n        this.shiftDownFormIndex(candidate);\n    }\n\n}","import IHttpDelegate from \"./IHttpDelegate\";\r\n\r\nexport enum HttpWrapperState {\r\n    None = 0,\r\n    CONNECTING = 1,\r\n    OPEN,\r\n    CLOSING,\r\n    CLOSED\r\n}\r\n\r\nexport enum HttpMethod {\r\n    GET = \"GET\",\r\n    HEAD = \"HEAD\",\r\n    POST = \"POST\",\r\n    PUT = \"PUT\",\r\n    DELETE = \"DELETE\",\r\n    CONNECT = \"CONNECT\",\r\n    OPTIONS = \"OPTIONS\",\r\n    TRACE = \"TRACE\",\r\n}\r\n\r\nexport default abstract class HttpWrapperBase {\r\n\r\n    private _url: string = \"\";\r\n    public getUrl(): string {\r\n        return this._url;\r\n    }\r\n    protected setUrl(url: string) {\r\n        this._url = url;\r\n    }\r\n\r\n    private _state: HttpWrapperState = HttpWrapperState.None;\r\n    public getState(): HttpWrapperState {\r\n        return this._state;\r\n    }\r\n    public setState(state: HttpWrapperState) {\r\n        this._state = state;\r\n    }\r\n\r\n    private _delegate: IHttpDelegate = null;\r\n    public getDelegate(): IHttpDelegate {\r\n        return this._delegate;\r\n    }\r\n    protected setDelegate(delegate: IHttpDelegate) {\r\n        this._delegate = delegate;\r\n    }\r\n\r\n    protected onHttpReadyStateChange(data: any) {\r\n        this._delegate && this._delegate.onHttpReadyStateChange(data);\r\n    }\r\n\r\n    protected onHttpLoad(data: any) {\r\n        this._delegate && this._delegate.onHttpLoad(data);\r\n    }\r\n\r\n    protected onHttpLoadStart(data: any) {\r\n        this._delegate && this._delegate.onHttpLoadStart(data);\r\n    }\r\n\r\n    protected onHttpProgress(data: any) {\r\n        this._delegate && this._delegate.onHttpProgress(data);\r\n    }\r\n\r\n    protected onHttpLoadEnd(data: any) {\r\n        this._delegate && this._delegate.onHttpLoadEnd(data);\r\n    }\r\n\r\n    protected onHttpAbort(data: any) {\r\n        this._delegate && this._delegate.onHttpAbort(data);\r\n    }\r\n\r\n    protected onHttpError(data: any) {\r\n        this._delegate && this._delegate.onHttpError(data);\r\n    }\r\n\r\n    protected onHttpTimeOut(data): any {\r\n        this._delegate && this._delegate.onHttpTimeOut(data);\r\n    }\r\n\r\n    protected initBase(url: string, delegate?: IHttpDelegate) {\r\n        this.setUrl(url);\r\n        this.setDelegate(delegate);\r\n    }\r\n\r\n    public abstract connect();\r\n    public abstract send(data: any);\r\n    public abstract close();\r\n}","import HttpWrapperBase, { HttpMethod, HttpWrapperState } from \"../Base/HttpWrapperBase\";\r\nimport IHttpDelegate from \"../Base/IHttpDelegate\";\r\n\r\n\r\nexport default class HttpWrapperWeb extends HttpWrapperBase {\r\n\r\n    public static create(url: string, delegate?: IHttpDelegate): HttpWrapperWeb {\r\n        let instance = new HttpWrapperWeb();\r\n        instance.init(url, delegate);\r\n        return instance;\r\n    }\r\n\r\n    private _request: XMLHttpRequest = null;\r\n    protected init(url: string, delegate: IHttpDelegate) {\r\n        super.initBase(url, delegate);\r\n    }\r\n\r\n\r\n    public connect() {\r\n        this.setState(HttpWrapperState.OPEN);\r\n        this._request = new XMLHttpRequest();\r\n        this._request.timeout = 3000;\r\n        this._request.responseType = \"text\";\r\n        // this._request.withCredentials = true;\r\n\r\n        this._request.onreadystatechange = this.onReadyStateChange.bind(this);\r\n        this._request.onload = this.onLoad.bind(this);\r\n        this._request.onloadstart = this.onLoadStart.bind(this);\r\n        this._request.onprogress = this.onProgress.bind(this);\r\n        this._request.onloadend = this.onLoadEnd.bind(this);\r\n        this._request.onabort = this.onAbort.bind(this);\r\n        this._request.onerror = this.onError.bind(this);\r\n        this._request.ontimeout = this.onHttpTimeOut.bind(this);\r\n        this._request.open(HttpMethod.POST, this.getUrl());\r\n    }\r\n\r\n    public send(data: any) {\r\n        if (this.getState() == HttpWrapperState.OPEN) {\r\n            this._request.send(data);\r\n        }\r\n    }\r\n\r\n    public close() {\r\n        if (this._request) {\r\n            this.setState(HttpWrapperState.CLOSING);\r\n            this._request.abort();\r\n        }\r\n    }\r\n\r\n    protected onReadyStateChange(data: any) {\r\n        this.onHttpReadyStateChange(data);\r\n    }\r\n\r\n    protected onLoad(data: any) {\r\n        this.onHttpLoad(data);\r\n    }\r\n\r\n    protected onLoadStart(data: any) {\r\n        this.onHttpLoadStart(data);\r\n    }\r\n\r\n    protected onProgress(data: any) {\r\n        this.onHttpProgress(data);\r\n    }\r\n\r\n    protected onLoadEnd(data: any) {\r\n        this.onHttpLoadEnd(data);\r\n    }\r\n\r\n    protected onAbort(data: any) {\r\n        this.onHttpAbort(data);\r\n    }\r\n\r\n    protected onError(data: any) {\r\n        this.onHttpError(data);\r\n    }\r\n\r\n    protected onTimeOut(data): any {\r\n        this.onHttpTimeOut(data);\r\n    }\r\n\r\n\r\n}\r\n","import SceneDirector from \"../SceneDirector/SceneDirector\";\r\nimport SceneBase from \"../SceneDirector/SceneBase\";\r\nimport LayerBase from \"../LayerDirector/LayerBase\";\r\nimport LayerDirectorError from \"../LayerDirector/LayerDirectorError\";\r\nimport PreloadBundleInfo from \"../SceneDirector/PreloadAssetInfo\";\r\nimport SceneEnterParamBase from \"../SceneDirector/SceneEnterParamBase\";\r\nimport SceneDirectorError from \"../SceneDirector/SceneDirectorError\";\r\nimport LayerEnterParamBase from \"../LayerDirector/LayerEnterParamBase\";\r\n\r\n\r\n\r\nexport default class IGame {\r\n\r\n    private static _instance: IGame = null;\r\n    public static getInstance(): IGame {\r\n        if (this._instance == null) {\r\n            this._instance = new IGame();\r\n        }\r\n        return this._instance;\r\n    }\r\n\r\n    private _sceneDirector: SceneDirector = null;\r\n    private constructor() {\r\n        this._sceneDirector = SceneDirector.getInstance();\r\n    }\r\n\r\n    public replaceSceneWithPreloadInfo(info: PreloadBundleInfo, sceneName: string, param?: SceneEnterParamBase, complete?: (error: SceneDirectorError, scene: SceneBase) => void) {\r\n        this._sceneDirector.replaceSceneWithInfo(info, sceneName, param, complete);\r\n    }\r\n\r\n    public replaceSceneWithSwitchScene(info: PreloadBundleInfo,\r\n        sceneName: string,\r\n        param?: SceneEnterParamBase,\r\n        complete?: (error: SceneDirectorError, scene: SceneBase) => void) {\r\n        this._sceneDirector.replaceSceneWithSwitchScene(info, sceneName, param, complete);\r\n    }\r\n\r\n    public getCurrentScene(): SceneBase {\r\n        return this._sceneDirector.getCurrentScene();\r\n    }\r\n\r\n    public getLayerWoithID(identifier: string): LayerBase {\r\n        let scene = this.getCurrentScene();\r\n        if (scene) {\r\n            return scene.getLayerWithID(identifier);\r\n        }\r\n        return null;\r\n    }\r\n\r\n    public addLayer(layer: LayerBase, param?: LayerEnterParamBase, completeCallback?: (error: LayerDirectorError, layer: LayerBase) => void): LayerBase {\r\n        let scene = this.getCurrentScene();\r\n        if (scene) {\r\n            return scene.addLayer(layer, param, completeCallback);\r\n        } else {\r\n            completeCallback && completeCallback(LayerDirectorError.NO_CURRENT_SCENE, null);\r\n            return null;\r\n        }\r\n    }\r\n\r\n    public addLayerWithPrefab(bundleName: string, prefabs: string, identifier: string, param?: LayerEnterParamBase, completeCallback?: (error: LayerDirectorError, layer: LayerBase) => void) {\r\n        let scene = this.getCurrentScene();\r\n        if (scene) {\r\n            scene.addLayerWithPrefab(bundleName, prefabs, identifier, param, (error: LayerDirectorError, layer: LayerBase) => {\r\n                completeCallback && completeCallback(error, layer);\r\n            });\r\n        } else {\r\n            completeCallback && completeCallback(LayerDirectorError.NO_CURRENT_SCENE, null);\r\n        }\r\n    }\r\n\r\n    public removeLayerWithID(identifier: string): LayerBase {\r\n        let scene = this.getCurrentScene();\r\n        if (scene) {\r\n            return scene.removeLayerWithID(identifier);\r\n        }\r\n        return null;\r\n    }\r\n}\r\n","import SceneBase from \"./SceneBase\";\r\n\r\n\r\nconst { ccclass, property } = cc._decorator;\r\n\r\n@ccclass\r\nexport default abstract class LaunchScene extends SceneBase {\r\n\r\n    private _hasEntered: boolean = false;\r\n\r\n    onEnable() {\r\n        super.onEnable();\r\n        if (!this._hasEntered) {\r\n            this._hasEntered = true;\r\n            this.enterScene(null);\r\n        }\r\n    }\r\n}\r\n","import DefaultConfig from \"../DefaultConfigs/DefaultConfig\";\r\nimport Debuger from \"../Utils/Debuger\";\r\nimport ILayerRoot from \"./ILayerRoot\";\r\nimport LayerEnterParamBase from \"./LayerEnterParamBase\";\r\n\r\nconst { ccclass, property } = cc._decorator;\r\n@ccclass\r\nexport default abstract class LayerBase extends cc.Component {\r\n\r\n    private _layerRoot: ILayerRoot = null\r\n    public getLayerRoot(): ILayerRoot {\r\n        return this._layerRoot;\r\n    }\r\n\r\n    public setLayerRoot(root: ILayerRoot): void {\r\n        this._layerRoot = root;\r\n    }\r\n\r\n    public getLayerZOrder(): number {\r\n        return DefaultConfig.ZORDER_UI_LAYER_DEFAULT;\r\n    }\r\n\r\n    onLoad() {\r\n        Debuger.log(Debuger.FILTER_TAG01, this.getLayerName() + \".onLayerLoad\");\r\n        this.onLayerLoad();\r\n    }\r\n\r\n    onEnable() {\r\n        Debuger.log(Debuger.FILTER_TAG01, this.getLayerName() + \".onLayerEnable\");\r\n        this.onLayerEnable();\r\n    }\r\n\r\n    enterLayer(param: LayerEnterParamBase) {\r\n        Debuger.log(Debuger.FILTER_TAG01, this.getLayerName() + \".onLayerEnter\");\r\n        this.onLayerEnter(param)\r\n    }\r\n\r\n    start() {\r\n        Debuger.log(Debuger.FILTER_TAG01, this.getLayerName() + \".onLayerStart\");\r\n        this.onLayerStart();\r\n    }\r\n\r\n    update(dt: number) {\r\n        // Debuger.log(Debuger.FILTER_TAG01, this.getLayerName() + \".onLayerUpdate:\", dt);\r\n        this.onLayerUpdate(dt);\r\n    }\r\n\r\n    exitLayer() {\r\n        Debuger.log(Debuger.FILTER_TAG01, this.getLayerName() + \".onLayerExit\");\r\n        this.onLayerExit();\r\n        this.node.destroy();\r\n    }\r\n\r\n    onDisable() {\r\n        Debuger.log(Debuger.FILTER_TAG01, this.getLayerName() + \".onLayerDisable\");\r\n        this.onLayerDisable();\r\n    }\r\n\r\n    onDestroy() {\r\n        Debuger.log(Debuger.FILTER_TAG01, this.getLayerName() + \".onLayerDestroy\");\r\n        this.onLayerDestroy()\r\n    }\r\n\r\n    close() {\r\n        this.getLayerRoot().removeLayerWithID(this.getLayerName());\r\n    }\r\n\r\n    public abstract getLayerName(): string;\r\n    public abstract onLayerLoad(): void\r\n    public abstract onLayerEnable(): void\r\n    public abstract onLayerEnter(param: LayerEnterParamBase): void\r\n    public abstract onLayerStart(): void\r\n    public abstract onLayerUpdate(dt: number): void\r\n    public abstract onLayerExit(): void\r\n    public abstract onLayerDisable(): void\r\n    public abstract onLayerDestroy(): void\r\n}\r\n","\r\nexport enum LayerDirectorErrorCode {\r\n    None,\r\n    NoLayerBaseComponent,\r\n    Pending,\r\n    ResourceFailed,\r\n    NoCurrentScene,\r\n    DirectorDestroyed,\r\n}\r\n\r\nexport default class LayerDirectorError {\r\n    public readonly errorCode: LayerDirectorErrorCode = LayerDirectorErrorCode.None;\r\n    private constructor(errorCode: LayerDirectorErrorCode) {\r\n\r\n    }\r\n    public static create(errorCode: LayerDirectorErrorCode): LayerDirectorError {\r\n        let instance = new LayerDirectorError(errorCode)\r\n        return instance;\r\n    }\r\n    public static readonly SUCCEED = new LayerDirectorError(LayerDirectorErrorCode.None);\r\n    public static readonly NO_LAYER_BASE_COMPONENT = new LayerDirectorError(LayerDirectorErrorCode.NoLayerBaseComponent);\r\n    public static readonly PENDING = new LayerDirectorError(LayerDirectorErrorCode.Pending);\r\n    public static readonly REOURCE_FAILED = new LayerDirectorError(LayerDirectorErrorCode.ResourceFailed);\r\n    public static readonly NO_CURRENT_SCENE = new LayerDirectorError(LayerDirectorErrorCode.NoCurrentScene);\r\n    public static readonly DIRECTOR_DESTROYED = new LayerDirectorError(LayerDirectorErrorCode.DirectorDestroyed);\r\n}\r\n","import LayerBase from \"./LayerBase\";\r\nimport LayerLoader, { LayerLoaderDelegate, LayerLoaderState } from \"./LayerLoader\";\r\nimport LayerDirectorError from \"./LayerDirectorError\";\r\nimport Debuger from \"../Utils/Debuger\";\r\nimport LayerEnterParamBase from \"./LayerEnterParamBase\";\r\nimport ILayerRoot from \"./ILayerRoot\";\r\n\r\nexport class LayerInfo {\r\n    identifier: string = \"\";\r\n    layer: LayerBase = null;\r\n    refrenceCount: number = 0;\r\n\r\n    public static create(identifier: string): LayerInfo {\r\n        let instance = new LayerInfo();\r\n        instance.identifier = identifier;\r\n        return instance;\r\n    }\r\n\r\n    private constructor() {\r\n\r\n    }\r\n}\r\n\r\nexport default class LayerDirector implements LayerLoaderDelegate {\r\n\r\n    private _layerLoaders: LayerLoader[] = [];\r\n    private _layerInfos: Object = {};\r\n    private _layerRoot: ILayerRoot = null;\r\n    private _isDestroyed: boolean = false\r\n    public constructor(layerRoot: ILayerRoot) {\r\n        this._layerRoot = layerRoot;\r\n        this._isDestroyed = false;\r\n    }\r\n\r\n    private getLayerLoaderWithID(identifier): LayerLoader {\r\n        if (this._isDestroyed) {\r\n            return null;\r\n        }\r\n        let layerLoader: LayerLoader = null;\r\n        for (let loader of this._layerLoaders) {\r\n            if (loader.identifier == identifier) {\r\n                layerLoader = loader;\r\n                break;\r\n            }\r\n        }\r\n        return layerLoader;\r\n    }\r\n\r\n    private getLayerInfoWithID(identifier: string): LayerInfo {\r\n        if (this._isDestroyed) {\r\n            return null;\r\n        }\r\n        let layerInfo: LayerInfo = this._layerInfos[identifier];\r\n        if (layerInfo == null) {\r\n            layerInfo = LayerInfo.create(identifier);\r\n            this._layerInfos[identifier] = layerInfo;\r\n        }\r\n        return layerInfo;\r\n    }\r\n\r\n    public getLayerWithID(identifier: string): LayerBase {\r\n        if (this._isDestroyed) {\r\n            return null;\r\n        }\r\n        let layerInfo: LayerInfo = this._layerInfos[identifier];\r\n        if (layerInfo) {\r\n            return layerInfo.layer\r\n        }\r\n        return null;\r\n    }\r\n\r\n    private addLayerToRoot(layer: LayerBase, identifier: string, param?: LayerEnterParamBase): LayerBase {\r\n        if (this._isDestroyed) {\r\n            return null;\r\n        }\r\n        let resultLayer = this.getLayerWithID(identifier);\r\n        if (resultLayer == null) {\r\n            let layerInfo = this.getLayerInfoWithID(identifier);\r\n            if (layerInfo.refrenceCount > 0) {\r\n                if (this._layerRoot) {\r\n                    layerInfo.layer = layer;\r\n                    layer.node.setPosition(0, 0);\r\n                    this._layerRoot.addLayerToRoot(layer, layer.getLayerZOrder());\r\n                    layer.setLayerRoot(this._layerRoot);\r\n                    layer.enterLayer(param);\r\n                    resultLayer = layer;\r\n                } else {\r\n                    this.removeLayerWithID(identifier);\r\n                }\r\n            }\r\n        }\r\n        return resultLayer;\r\n    }\r\n\r\n    public removeLayerWithID(identifier: string): LayerBase {\r\n        if (this._isDestroyed) {\r\n            return null;\r\n        }\r\n        let layer: LayerBase = null;\r\n        let layerInfo = this.getLayerInfoWithID(identifier);\r\n        layerInfo.refrenceCount -= 1;\r\n        if (layerInfo.refrenceCount <= 0) {\r\n            if (layerInfo.layer) {\r\n                layer = layerInfo.layer;\r\n                layer.exitLayer();\r\n            }\r\n            delete this._layerInfos[identifier];\r\n        }\r\n        return layer;\r\n    }\r\n\r\n    public addLayer(layer: LayerBase,\r\n        param?: LayerEnterParamBase,\r\n        completeCallback?: (error: LayerDirectorError, layer: LayerBase) => void): LayerBase {\r\n        if (this._isDestroyed) {\r\n            completeCallback && completeCallback(LayerDirectorError.DIRECTOR_DESTROYED, null)\r\n            return null;\r\n        }\r\n\r\n        let identifier = layer.getLayerName();\r\n        let layerInfo = this.getLayerInfoWithID(identifier);\r\n        layerInfo.refrenceCount += 1;\r\n        let resultLayer = this.addLayerToRoot(layer, identifier, param);\r\n        completeCallback && completeCallback(LayerDirectorError.SUCCEED, resultLayer);\r\n        return resultLayer;\r\n    }\r\n\r\n    private addLayerWithLoader(loader: LayerLoader) {\r\n        if (this._isDestroyed) {\r\n            return;\r\n        }\r\n        if (loader.state != LayerLoaderState.LoadSucceed) {\r\n            return;\r\n        }\r\n\r\n        let node = cc.instantiate(loader.resource);\r\n        let layerBase = node.getComponent(LayerBase);\r\n        if (layerBase) {\r\n            let layer = this.addLayerToRoot(layerBase, loader.identifier, loader.enterParam);\r\n            loader.completeCallback && loader.completeCallback(LayerDirectorError.SUCCEED, layer);\r\n            loader.completeCallback = null;\r\n        } else {\r\n            Debuger.error(Debuger.FILTER_TAG01, \"Not find LayerBase Component in\", loader.getPrefabPath())\r\n            this.removeLayerWithID(loader.identifier);\r\n            loader.completeCallback && loader.completeCallback(LayerDirectorError.NO_LAYER_BASE_COMPONENT, null);\r\n            loader.completeCallback = null;\r\n        }\r\n        loader.state = LayerLoaderState.Finished;\r\n    }\r\n\r\n    public addLayerWithPrefab(bundleName: string, prefabPath: string,\r\n        identifier: string,\r\n        enterParam?: LayerEnterParamBase,\r\n        completeCallback?: (error: LayerDirectorError, layer: LayerBase) => void) {\r\n        if (this._isDestroyed) {\r\n            completeCallback && completeCallback(LayerDirectorError.DIRECTOR_DESTROYED, null)\r\n            return;\r\n        }\r\n\r\n        let layerInfo = this.getLayerInfoWithID(identifier);\r\n        layerInfo.refrenceCount += 1;\r\n        let layerLoader: LayerLoader = this.getLayerLoaderWithID(identifier);\r\n        if (layerLoader) {\r\n            completeCallback && completeCallback(LayerDirectorError.PENDING, null);\r\n        } else {\r\n            layerLoader = LayerLoader.create(this, bundleName, prefabPath, identifier, enterParam, completeCallback);\r\n            this._layerLoaders.push(layerLoader);\r\n            layerLoader.startLoad();\r\n        }\r\n    }\r\n\r\n    public onResourceLoadSucceed(loader: LayerLoader) {\r\n        if (this._isDestroyed) {\r\n            return;\r\n        }\r\n\r\n        for (let i = 0; i < this._layerLoaders.length; i++) {\r\n            let loader = this._layerLoaders[i];\r\n            this.addLayerWithLoader(loader);\r\n            if (loader.state != LayerLoaderState.Finished) {\r\n                break;\r\n            }\r\n        }\r\n\r\n        for (var i = this._layerLoaders.length - 1; i >= 0; i--) {\r\n            let loader = this._layerLoaders[i];\r\n            if (loader.state == LayerLoaderState.Finished) {\r\n                this._layerLoaders.splice(i, 1);\r\n            }\r\n        }\r\n    }\r\n\r\n    public onResourceLoadFailed(loader: LayerLoader) {\r\n        if (this._isDestroyed) {\r\n            loader.completeCallback && loader.completeCallback(LayerDirectorError.DIRECTOR_DESTROYED, null);\r\n            return;\r\n        }\r\n        this.removeLayerWithID(loader.identifier);\r\n        let index = this._layerLoaders.indexOf(loader);\r\n        if (index != -1) {\r\n            this._layerLoaders.splice(index, 1);\r\n        }\r\n        loader.completeCallback && loader.completeCallback(LayerDirectorError.REOURCE_FAILED, null);\r\n    }\r\n\r\n    public destroy() {\r\n        if (this._isDestroyed) {\r\n            return;\r\n        }\r\n        let keys = Object.keys(this._layerInfos);\r\n        for (let i = 0; i < keys.length; i++) {\r\n            let key = keys[i];\r\n            this.removeLayerWithID(key)\r\n        }\r\n        this._layerRoot = null;\r\n        this._isDestroyed = true;\r\n    }\r\n}\r\n","// Learn TypeScript:\r\n//  - https://docs.cocos.com/creator/manual/en/scripting/typescript.html\r\n// Learn Attribute:\r\n//  - https://docs.cocos.com/creator/manual/en/scripting/reference/attributes.html\r\n// Learn life-cycle callbacks:\r\n//  - https://docs.cocos.com/creator/manual/en/scripting/life-cycle-callbacks.html\r\n\r\nexport default class LayerEnterParamBase {\r\n\r\n}","import LayerBase from \"./LayerBase\";\r\nimport LayerDirectorError from \"./LayerDirectorError\";\r\nimport AssetCache from \"../AssetCache/AssetCache\";\r\nimport LayerEnterParamBase from \"./LayerEnterParamBase\";\r\n\r\n\r\nexport interface LayerLoaderDelegate {\r\n    onResourceLoadSucceed(loader: LayerLoader, resource: cc.Prefab);\r\n    onResourceLoadFailed(loader: LayerLoader);\r\n}\r\n\r\nexport enum LayerLoaderState {\r\n    None,\r\n    Loading,\r\n    LoadSucceed,\r\n    LoadFailed,\r\n    Finished,\r\n}\r\n\r\nexport default class LayerLoader {\r\n    private readonly bundleName: string = \"\";\r\n    private readonly prefabPath: string = \"\";\r\n    public getPrefabPath(): string {\r\n        return this.prefabPath;\r\n    }\r\n    private readonly delegate: LayerLoaderDelegate = null;\r\n\r\n    public readonly identifier: string = \"\";\r\n    public readonly enterParam: LayerEnterParamBase = null;\r\n\r\n    public resource: cc.Prefab = null;\r\n    public state: LayerLoaderState = LayerLoaderState.None;\r\n    public retryTimes: number = 0;\r\n    public completeCallback?: (error: LayerDirectorError, layer: LayerBase) => void = null;\r\n\r\n    public static create(delegate: LayerLoaderDelegate,\r\n        bundleName: string,\r\n        path: string,\r\n        identifier: string,\r\n        enterParam: LayerEnterParamBase,\r\n        completeCallback?: (error: LayerDirectorError, layer: LayerBase) => void): LayerLoader {\r\n\r\n        let loader = new LayerLoader(delegate, bundleName, path, identifier, enterParam, completeCallback);\r\n        return loader;\r\n    }\r\n    private constructor(delegate: LayerLoaderDelegate,\r\n        bundleName: string,\r\n        path: string,\r\n        identifier: string,\r\n        enterParam: LayerEnterParamBase,\r\n        completeCallback?: (error: LayerDirectorError, layer: LayerBase) => void) {\r\n\r\n        this.delegate = delegate;\r\n        this.bundleName = bundleName;\r\n        this.prefabPath = path;\r\n        this.identifier = identifier;\r\n        this.enterParam = enterParam;\r\n        this.completeCallback = completeCallback;\r\n    }\r\n\r\n    private onPrefabLoaded(error: Error, resource: cc.Prefab) {\r\n        if (error == null) {\r\n            this.state = LayerLoaderState.LoadSucceed;\r\n            this.resource = resource;\r\n            this.delegate && this.delegate.onResourceLoadSucceed(this, resource);\r\n        } else {\r\n            if (this.retryTimes < 2) {\r\n                this.retryTimes += 1;\r\n                this.getAsset();\r\n            } else {\r\n                this.state = LayerLoaderState.LoadFailed;\r\n                this.delegate && this.delegate.onResourceLoadFailed(this);\r\n            }\r\n        }\r\n    }\r\n\r\n    public startLoad() {\r\n        if (this.state == LayerLoaderState.Loading) {\r\n            return;\r\n        }\r\n        this.getAsset();\r\n    }\r\n\r\n    private getAsset() {\r\n        this.state = LayerLoaderState.Loading;\r\n        AssetCache.getInstance().getAsset(this.bundleName, this.prefabPath, cc.Prefab, null, this.onPrefabLoaded.bind(this));\r\n    }\r\n}\r\n","import { AssetBundleID, SceneName } from \"../scripts/Defines/Defines\";\r\nimport IGame from \"../scripts/Frameworks/IGame/IGame\";\r\nimport LaunchScene from \"../scripts/Frameworks/SceneDirector/LaunchScene\";\r\nimport PreloadBundleInfo from \"../scripts/Frameworks/SceneDirector/PreloadAssetInfo\";\r\nimport SceneEnterParamBase from \"../scripts/Frameworks/SceneDirector/SceneEnterParamBase\";\r\n\r\n\r\n\r\nconst { ccclass, property } = cc._decorator;\r\n\r\n@ccclass\r\nexport default class LoadingScene extends LaunchScene {\r\n\r\n    public getSceneName(): string {\r\n        return SceneName.LoadingScene;\r\n    }\r\n\r\n    public onSceneLoad(): void {\r\n\r\n    }\r\n\r\n    public onSceneEnable(): void {\r\n\r\n    }\r\n\r\n    onSceneEnter(param: SceneEnterParamBase) {\r\n        let preloadInfo = PreloadBundleInfo.create();\r\n        preloadInfo.enterBundles[AssetBundleID.Common] = [];\r\n        preloadInfo.enterBundles[AssetBundleID.MainScene] = [];\r\n        IGame.getInstance().replaceSceneWithSwitchScene(preloadInfo, SceneName.MainScene);\r\n    }\r\n\r\n    public onSceneStart(): void {\r\n\r\n    }\r\n    public onSceneUpdate(dt: number): void {\r\n\r\n    }\r\n    public onSceneDisable(): void {\r\n\r\n    }\r\n    public onSceneExit(): void {\r\n\r\n    }\r\n    public onSceneDestroy(): void {\r\n\r\n    }\r\n\r\n\r\n}\r\n","\nexport default class Message  {\n    public info:Object = null;\n}\n","// Learn TypeScript:\r\n//  - [Chinese] https://docs.cocos.com/creator/manual/zh/scripting/typescript.html\r\n//  - [English] http://www.cocos2d-x.org/docs/creator/manual/en/scripting/typescript.html\r\n// Learn Attribute:\r\n//  - [Chinese] https://docs.cocos.com/creator/manual/zh/scripting/reference/attributes.html\r\n//  - [English] http://www.cocos2d-x.org/docs/creator/manual/en/scripting/reference/attributes.html\r\n// Learn life-cycle callbacks:\r\n//  - [Chinese] https://docs.cocos.com/creator/manual/zh/scripting/life-cycle-callbacks.html\r\n//  - [English] http://www.cocos2d-x.org/docs/creator/manual/en/scripting/life-cycle-callbacks.html\r\n\r\nconst { ccclass, property } = cc._decorator;\r\n\r\n@ccclass\r\nexport default class PageViewCell extends cc.Component {\r\n\r\n    public static InvalidIndex: number = -1\r\n\r\n    private _index: number = 0;\r\n    public getIndex(): number {\r\n        return this._index;\r\n    }\r\n    public setIndex(index: number): void {\r\n        this._index = index;\r\n    }\r\n\r\n    public reset() {\r\n        this._index = PageViewCell.InvalidIndex;\r\n    }\r\n\r\n\r\n}\r\n","import PageViewCell from './PageViewCell';\r\nimport PageViewDataSource from './PageViewDataSource';\r\nimport PageViewDelegate from './PageViewDelegate';\r\n\r\n\r\n// Learn TypeScript:\r\n//  - [Chinese] https://docs.cocos.com/creator/manual/zh/scripting/typescript.html\r\n//  - [English] http://www.cocos2d-x.org/docs/creator/manual/en/scripting/typescript.html\r\n// Learn Attribute:\r\n//  - [Chinese] https://docs.cocos.com/creator/manual/zh/scripting/reference/attributes.html\r\n//  - [English] http://www.cocos2d-x.org/docs/creator/manual/en/scripting/reference/attributes.html\r\n// Learn life-cycle callbacks:\r\n//  - [Chinese] https://docs.cocos.com/creator/manual/zh/scripting/life-cycle-callbacks.html\r\n//  - [English] http://www.cocos2d-x.org/docs/creator/manual/en/scripting/life-cycle-callbacks.html\r\n\r\n\r\n\r\n\r\nconst { ccclass, property } = cc._decorator;\r\n\r\n@ccclass\r\nexport default class PageView extends cc.Component {\r\n\r\n    @property(cc.PageView)\r\n    pageView: cc.PageView = null;\r\n\r\n    private _usedCells: PageViewCell[] = [];\r\n\r\n\r\n    private _delegate: PageViewDelegate = null;\r\n    public getDelegate(): PageViewDelegate {\r\n        return this._delegate;\r\n    }\r\n    public setDelegate(delegate: PageViewDelegate): void {\r\n        this._delegate = delegate;\r\n    }\r\n\r\n    private _dataSource: PageViewDataSource = null;\r\n    public getDataSource(): PageViewDataSource {\r\n        return this._dataSource;\r\n    }\r\n    public setDataSource(dataSource: PageViewDataSource): void {\r\n        this._dataSource = dataSource;\r\n    }\r\n\r\n    onLoad() {\r\n        this.pageView.node.on(\"page-turning\", this.onPageTurning, this);\r\n        this.pageView.node.on(\"scrolling\", this.onScrolling, this);\r\n    }\r\n\r\n    onDestroy() {\r\n        this._delegate = null;\r\n        this._dataSource = null;\r\n    }\r\n\r\n    private setIndexForCell(index: number, cell: PageViewCell) {\r\n        cell.setIndex(index);\r\n    }\r\n\r\n    private addCell(cell: PageViewCell) {\r\n        this.pageView.addPage(cell.node);\r\n        this._usedCells.splice(cell.getIndex(), 0, cell)\r\n    }\r\n\r\n    private removeCell(cell: PageViewCell) {\r\n        let index = this._usedCells.indexOf(cell);\r\n        if (index != -1) {\r\n            this._usedCells.splice(index, 1);\r\n        }\r\n        this.pageView.removePage(cell.node);\r\n        cell.node.destroy();\r\n    }\r\n\r\n    // update (dt) {}\r\n    private onPageTurning(event: cc.Event) {\r\n        let index = this.pageView.getCurrentPageIndex();\r\n        this._delegate && this._delegate.onRolePageTurning(this, index);\r\n    }\r\n\r\n    private onScrolling(event: cc.Event) {\r\n        this._delegate && this._delegate.onRolePageScrolling(this);\r\n    }\r\n\r\n    public getCellAtIndex(index: number): PageViewCell {\r\n        for (let i = 0; i < this._usedCells.length; i++) {\r\n            let element = this._usedCells[i];\r\n            if (element.getIndex() == index) {\r\n                return element;\r\n            }\r\n        }\r\n        return null;\r\n    }\r\n\r\n    public updateCellAtIndex(index: number) {\r\n        if (!this._dataSource) {\r\n            return\r\n        }\r\n\r\n        let cell = this.getCellAtIndex(index);\r\n        if (cell) {\r\n            this.removeCell(cell);\r\n        }\r\n        if (index >= 0 && index < this._dataSource.numberOfCellsInPageView(this)) {\r\n            let cell = this._dataSource.pageCellAtIndex(this, index);\r\n            this.setIndexForCell(index, cell);\r\n            this.addCell(cell);\r\n        }\r\n    }\r\n\r\n    public reload() {\r\n        for (let index = 0; index < this._usedCells.length; index++) {\r\n            let cell = this._usedCells[index];\r\n            cell.node.destroy;\r\n        }\r\n        this._usedCells.length = 0;\r\n\r\n        let startIndex = 0;\r\n        let endIndex = Math.max(this._dataSource.numberOfCellsInPageView(this) - 1, 0);\r\n        for (let index = startIndex; index <= endIndex; index++) {\r\n            if (this.getCellAtIndex(index)) {\r\n                continue;\r\n            }\r\n            this.updateCellAtIndex(index);\r\n        }\r\n\r\n        this.onScrolling(null);\r\n    }\r\n\r\n\r\n    public setCurrentPageIndex(index: number) {\r\n        this.pageView.setCurrentPageIndex(index);\r\n        this.onScrolling(null);\r\n    }\r\n\r\n    public scrollToPage(idx: number, timeInSecond: number): void {\r\n        this.pageView.scrollToPage(idx, timeInSecond);\r\n        this.onScrolling(null);\r\n        this.onPageTurning(null);\r\n    }\r\n\r\n}\r\n","\r\nexport default class PlayerInfo {\r\n    private static _instance: PlayerInfo = null;\r\n    public static getInstance(): PlayerInfo {\r\n        if (this._instance == null) {\r\n            this._instance = new PlayerInfo();\r\n        }\r\n        return this._instance;\r\n    }\r\n\r\n\r\n    private _userId: string = \"\"\r\n    public getUserID(): string {\r\n        return this._userId;\r\n    }\r\n    public setUserID(userId: string) {\r\n        this._userId = userId;\r\n    }\r\n}\r\n","export default class PreloadBundleInfo {\r\n    public static create(extiBundles: string[] = [], enterBundles: { [key: string]: string[] } = {}, releaseBundlesFirst: boolean = false): PreloadBundleInfo {\r\n        let instance = new PreloadBundleInfo(extiBundles, enterBundles, releaseBundlesFirst)\r\n        return instance;\r\n    }\r\n    public extiBundles: string[] = [];\r\n    public enterBundles: { [key: string]: string[] } = {};\r\n    public releaseBundlesFirst: boolean = false;\r\n\r\n    private constructor(extiBundles: string[], enterBundles: { [key: string]: string[] }, releaseBundlesFirst: boolean = false) {\r\n        this.extiBundles = extiBundles;\r\n        this.enterBundles = enterBundles;\r\n        this.releaseBundlesFirst = releaseBundlesFirst;\r\n    }\r\n}\r\n","\r\nexport default class RedDotEvent {\r\n    private _eventName: string = \"\";\r\n    constructor(eventName: string) {\r\n        this._eventName = eventName;\r\n    }\r\n\r\n    public get eventName(): string {\r\n        return this._eventName;\r\n    }\r\n\r\n}\r\n","import RedDotObserver from \"./RedDotObserver\";\r\nimport RedDotEvent from \"./RedDotEvent\";\r\nexport default class RedDotNotifyCenter {\r\n\r\n    private static _instance: RedDotNotifyCenter = null;\r\n    public static getInstance(): RedDotNotifyCenter {\r\n        if (this._instance == null) {\r\n            this._instance = new RedDotNotifyCenter();\r\n        }\r\n        return this._instance;\r\n    }\r\n    private _observerDict: { [key: string]: RedDotObserver[] } = {};\r\n    public dispatchEvent(event: RedDotEvent) {\r\n        let observers = this._observerDict[event.eventName];\r\n        for (const ob of observers) {\r\n            ob.onNotify(event);\r\n        }\r\n    }\r\n\r\n    public regist(eventName: string, observer: RedDotObserver) {\r\n        if (this._observerDict[eventName] == null) {\r\n            this._observerDict[eventName] = [];\r\n        }\r\n        if (this._observerDict[eventName].indexOf(observer) == -1) {\r\n            this._observerDict[eventName].push(observer);\r\n        }\r\n    }\r\n\r\n    public remove(eventName: string, observer: RedDotObserver) {\r\n        if (this._observerDict[eventName]) {\r\n            let index = this._observerDict[eventName].indexOf(observer);\r\n            if (index != -1) {\r\n                this._observerDict[eventName].splice(index, 1);\r\n            }\r\n        }\r\n    }\r\n\r\n    public removeAll(observer: RedDotObserver) {\r\n        for (let key in this._observerDict) {\r\n            this.remove(key, observer);\r\n        }\r\n    }\r\n}\r\n","import RedDotEvent from \"./RedDotEvent\";\r\nimport RedDotNotifyCenter from \"./RedDotNotifyCenter\";\r\n\r\nexport default abstract class RedDotObserver extends cc.Component {\r\n\r\n    public onNotify(event: RedDotEvent) {\r\n        this.onRedDotEvent(event)\r\n    };\r\n    protected abstract onRedDotEvent(event: RedDotEvent): void;\r\n\r\n    protected listen(eventName: string) {\r\n        RedDotNotifyCenter.getInstance().regist(eventName, this);\r\n    }\r\n\r\n    protected unlisten(eventName: string) {\r\n        RedDotNotifyCenter.getInstance().remove(eventName, this);\r\n    }\r\n\r\n    protected unlistenAll() {\r\n        RedDotNotifyCenter.getInstance().removeAll(this);\r\n    }\r\n}\r\n","import LayerDirector from \"../LayerDirector/LayerDirector\";\r\nimport Debuger from \"../Utils/Debuger\";\r\nimport DefaultConfig from \"../DefaultConfigs/DefaultConfig\";\r\nimport LayerBase from \"../LayerDirector/LayerBase\";\r\nimport LayerDirectorError from \"../LayerDirector/LayerDirectorError\";\r\nimport ActiveIndicatorLayer from \"./ActiveIndicatorLayer\";\r\nimport SceneEnterParamBase from \"./SceneEnterParamBase\";\r\nimport LayerEnterParamBase from \"../LayerDirector/LayerEnterParamBase\";\r\nimport ILayerRoot from \"../LayerDirector/ILayerRoot\";\r\n\r\nconst { ccclass, property } = cc._decorator;\r\n\r\n@ccclass\r\nexport default abstract class SceneBase extends cc.Component implements ILayerRoot {\r\n\r\n    private _layerDirector: LayerDirector = null;\r\n\r\n    constructor() {\r\n        super();\r\n        this._layerDirector = new LayerDirector(this);\r\n    }\r\n\r\n    onLoad() {\r\n        Debuger.log(Debuger.FILTER_TAG01, this.getSceneName() + \".onSceneLoad\");\r\n        this.onSceneLoad();\r\n    }\r\n\r\n    onEnable() {\r\n        Debuger.log(Debuger.FILTER_TAG01, this.getSceneName() + \".onSceneEnable\");\r\n        this.onSceneEnable();\r\n    }\r\n\r\n    enterScene(param: SceneEnterParamBase) {\r\n        Debuger.log(Debuger.FILTER_TAG01, this.getSceneName() + \".onSceneEnter\", param)\r\n        this.onSceneEnter(param)\r\n    }\r\n\r\n\r\n    start() {\r\n        Debuger.log(Debuger.FILTER_TAG01, this.getSceneName() + \".onSceneStart\");\r\n        this.onSceneStart();\r\n    }\r\n\r\n    update(dt: number) {\r\n        // Debuger.log(Debuger.FILTER_TAG01, this.getSceneName() + \".onSceneUpdate:\", dt);\r\n        this.onSceneUpdate(dt);\r\n    }\r\n\r\n\r\n    exitScene() {\r\n        this._layerDirector.destroy();\r\n        this._layerDirector = null;\r\n        Debuger.log(Debuger.FILTER_TAG01, this.getSceneName() + \".onSceneExit\")\r\n        this.onSceneExit()\r\n    }\r\n\r\n    onDisable() {\r\n        Debuger.log(Debuger.FILTER_TAG01, this.getSceneName() + \".onSceneDisable\");\r\n        this.onSceneDisable();\r\n    }\r\n\r\n    onDestroy() {\r\n        Debuger.log(Debuger.FILTER_TAG01, this.getSceneName() + \".onSceneDestroy\");\r\n        this.onSceneDestroy();\r\n    }\r\n\r\n    private _UILayerRoot: cc.Node = null;\r\n    public getUILayerRoot(): cc.Node {\r\n        if (this._UILayerRoot == null) {\r\n            this._UILayerRoot = new cc.Node();\r\n            let widget = this._UILayerRoot.addComponent(cc.Widget);\r\n            if (widget) {\r\n                widget.isAlignLeft = true;\r\n                widget.left = 0;\r\n                widget.isAlignRight = true;\r\n                widget.right = 0;\r\n                widget.isAlignBottom = true;\r\n                widget.bottom = 0;\r\n                widget.isAlignTop = true;\r\n                widget.top = 0;\r\n                widget.alignMode = cc.Widget.AlignMode.ONCE\r\n            }\r\n            this.node.addChild(this._UILayerRoot, DefaultConfig.ZORDER_UI_ROOT)\r\n        }\r\n        return this._UILayerRoot;\r\n    }\r\n\r\n\r\n    public getLayerWithID(identifier: string): LayerBase {\r\n        return this._layerDirector.getLayerWithID(identifier);\r\n    }\r\n\r\n    public addLayer(layer: LayerBase, param?: LayerEnterParamBase, completeCallback?: (error: LayerDirectorError, layer: LayerBase) => void): LayerBase {\r\n        return this._layerDirector.addLayer(layer, param, completeCallback);\r\n    }\r\n\r\n    public addLayerWithPrefab(bundleName: string, prefabs: string, identifier: string, param?: LayerEnterParamBase, completeCallback?: (error: LayerDirectorError, layer: LayerBase) => void) {\r\n        ActiveIndicatorLayer.open();\r\n        this._layerDirector.addLayerWithPrefab(bundleName, prefabs, identifier, param, (error: LayerDirectorError, layer: LayerBase) => {\r\n            ActiveIndicatorLayer.close();\r\n            completeCallback && completeCallback(error, layer);\r\n        });\r\n    }\r\n\r\n    public addLayerToRoot(layer: LayerBase, zOrder: number): boolean {\r\n        this.getUILayerRoot().addChild(layer.node, zOrder);\r\n        return true;\r\n    }\r\n    public removeLayerWithID(identifier: string): LayerBase {\r\n        let layer = this._layerDirector.removeLayerWithID(identifier);\r\n        if (layer) {\r\n            layer.setLayerRoot(null);\r\n        }\r\n        return layer;\r\n    }\r\n\r\n    public abstract getSceneName(): string;\r\n    public abstract onSceneLoad(): void\r\n    public abstract onSceneEnable(): void\r\n    public abstract onSceneEnter(param: SceneEnterParamBase): void\r\n    public abstract onSceneStart(): void\r\n    public abstract onSceneUpdate(dt: number): void\r\n    public abstract onSceneExit(): void\r\n    public abstract onSceneDisable(): void\r\n    public abstract onSceneDestroy(): void\r\n}\r\n","export enum SceneDirectorErrorCode {\r\n    None,\r\n    NoSceneBaseComponent,\r\n    Pending,\r\n    ResourceFailed,\r\n    InstanceFailed,\r\n}\r\n\r\nexport default class SceneDirectorError {\r\n    public readonly errorCode: SceneDirectorErrorCode = SceneDirectorErrorCode.None;\r\n    private constructor(errorCode: SceneDirectorErrorCode) {\r\n\r\n    }\r\n    public static create(errorCode: SceneDirectorErrorCode): SceneDirectorError {\r\n        let instance = new SceneDirectorError(errorCode)\r\n        return instance;\r\n    }\r\n    public static readonly SUCCEED = new SceneDirectorError(SceneDirectorErrorCode.None);\r\n    public static readonly NO_SCENEBASE_COMPONENT = new SceneDirectorError(SceneDirectorErrorCode.NoSceneBaseComponent);\r\n    public static readonly PENDING = new SceneDirectorError(SceneDirectorErrorCode.Pending);\r\n    public static readonly REOURCE_FAILED = new SceneDirectorError(SceneDirectorErrorCode.ResourceFailed);\r\n    public static readonly INSTANCE_FAILED = new SceneDirectorError(SceneDirectorErrorCode.InstanceFailed);\r\n}","\r\nimport ActiveIndicatorLayer from \"./ActiveIndicatorLayer\";\r\nimport Debuger from \"../Utils/Debuger\";\r\nimport AssetCache from \"../AssetCache/AssetCache\";\r\nimport PreloadBundleInfo from \"./PreloadAssetInfo\";\r\nimport { SceneName } from \"../../Defines/Defines\";\r\nimport SceneEnterParamBase from \"./SceneEnterParamBase\";\r\nimport SceneDirectorError from \"./SceneDirectorError\";\r\nimport SceneBase from \"./SceneBase\";\r\nimport SwitchSceneEnterParam from \"./SwitchSceneEnterParam\";\r\n\r\nexport default class SceneDirector {\r\n    private static _instance: SceneDirector = null;\r\n    public static getInstance(): SceneDirector {\r\n        if (!this._instance) {\r\n            this._instance = new SceneDirector();\r\n        }\r\n        return this._instance;\r\n    }\r\n\r\n    private _replaceSceneName: string = \"\";\r\n    private _openParam: SceneEnterParamBase = null\r\n    private _completeCallback: (error: SceneDirectorError, scene: SceneBase) => void\r\n    private constructor() {\r\n\r\n    }\r\n\r\n    private onSceneLaunched(error: Error, scene: cc.Scene) {\r\n        if (error != null) {\r\n            this._completeCallback && this._completeCallback(SceneDirectorError.INSTANCE_FAILED, null);\r\n            ActiveIndicatorLayer.close();\r\n            return;\r\n        }\r\n\r\n        let sceneBase = scene.getComponentInChildren(SceneBase);\r\n        if (sceneBase) {\r\n            sceneBase.enterScene(this._openParam);\r\n            Debuger.warn(Debuger.FILTER_TAG01, \"Cached Assets Count:\", AssetCache.getInstance().getCashedAssetCount());\r\n            this._replaceSceneName = \"\";\r\n            this._openParam = null;\r\n        } else {\r\n            Debuger.error(Debuger.FILTER_TAG01, \"SceneDirector.onSceneLaunched not find SceneBase Component in\", scene.name)\r\n        }\r\n        this._completeCallback && this._completeCallback(SceneDirectorError.SUCCEED, sceneBase);\r\n    }\r\n\r\n    private onSceneLoaded(error: Error, sceneAsset: cc.SceneAsset) {\r\n        if (error != null) {\r\n            this._completeCallback && this._completeCallback(SceneDirectorError.REOURCE_FAILED, null);\r\n            ActiveIndicatorLayer.close();\r\n            return;\r\n        }\r\n        ActiveIndicatorLayer.close();\r\n        let exitingScene = cc.director.getScene();\r\n        let exitSceneBase = exitingScene.getComponentInChildren(SceneBase);\r\n        if (exitSceneBase) {\r\n            exitSceneBase.exitScene();\r\n        } else {\r\n            Debuger.error(Debuger.FILTER_TAG01, \"SceneDirector.onSceneLoaded not find SceneBase Component in\", exitingScene.name)\r\n        }\r\n        cc.director.loadScene(this._replaceSceneName, this.onSceneLaunched.bind(this))\r\n    }\r\n\r\n    private replaceScene(sceneName: string, param?: SceneEnterParamBase, complete?: (error: SceneDirectorError, scene: SceneBase) => void) {\r\n        if (this._replaceSceneName != \"\") {\r\n            complete && complete(SceneDirectorError.PENDING, null)\r\n            return;\r\n        }\r\n        ActiveIndicatorLayer.open();\r\n        this._replaceSceneName = sceneName;\r\n        this._openParam = param;\r\n        this._completeCallback = complete;\r\n        cc.director.preloadScene(sceneName, null, this.onSceneLoaded.bind(this));\r\n    }\r\n\r\n    public replaceSceneWithInfo(\r\n        info: PreloadBundleInfo,\r\n        sceneName: string,\r\n        param?: SceneEnterParamBase,\r\n        complete?: (error: SceneDirectorError, scene: SceneBase) => void) {\r\n\r\n        ActiveIndicatorLayer.open();\r\n        if (info.releaseBundlesFirst) {\r\n            for (const exitBundleID of info.extiBundles) {\r\n                let bundle = AssetCache.getInstance().getAssetBundleSync(exitBundleID);\r\n                if (bundle) {\r\n                    bundle.releaseAll();\r\n                }\r\n            }\r\n        }\r\n\r\n\r\n        let preloadList: { [key: string]: number } = {}\r\n        let checkComplete = () => {\r\n            for (const key in preloadList) {\r\n                const remind = preloadList[key];\r\n                if (remind > 0) {\r\n                    return\r\n                }\r\n            }\r\n            this.replaceScene(sceneName, param, (error: SceneDirectorError, scene: SceneBase) => {\r\n                if (!info.releaseBundlesFirst) {\r\n                    for (const exitBundleID of info.extiBundles) {\r\n                        let bundle = AssetCache.getInstance().getAssetBundleSync(exitBundleID);\r\n                        if (bundle) {\r\n                            bundle.releaseAll();\r\n                        }\r\n                    }\r\n                }\r\n                ActiveIndicatorLayer.close();\r\n                complete && complete(error, scene);\r\n            })\r\n        }\r\n        for (const bundleName in info.enterBundles) {\r\n            preloadList[bundleName] = 1;\r\n            let directories = info.enterBundles[bundleName];\r\n            AssetCache.getInstance().getAssetBundle(bundleName,\r\n                (error: Error, bundle: cc.AssetManager.Bundle) => {\r\n                    if (!error) {\r\n                        for (const directory of directories) {\r\n                            preloadList[bundleName] += 1;\r\n                            AssetCache.getInstance().loadAssetDir(bundleName, directory, null,\r\n                                (error: Error, assets: cc.Asset[]) => {\r\n                                    preloadList[bundleName] -= 1;\r\n                                    checkComplete();\r\n                                })\r\n                        }\r\n                        preloadList[bundleName] -= 1;\r\n                        checkComplete();\r\n                    } else {\r\n                        preloadList[bundleName] -= 1;\r\n                        checkComplete()\r\n                    }\r\n                })\r\n        }\r\n        checkComplete();\r\n    }\r\n\r\n    public replaceSceneWithSwitchScene(\r\n        info: PreloadBundleInfo,\r\n        sceneName: string,\r\n        param?: SceneEnterParamBase,\r\n        complete?: (error: SceneDirectorError, scene: SceneBase) => void) {\r\n        let switchParam = SwitchSceneEnterParam.create(info, sceneName, param, complete);\r\n        this.replaceScene(SceneName.SwitchScene, switchParam)\r\n    }\r\n\r\n    public getCurrentScene(): SceneBase {\r\n        let node = cc.director.getScene();\r\n        let sceneBase = node.getComponentInChildren(SceneBase);\r\n        return sceneBase;\r\n    }\r\n\r\n\r\n\r\n}\r\n","\r\n\r\nexport default class SceneEnterParamBase {\r\n\r\n}\r\n","// Learn TypeScript:\r\n//  - [Chinese] https://docs.cocos.com/creator/manual/zh/scripting/typescript.html\r\n//  - [English] http://www.cocos2d-x.org/docs/creator/manual/en/scripting/typescript.html\r\n// Learn Attribute:\r\n//  - [Chinese] https://docs.cocos.com/creator/manual/zh/scripting/reference/attributes.html\r\n//  - [English] http://www.cocos2d-x.org/docs/creator/manual/en/scripting/reference/attributes.html\r\n// Learn life-cycle callbacks:\r\n//  - [Chinese] https://docs.cocos.com/creator/manual/zh/scripting/life-cycle-callbacks.html\r\n//  - [English] http://www.cocos2d-x.org/docs/creator/manual/en/scripting/life-cycle-callbacks.html\r\n\r\nconst { ccclass, property } = cc._decorator;\r\n\r\n@ccclass\r\nexport default class SimpleButton extends cc.Component {\r\n\r\n    private _normalScale: number = 1.0;\r\n    private _pressedScale: number = 0.9;\r\n    private _animationDuration: number = 0.1\r\n    onLoad() {\r\n        this._normalScale = this.node.scale;\r\n        this._pressedScale = this._normalScale * this._pressedScale;\r\n    }\r\n\r\n    onEnable() {\r\n        this.node.stopActionByTag(1001);\r\n        this.node.scale = this._normalScale;\r\n        this.onEvent();\r\n    }\r\n\r\n    onDisable() {\r\n        this.node.stopActionByTag(1001);\r\n        this.node.scale = this._normalScale;\r\n        this.offEvent();\r\n    }\r\n\r\n    onDestroy() {\r\n        this.offEvent();\r\n    }\r\n\r\n    private onEvent() {\r\n        this.node.on(cc.Node.EventType.TOUCH_START, this.onTouchStart, this);\r\n        this.node.on(cc.Node.EventType.TOUCH_END, this.onTouchEnd, this);\r\n        this.node.on(cc.Node.EventType.TOUCH_CANCEL, this.onTouchCancel, this);\r\n    }\r\n\r\n    private offEvent() {\r\n        this.node.off(cc.Node.EventType.TOUCH_START, this.onTouchStart, this);\r\n        this.node.off(cc.Node.EventType.TOUCH_END, this.onTouchEnd, this);\r\n        this.node.off(cc.Node.EventType.TOUCH_CANCEL, this.onTouchCancel, this);\r\n    }\r\n\r\n    private onTouchStart(event: cc.Event) {\r\n        event.stopPropagation();\r\n        this.node.stopActionByTag(1001);\r\n\r\n        let scaleDownAction = cc.scaleTo(this._animationDuration, this._pressedScale);\r\n        scaleDownAction.setTag(1001);\r\n        this.node.runAction(scaleDownAction);\r\n    }\r\n    private onTouchEnd(event: cc.Event) {\r\n        event.stopPropagation();\r\n        this.node.stopActionByTag(1001);\r\n\r\n        let scaleUpAction = cc.scaleTo(this._animationDuration, this._normalScale);\r\n        scaleUpAction.setTag(1001);\r\n        this.node.runAction(scaleUpAction);\r\n    }\r\n\r\n    private onTouchCancel(event: cc.Event) {\r\n        event.stopPropagation();\r\n        this.onTouchEnd(event)\r\n    }\r\n}\r\n","// Learn TypeScript:\r\n//  - [Chinese] https://docs.cocos.com/creator/manual/zh/scripting/typescript.html\r\n//  - [English] http://www.cocos2d-x.org/docs/creator/manual/en/scripting/typescript.html\r\n// Learn Attribute:\r\n//  - [Chinese] https://docs.cocos.com/creator/manual/zh/scripting/reference/attributes.html\r\n//  - [English] http://www.cocos2d-x.org/docs/creator/manual/en/scripting/reference/attributes.html\r\n// Learn life-cycle callbacks:\r\n//  - [Chinese] https://docs.cocos.com/creator/manual/zh/scripting/life-cycle-callbacks.html\r\n//  - [English] http://www.cocos2d-x.org/docs/creator/manual/en/scripting/life-cycle-callbacks.html\r\n\r\nconst { ccclass, property } = cc._decorator;\r\n\r\nexport enum SimpleCheckBoxStatus {\r\n    None,\r\n    Normal,\r\n    Selected,\r\n    Disabled,\r\n}\r\n\r\n@ccclass\r\nexport default class SimpleCheckBox extends cc.Component {\r\n\r\n\r\n    @property(cc.Node)\r\n    normalNode: cc.Node = null;\r\n\r\n    @property(cc.Node)\r\n    selectedNode: cc.Node = null;\r\n\r\n    @property(cc.Node)\r\n    disabledNode: cc.Node = null;\r\n\r\n    public tag: number = 0;\r\n    private _status: SimpleCheckBoxStatus = SimpleCheckBoxStatus.None;\r\n    protected get status(): SimpleCheckBoxStatus {\r\n        return this._status;\r\n    }\r\n\r\n    protected set status(status: SimpleCheckBoxStatus) {\r\n\r\n        if (this._status == status) {\r\n            return;\r\n        }\r\n\r\n        switch (status) {\r\n            case SimpleCheckBoxStatus.Normal: {\r\n                this.normalNode.active = true;\r\n                this.selectedNode.active = false;\r\n                this.disabledNode.active = false;\r\n                this._status = status;\r\n            }\r\n                break;\r\n            case SimpleCheckBoxStatus.Selected: {\r\n                this.normalNode.active = false;\r\n                this.selectedNode.active = true;\r\n                this.disabledNode.active = false;\r\n                this._status = status;\r\n            }\r\n                break;\r\n            case SimpleCheckBoxStatus.Disabled: {\r\n                this.normalNode.active = false;\r\n                this.selectedNode.active = false;\r\n                this.disabledNode.active = true;\r\n                this._status = status;\r\n            }\r\n                break;\r\n            default:\r\n                break;\r\n        }\r\n    }\r\n\r\n    private _statusChangeHandler: (checkBox: SimpleCheckBox) => void = null;\r\n    private _statusChangeTarget: any = null;\r\n    public setStatusChangeHandler(target: any, handler: (checkBox: SimpleCheckBox) => void) {\r\n        this._statusChangeTarget = target;\r\n        this._statusChangeHandler = handler;\r\n    }\r\n\r\n    onLoad() {\r\n        this.status = SimpleCheckBoxStatus.Normal;\r\n    }\r\n\r\n    onEnable() {\r\n        this.onEvent();\r\n    }\r\n\r\n    onDisable() {\r\n        this.offEvent();\r\n    }\r\n\r\n    onDestroy() {\r\n        this.offEvent();\r\n        this._statusChangeTarget = null;\r\n        this._statusChangeHandler = null;\r\n    }\r\n\r\n    private onEvent() {\r\n        this.node.on(cc.Node.EventType.TOUCH_START, this.onTouchStart, this);\r\n        this.node.on(cc.Node.EventType.TOUCH_MOVE, this.onTouchMove, this);\r\n        this.node.on(cc.Node.EventType.TOUCH_END, this.onTouchEnd, this);\r\n        this.node.on(cc.Node.EventType.TOUCH_CANCEL, this.onTouchCancel, this);\r\n    }\r\n\r\n    private offEvent() {\r\n        this.node.off(cc.Node.EventType.TOUCH_START, this.onTouchStart, this);\r\n        this.node.off(cc.Node.EventType.TOUCH_END, this.onTouchEnd, this);\r\n        this.node.off(cc.Node.EventType.TOUCH_CANCEL, this.onTouchCancel, this);\r\n    }\r\n\r\n    private _startStatus: SimpleCheckBoxStatus = SimpleCheckBoxStatus.None;\r\n    private onTouchStart(event: cc.Event) {\r\n        event.stopPropagation();\r\n        this._startStatus = this.status;\r\n\r\n        switch (this._startStatus) {\r\n            case SimpleCheckBoxStatus.Normal:\r\n                this.status = SimpleCheckBoxStatus.Selected;\r\n                break;\r\n            case SimpleCheckBoxStatus.Selected:\r\n                break;\r\n            default:\r\n                break;\r\n        }\r\n    }\r\n    private onTouchMove(event: cc.Event.EventTouch) {\r\n        event.stopPropagation();\r\n        let pos = this.node.convertToNodeSpaceAR(event.getLocation());\r\n        let size = this.node.getContentSize();\r\n        let rect = cc.rect(-size.width * 0.5, -size.height * 0.5, size.width, size.height);\r\n        if (rect.contains(cc.v2(pos))) {\r\n\r\n            switch (this._startStatus) {\r\n                case SimpleCheckBoxStatus.Normal:\r\n                    this.status = SimpleCheckBoxStatus.Selected;\r\n                    break;\r\n                default:\r\n                    break;\r\n            }\r\n        } else {\r\n            switch (this._startStatus) {\r\n                case SimpleCheckBoxStatus.Normal:\r\n                    this.status = SimpleCheckBoxStatus.Normal;\r\n                    break;\r\n                default:\r\n                    break;\r\n            }\r\n        }\r\n    }\r\n    private onTouchEnd(event: cc.Event.EventTouch) {\r\n        event.stopPropagation();\r\n        let pos = this.node.convertToNodeSpaceAR(event.getLocation());\r\n        let size = this.node.getContentSize();\r\n        let rect = cc.rect(-size.width * 0.5, -size.height * 0.5, size.width, size.height);\r\n        if (rect.contains(cc.v2(pos))) {\r\n            switch (this._startStatus) {\r\n                case SimpleCheckBoxStatus.Normal:\r\n                    this.status = SimpleCheckBoxStatus.Selected;\r\n                    this.notifyStatusChange();\r\n                    break;\r\n                case SimpleCheckBoxStatus.Selected:\r\n                    this.status = SimpleCheckBoxStatus.Normal;\r\n                    this.notifyStatusChange();\r\n                    break;\r\n                default:\r\n                    break;\r\n            }\r\n        } else {\r\n            switch (this._startStatus) {\r\n                case SimpleCheckBoxStatus.Normal:\r\n                    this.status = this._startStatus;\r\n                    break;\r\n                case SimpleCheckBoxStatus.Selected:\r\n                    this.status = this._startStatus;\r\n                    break;\r\n                default:\r\n                    break;\r\n            }\r\n        }\r\n\r\n        this._startStatus = SimpleCheckBoxStatus.None\r\n    }\r\n\r\n    private onTouchCancel(event: cc.Event.EventTouch) {\r\n        this.onTouchEnd(event)\r\n    }\r\n\r\n    private notifyStatusChange() {\r\n        if (this._statusChangeTarget && this._statusChangeHandler) {\r\n            this._statusChangeHandler.call(this._statusChangeTarget, this);\r\n        }\r\n    }\r\n\r\n    public isChecked(): boolean {\r\n        return this.status == SimpleCheckBoxStatus.Selected;\r\n    }\r\n\r\n    public checked() {\r\n        if (this.status == SimpleCheckBoxStatus.Normal) {\r\n            this.status = SimpleCheckBoxStatus.Selected;\r\n        }\r\n    }\r\n\r\n    public unchecked() {\r\n        if (this.status == SimpleCheckBoxStatus.Selected) {\r\n            this.status = SimpleCheckBoxStatus.Normal;\r\n        }\r\n    }\r\n\r\n    public disable() {\r\n        this.status = SimpleCheckBoxStatus.Disabled;\r\n    }\r\n\r\n    public enable() {\r\n        this.status = SimpleCheckBoxStatus.Normal;\r\n    }\r\n}\r\n","import StateMachine from \"./StateMachine\";\nimport State from \"./State\";\nimport Message from \"./Message\";\n\n\n\nexport default class SimpleStateMachine<T> extends StateMachine<T> {\n    private m_curretnState: State<T> = undefined;\n    protected constructor(onwer: T) {\n        super(onwer);\n    }\n\n    public getCurrentState(): State<T> {\n        return this.m_curretnState;\n    }\n\n    public setCurrentState(newState: State<T>): void {\n        if (this.m_curretnState === newState) {\n            return;\n        }\n\n        if (this.m_curretnState) {\n            this.m_curretnState.exit(this.getOnwer());\n            this.m_curretnState = null;\n        }\n\n        this.m_curretnState = newState;\n        if (this.m_curretnState) {\n            this.m_curretnState.enter(this.getOnwer());\n        }\n    }\n\n    public update(deltaTime: number): void {\n        let currentState = this.getCurrentState();\n        if (currentState) {\n            currentState.update(this.getOnwer(), deltaTime);\n        }\n    }\n\n    public onMessage(message: Message): boolean {\n        let currentState = this.getCurrentState();\n        if (currentState) {\n            return currentState.onMessage(message);\n        }\n        return false;\n    }\n}\n","\r\nimport { ISocketDelegate } from \"../../SocketWrapper/Base/ISocketDelegate\";\r\nimport { SocketWrapperBase } from \"../../SocketWrapper/Base/SocketWrapperBase\";\r\nimport SocketHeartBeatBase from \"../../SocketHeartBeat/Base/SocketHeartBeatBase\";\r\nimport SocketMessagePhraserBase from \"../../SocketMessagePhraser/Base/SocketMessagePhraserBase\";\r\nimport EventDispatcher from \"../../../../Event/EventDispatcher\";\r\n\r\n\r\nexport enum SocketName {\r\n    None = \"\",\r\n    Battle = \"Battle\",\r\n    Chat = \"Chat\",\r\n}\r\n\r\nexport default abstract class SocketDispatcherBase implements ISocketDelegate {\r\n\r\n    private _eventDispatcher: EventDispatcher = null;\r\n    private _socket: SocketWrapperBase = null;\r\n    private _name: SocketName = SocketName.None\r\n    private _heartBeat: SocketHeartBeatBase = null;\r\n    private _messagePhraser: SocketMessagePhraserBase = null;\r\n    public getName(): SocketName {\r\n        return this._name;\r\n    }\r\n\r\n    protected setName(name: SocketName) {\r\n        this._name = name;\r\n    }\r\n    protected initBase(name: SocketName,\r\n        socket: SocketWrapperBase,\r\n        heartBeat: SocketHeartBeatBase,\r\n        messagePhraser: SocketMessagePhraserBase) {\r\n        this.setName(name);\r\n        this._eventDispatcher = EventDispatcher.create();\r\n        this._socket = socket;\r\n        this._heartBeat = heartBeat;\r\n        this._messagePhraser = messagePhraser;\r\n    }\r\n\r\n    protected sendData(data: string | ArrayBuffer) {\r\n        if (data) {\r\n            this._socket.send(data);\r\n        }\r\n    }\r\n\r\n    public onSocketOpen(data: any) {\r\n        let msg = this._messagePhraser.openInfoToMsg(data)\r\n        this.onOpen(msg);\r\n    }\r\n\r\n    public onSocketMessage(data: any) {\r\n        let msg = this._messagePhraser.bufferToMsg(data);\r\n        this._heartBeat.onResponeMessage(msg);\r\n        this.onMessage(msg);\r\n    }\r\n\r\n    public onSocketError(data: any) {\r\n        let msg = this._messagePhraser.errorInfoToMsg(data)\r\n        this.onError(msg);\r\n    }\r\n\r\n    public onSocketClosed(data: any) {\r\n        let msg = this._messagePhraser.closedInfoToMsg(data)\r\n        this.onClosed(msg);\r\n    }\r\n\r\n    public connect() {\r\n        this._socket.connect();\r\n        this._heartBeat.start(this);\r\n    }\r\n\r\n    public sendMessage(msg: any) {\r\n        let buffer = this._messagePhraser.msgToBuffer(msg);\r\n        this.sendData(buffer);\r\n    }\r\n\r\n    public close() {\r\n        this._heartBeat.stop();\r\n        this._socket.close();\r\n    }\r\n\r\n    public hasListener(cmd: number): boolean {\r\n        return this._eventDispatcher.hasEventListener(cmd.toString());\r\n    }\r\n\r\n    public registListener(cmd: number, callback: (event: cc.Event.EventCustom) => void, target?: any): (event: cc.Event.EventCustom) => void {\r\n        return this._eventDispatcher.registListener(cmd.toString(), callback, target)\r\n    }\r\n\r\n    public removeListener(cmd: number, callback?: Function, target?: any): void {\r\n        this._eventDispatcher.removeListener(cmd.toString(), callback, target);\r\n    }\r\n\r\n    public removeListenerTarget(target: any): void {\r\n        this._eventDispatcher.removeListenerTarget(target);\r\n    }\r\n\r\n    public removeAllListener(cmdOrTarget: number | any): void {\r\n        this._eventDispatcher.removeAllListener(cmdOrTarget)\r\n    }\r\n\r\n    public registListenerOnce(cmd: number, callback: (arg1?: any, arg2?: any, arg3?: any, arg4?: any, arg5?: any) => void, target?: any): void {\r\n        this._eventDispatcher.registListenerOnce(cmd.toString(), callback)\r\n    }\r\n\r\n    public dispatchEvent(cmd: number, data: any): void {\r\n        let event = new cc.Event.EventCustom(cmd.toString(), false);\r\n        event.setUserData(data);\r\n        this._eventDispatcher.dispatchEvent(event);\r\n    }\r\n\r\n\r\n    public abstract onOpen(msg: any);\r\n    public abstract onMessage(msg: any);\r\n    public abstract onError(msg: any);\r\n    public abstract onClosed(msg: any);\r\n\r\n}\r\n","import { ISocketDelegate } from \"./Base/ISocketDelegate\";\r\nimport { SocketWrapperBase } from \"./Base/SocketWrapperBase\";\r\nimport SocketWrapperWeb from \"./Web/SocketWrapperWeb\";\r\nimport SocketWrapperWeixin from \"./Weixin/SocketWrapperWeixin\";\r\n\r\nexport default class SocketFactory {\r\n    public static createSocketWrapper(url: string, delegate: ISocketDelegate): SocketWrapperBase {\r\n\r\n        switch (cc.sys.platform) {\r\n            case cc.sys.WECHAT_GAME:\r\n                return SocketWrapperWeixin.create(url, delegate);\r\n                break;\r\n            case cc.sys.MOBILE_BROWSER:\r\n            case cc.sys.DESKTOP_BROWSER:\r\n                return SocketWrapperWeb.create(url, delegate);\r\n                break;\r\n            default:\r\n                break;\r\n        }\r\n        return null;\r\n    }\r\n\r\n}\r\n","import SocketDispatcherBase from \"../../SocketDispatcher/Base/SocketDispatcherBase\";\r\n\r\nexport default abstract class SocketHeartBeatBase {\r\n\r\n    private _dispatcher: SocketDispatcherBase = null;\r\n    private _heartBeatTimer: NodeJS.Timeout = null;\r\n    private _checkTimeoutTimer: NodeJS.Timeout = null;\r\n\r\n    private _waitResponeCount = 0;\r\n    protected initBase() {\r\n\r\n    }\r\n\r\n    public start(socketDispatcher: SocketDispatcherBase) {\r\n        this._waitResponeCount = 0;\r\n        this._dispatcher = socketDispatcher;\r\n        this.stop();\r\n        this._heartBeatTimer = setInterval(this.heartBeat.bind(this), 2000)\r\n        this._checkTimeoutTimer = setInterval(this.checkTimeout.bind(this), 2000)\r\n    }\r\n\r\n    public stop() {\r\n        this._waitResponeCount = 0;\r\n        if (this._heartBeatTimer) {\r\n            clearInterval(this._heartBeatTimer);\r\n        }\r\n        if (this._checkTimeoutTimer) {\r\n            clearInterval(this._checkTimeoutTimer);\r\n        }\r\n    }\r\n\r\n    private heartBeat() {\r\n        this._waitResponeCount++;\r\n        let msg = this.getRequestData();\r\n        this._dispatcher.sendMessage(msg);\r\n    }\r\n\r\n\r\n    private checkTimeout() {\r\n        if (this._waitResponeCount > 3) {\r\n            this._waitResponeCount = 0;\r\n            this._dispatcher.connect();\r\n        }\r\n    }\r\n\r\n    protected onHeartRespone() {\r\n        this._waitResponeCount--;\r\n        this._waitResponeCount = Math.max(0, this._waitResponeCount);\r\n    }\r\n\r\n    public abstract getRequestData(): any;\r\n    public abstract onResponeMessage(msg: any);\r\n}","export default abstract class SocketMessagePhraserBase {\r\n\r\n\r\n    protected initBase() {\r\n\r\n    }\r\n    public abstract openInfoToMsg(openInfo: any): any;\r\n    public abstract bufferToMsg(recvBuf: any): any;\r\n    public abstract msgToBuffer(msg: any): ArrayBuffer;\r\n    public abstract errorInfoToMsg(errorInfo: any): any;\r\n    public abstract closedInfoToMsg(closedInfo: any): any;\r\n}","import { ISocketDelegate } from \"./ISocketDelegate\";\r\n\r\nexport enum SocketWrapperState {\r\n    None = 0,\r\n    CONNECTING = 1,\r\n    OPEN,\r\n    CLOSING,\r\n    CLOSED\r\n}\r\n\r\nexport abstract class SocketWrapperBase {\r\n\r\n    private _url: string = \"\";\r\n    public getUrl(): string {\r\n        return this._url;\r\n    }\r\n    protected setUrl(url: string) {\r\n        this._url = url;\r\n    }\r\n\r\n    private _state: SocketWrapperState = SocketWrapperState.None;\r\n    public getState(): SocketWrapperState {\r\n        return this._state;\r\n    }\r\n    public setState(state: SocketWrapperState) {\r\n        this._state = state;\r\n    }\r\n\r\n    private _delegate: ISocketDelegate = null;\r\n    public getDelegate(): ISocketDelegate {\r\n        return this._delegate;\r\n    }\r\n    protected setDelegate(delegate: ISocketDelegate) {\r\n        this._delegate = delegate;\r\n    }\r\n\r\n    protected onSocketOpen(data: any) {\r\n        this._delegate && this._delegate.onSocketOpen(data);\r\n    }\r\n\r\n    protected onSocketMessage(data: any) {\r\n        this._delegate && this._delegate.onSocketMessage(data);\r\n    }\r\n\r\n    protected onSocketError(data: any) {\r\n        this._delegate && this._delegate.onSocketError(data);\r\n    }\r\n\r\n    protected onSocketClosed(data: any) {\r\n        this._delegate && this._delegate.onSocketClosed(data);\r\n    }\r\n\r\n    protected initBase(url: string, delegate?: ISocketDelegate) {\r\n        this.setUrl(url);\r\n        this.setDelegate(delegate);\r\n    }\r\n\r\n    public abstract connect();\r\n    public abstract send(data: string | ArrayBuffer);\r\n    public abstract close();\r\n}","import { ISocketDelegate } from \"../Base/ISocketDelegate\";\r\nimport { SocketWrapperBase, SocketWrapperState } from \"../Base/SocketWrapperBase\";\r\n\r\n\r\nexport default class SocketWrapperWeb extends SocketWrapperBase {\r\n\r\n    public static create(url: string, delegate?: ISocketDelegate): SocketWrapperWeb {\r\n        let instance = new SocketWrapperWeb();\r\n        instance.init(url, delegate);\r\n        return instance;\r\n    }\r\n\r\n    protected init(url: string, delegate: ISocketDelegate) {\r\n        super.initBase(url, delegate);\r\n    }\r\n\r\n    private _socket: WebSocket = null;\r\n    public connect() {\r\n        this.close();\r\n        this.setState(SocketWrapperState.CONNECTING);\r\n        this._socket = new WebSocket(this.getUrl());\r\n        this._socket.binaryType = 'arraybuffer';  // 默认为blob，这里要改为arraybuffer\r\n        this._socket.onopen = this.onOpen.bind(this);\r\n        this._socket.onmessage = this.onMessage.bind(this);\r\n        this._socket.onerror = this.onError.bind(this);\r\n        this._socket.onclose = this.onClose.bind(this);\r\n    }\r\n\r\n    public close() {\r\n        if (this._socket) {\r\n            this.setState(SocketWrapperState.CLOSING);\r\n            this._socket.close()\r\n            this._socket = null;\r\n        }\r\n    }\r\n\r\n    public send(data: string | ArrayBuffer) {\r\n        if (this.getState() == SocketWrapperState.OPEN) {\r\n            this._socket.send(data);\r\n        }\r\n    }\r\n\r\n    private onOpen(event: Event) {\r\n        this.setState(SocketWrapperState.OPEN);\r\n        this.onSocketOpen(null);\r\n    }\r\n    private onMessage(event: MessageEvent) {\r\n        this.onSocketMessage(event.data);\r\n    }\r\n    private onError(event: Event) {\r\n        this.setState(SocketWrapperState.CLOSED);\r\n        this.onSocketError(null);\r\n    }\r\n    private onClose(event: CloseEvent) {\r\n        this.setState(SocketWrapperState.CLOSED);\r\n        this.onSocketClosed({ code: event.code, reason: event.reason, wasClean: event.wasClean });\r\n    }\r\n}\r\n","import { ISocketDelegate } from \"../Base/ISocketDelegate\";\r\nimport { SocketWrapperBase, SocketWrapperState } from \"../Base/SocketWrapperBase\";\r\n\r\n\r\nexport default class SocketWrapperWeixin extends SocketWrapperBase {\r\n\r\n    public static create(url: string, delegate?: ISocketDelegate): SocketWrapperWeixin {\r\n        let instance = new SocketWrapperWeixin();\r\n        instance.init(url, delegate);\r\n        return instance;\r\n    }\r\n\r\n    protected init(url: string, delegate: ISocketDelegate) {\r\n        super.initBase(url, delegate);\r\n    }\r\n\r\n    private _socket: wx.SocketTask = null;\r\n    public connect() {\r\n        this.close();\r\n        this.setState(SocketWrapperState.CONNECTING);\r\n\r\n        this._socket = wx.connectSocket({\r\n            url: this.getUrl(),\r\n            fail: (err) => {\r\n                console.error(\"wx.connectSocket fail\", err)\r\n            },\r\n            success: (res) => {\r\n                // console.error(\"wx.connectSocket success\", res);\r\n            }\r\n        });;\r\n\r\n        this._socket.onOpen(this.onOpen.bind(this));\r\n        this._socket.onMessage(this.onMessage.bind(this));\r\n        this._socket.onError(this.onError.bind(this));\r\n        this._socket.onClose(this.onClose.bind(this));\r\n    }\r\n\r\n    public close() {\r\n        if (this._socket) {\r\n            this.setState(SocketWrapperState.CLOSING);\r\n            this._socket.close({})\r\n            this._socket = null;\r\n        }\r\n    }\r\n\r\n    public send(data: string | ArrayBuffer) {\r\n        if (this.getState() == SocketWrapperState.OPEN) {\r\n            this._socket.send({\r\n                data: data\r\n            });\r\n        }\r\n    }\r\n\r\n    private onOpen(event: wx.SocketTask.onOpen.ParamParam) {\r\n        this.setState(SocketWrapperState.OPEN);\r\n        this.onSocketOpen(event.header);\r\n    }\r\n    private onMessage(event: wx.SocketTask.onMessage.ParamParam) {\r\n        this.onSocketMessage(event.data);\r\n    }\r\n    private onError(event: wx.SocketTask.onError.ParamParam) {\r\n        this.setState(SocketWrapperState.CLOSED);\r\n        this.onSocketError(event.errMsg);\r\n    }\r\n    private onClose(event: any) {\r\n        this.setState(SocketWrapperState.CLOSED);\r\n        this.onSocketClosed(event);\r\n    }\r\n}\r\n","import StateMachine from \"./StateMachine\";\nimport Stack from \"../../STL/Stack\";\nimport State from \"./State\";\nimport Message from \"./Message\";\n\n\nexport default class StackStateMachine<T> extends StateMachine<T> {\n    private m_currentStateStack: Stack<State<T>> = new Stack<State<T>>();\n    constructor(onwer: T) {\n        super(onwer);\n    }\n    public getCurrentState(): State<T> | undefined {\n        return this.m_currentStateStack.peak();\n    }\n    public setCurrentState(newState: State<T>): void {\n        this.popCurrentState();\n        this.pushCurrentState(newState);\n    }\n    public pushCurrentState(newState: State<T>): void {\n        if (this.m_currentStateStack.contains(newState)) {\n            console.warn(\"State Already In Stack\")\n            return;\n        }\n        if (newState) {\n            let lastState = this.getCurrentState();\n            if (lastState) {\n                lastState.exit(this.getOnwer());\n            }\n            newState.enter(this.getOnwer());\n            this.m_currentStateStack.push(newState);\n        }\n    }\n    public popCurrentState(): State<T> {\n        if (!this.m_currentStateStack.empty()) {\n            let popState = this.m_currentStateStack.pop();\n            popState.exit(this.getOnwer());\n            let peakState = this.m_currentStateStack.peak();\n            if (peakState) {\n                peakState.enter(this.getOnwer());\n            }\n            return popState;\n        }\n        return undefined;\n    }\n    public update(deltaTime: number): void {\n        let currentState = this.getCurrentState();\n        if (currentState) {\n            currentState.update(this.getOnwer(), deltaTime);\n        }\n    }\n    public onMessage(message: Message): boolean {\n        let currentState = this.getCurrentState();\n        if (currentState) {\n            return currentState.onMessage(message);\n        }\n        return false;\n    }\n}\n","\nexport default class Stack<T> {\n    private m_store: T[] = [];\n    constructor() {\n\n    }\n\n    public length(): number {\n        return this.m_store.length;\n    }\n\n    public peak(): T | undefined {\n        if (!this.empty()) {\n            return this.m_store[this.m_store.length - 1];\n        }\n        return undefined;\n    }\n\n    public push(val: T) {\n        this.m_store.push(val);\n    }\n\n    public pop(): T | undefined {\n        if (!this.empty()) {\n            return this.m_store.pop();\n        }\n        return undefined;\n    }\n\n    public contains(val: T): boolean {\n        return this.m_store.indexOf(val) != -1\n    }\n\n    public empty(): boolean {\n        return this.m_store.length == 0;\n    }\n}","import State from \"./State\";\nimport Message from \"./Message\";\n\n\nexport default abstract class StateMachine<T> {\n\n    private m_onwer: T = null;\n    protected getOnwer(): T {\n        return this.m_onwer;\n    }\n    constructor(onwer: T) {\n        this.m_onwer = onwer;\n    }\n    public abstract getCurrentState(): State<T>;\n    public abstract setCurrentState(state: State<T>): void;\n    public abstract update(deltaTime: number): void;\n    public abstract onMessage(message: Message): boolean;\n}\n","import State from \"./State\";\r\n\r\nexport default class StatePool<T> {\r\n    private _pools: { [key: string]: State<T>[] } = {}\r\n\r\n    private getPool(key: number): State<T>[] {\r\n        let pool: State<T>[] = this._pools[key];\r\n        if (!pool) {\r\n            pool = [];\r\n            this._pools[key] = pool;\r\n        }\r\n        return pool\r\n    }\r\n\r\n    public putState(state: State<T>): void {\r\n        if (!state) {\r\n            return;\r\n        }\r\n        let pool = this.getPool(state.getType());\r\n        pool.push(state);\r\n    }\r\n\r\n    public getState(type: number): State<T> {\r\n        let pool = this.getPool(type);\r\n        if (pool.length > 0) {\r\n            return pool.shift();\r\n        }\r\n        return null;\r\n    }\r\n\r\n    public clear() {\r\n        this._pools = {};\r\n    }\r\n}\r\n","import Message from \"./Message\";\nexport default abstract class State<T> {\n\n    public abstract getType(): number;\n    public abstract enter(onwer: T): void;\n    public abstract update(onwer: T, deltaTime: number): void;\n    public abstract exit(onwer: T): void;\n    public abstract onMessage(message: Message): boolean\n    public abstract reset(): void\n}\n","import PreloadBundleInfo from \"./PreloadAssetInfo\";\r\nimport SceneBase from \"./SceneBase\";\r\nimport SceneDirectorError from \"./SceneDirectorError\";\r\nimport SceneEnterParamBase from \"./SceneEnterParamBase\";\r\n\r\nexport default class SwitchSceneEnterParam extends SceneEnterParamBase {\r\n    public static create(info: PreloadBundleInfo,\r\n        enterSceneName: string,\r\n        enterSceneParam: SceneEnterParamBase,\r\n        completeCallback?: (error: SceneDirectorError, scene: SceneBase) => void): SwitchSceneEnterParam {\r\n        let instance = new SwitchSceneEnterParam(info, enterSceneName, enterSceneParam, completeCallback);\r\n        return instance\r\n    }\r\n    public info: PreloadBundleInfo = null;\r\n    public enterSceneName: string = \"\";\r\n    public enterSceneParam: SceneEnterParamBase = null;\r\n    public completeCallback: (error: SceneDirectorError, scene: SceneBase) => void = null;\r\n\r\n    private constructor(info: PreloadBundleInfo,\r\n        enterSceneName: string,\r\n        enterSceneParam: SceneEnterParamBase,\r\n        completeCallback?: (error: SceneDirectorError, scene: SceneBase) => void) {\r\n        super();\r\n        this.info = info;\r\n        this.enterSceneName = enterSceneName;\r\n        this.enterSceneParam = enterSceneParam;\r\n        this.completeCallback = completeCallback\r\n    }\r\n}","import { SceneName } from \"../../Defines/Defines\";\r\nimport IGame from \"../IGame/IGame\";\r\nimport PreloadBundleInfo from \"./PreloadAssetInfo\";\r\nimport SceneBase from \"./SceneBase\";\r\nimport SwitchSceneEnterParam from \"./SwitchSceneEnterParam\";\r\n\r\n\r\n\r\n\r\nconst { ccclass, property } = cc._decorator;\r\n@ccclass\r\nexport default class SwitchScene extends SceneBase {\r\n\r\n    private _param: SwitchSceneEnterParam = null;\r\n    // LIFE-CYCLE CALLBACKS:\r\n    public getSceneName(): string {\r\n        return SceneName.SwitchScene;\r\n    }\r\n    public onSceneLoad(): void {\r\n\r\n    }\r\n    public onSceneEnable(): void {\r\n\r\n    }\r\n    public onSceneEnter(param: SwitchSceneEnterParam): void {\r\n        this._param = param;\r\n    }\r\n    public onSceneStart(): void {\r\n        let info = PreloadBundleInfo.create(this._param.info.extiBundles, this._param.info.enterBundles, true)\r\n        IGame.getInstance().replaceSceneWithPreloadInfo(info, this._param.enterSceneName, this._param.enterSceneParam, this._param.completeCallback)\r\n    }\r\n    public onSceneUpdate(dt: number): void {\r\n\r\n    }\r\n    public onSceneExit(): void {\r\n\r\n    }\r\n    public onSceneDisable(): void {\r\n\r\n    }\r\n    public onSceneDestroy(): void {\r\n\r\n    }\r\n}\r\n","\r\nexport interface TabItemDelegate {\r\n    onTabItemTabbed(tabItem: TabItem);\r\n}\r\n\r\nconst { ccclass, property } = cc._decorator;\r\n\r\n@ccclass\r\nexport default class TabItem extends cc.Component {\r\n\r\n    @property(cc.Button)\r\n    button: cc.Button = null;\r\n\r\n    private _index: number = 0;\r\n    public getIndex(): number {\r\n        return this._index;\r\n    }\r\n    public setIndex(index: number): void {\r\n        this._index = index;\r\n    }\r\n\r\n    private _selected: boolean = false;\r\n    public getSelected(): boolean {\r\n        return this._selected;\r\n    }\r\n    public setSelected(selected: boolean): void {\r\n        this._selected = selected;\r\n        this.button.interactable = !this._selected;\r\n    }\r\n\r\n    private _delegate: TabItemDelegate = null\r\n    public getDelegate(): TabItemDelegate {\r\n        return this._delegate;\r\n    }\r\n    public setDelegate(delegate: TabItemDelegate) {\r\n        this._delegate = delegate;\r\n    }\r\n\r\n    // LIFE-CYCLE CALLBACKS:\r\n    onLoad() {\r\n        this.setSelected(false);\r\n        this.registerButtonClickEvent(this.button, \"onTabbed\", \"\");\r\n    }\r\n\r\n    start() {\r\n    }\r\n\r\n    onDestroy() {\r\n\r\n    }\r\n\r\n    private registerButtonClickEvent(button: cc.Button, hanlder: string, customEventData: string) {\r\n        var clickEventHandler = new cc.Component.EventHandler();\r\n        clickEventHandler.target = this.node;\r\n        clickEventHandler.component = \"TabItem\";\r\n        clickEventHandler.handler = hanlder;\r\n        clickEventHandler.customEventData = customEventData;\r\n        button.clickEvents[0] = clickEventHandler;\r\n    }\r\n\r\n    private onTabbed(event: cc.Event, customEventData: string) {\r\n        if (this._delegate) {\r\n            this._delegate.onTabItemTabbed(this);\r\n        }\r\n    }\r\n}\r\n","// Learn TypeScript:\r\n//  - [Chinese] https://docs.cocos.com/creator/manual/zh/scripting/typescript.html\r\n//  - [English] http://www.cocos2d-x.org/docs/creator/manual/en/scripting/typescript.html\r\n// Learn Attribute:\r\n//  - [Chinese] https://docs.cocos.com/creator/manual/zh/scripting/reference/attributes.html\r\n//  - [English] http://www.cocos2d-x.org/docs/creator/manual/en/scripting/reference/attributes.html\r\n// Learn life-cycle callbacks:\r\n//  - [Chinese] https://docs.cocos.com/creator/manual/zh/scripting/life-cycle-callbacks.html\r\n//  - [English] http://www.cocos2d-x.org/docs/creator/manual/en/scripting/life-cycle-callbacks.html\r\n\r\nconst { ccclass, property } = cc._decorator;\r\n\r\n@ccclass\r\nexport default abstract class TabViewCell extends cc.Component {\r\n\r\n    // LIFE-CYCLE CALLBACKS:\r\n\r\n    // onLoad () {}\r\n\r\n    start() {\r\n\r\n    }\r\n\r\n    // update (dt) {}\r\n\r\n    public selected() {\r\n        this.node.active = true\r\n        this.onSelected()\r\n    }\r\n\r\n    public unselected() {\r\n        this.onUnSelected()\r\n        this.node.active = false\r\n    }\r\n\r\n    public abstract onSelected()\r\n    public abstract onUnSelected()\r\n}\r\n","import TabItem, { TabItemDelegate } from \"./TabItem\";\r\nimport TabViewCell from './TabViewCell';\r\n\r\n// Learn TypeScript:\r\n//  - [Chinese] https://docs.cocos.com/creator/manual/zh/scripting/typescript.html\r\n\r\nconst { ccclass, property } = cc._decorator;\r\n\r\n@ccclass\r\nexport default class TabView extends cc.Component implements TabItemDelegate {\r\n\r\n    @property([TabItem])\r\n    tabItems: TabItem[] = [];\r\n\r\n    @property([cc.Prefab])\r\n    tabViewPrefabs: cc.Prefab[] = [];\r\n\r\n    @property(cc.Node)\r\n    tabViewContainer: cc.Node = null;\r\n\r\n    private _tabViewMap: { [key: number]: TabViewCell } = {};\r\n    // LIFE-CYCLE CALLBACKS:\r\n    onLoad() {\r\n        for (let index = 0; index < this.tabItems.length; index++) {\r\n            let item = this.tabItems[index];\r\n            this.initTabItem(item, index);\r\n            item.setSelected(false);\r\n        }\r\n    }\r\n    // update (dt) {}\r\n\r\n    private initTabItem(tabItem: TabItem, index: number): void {\r\n        tabItem.setIndex(index)\r\n        tabItem.setDelegate(this);\r\n    }\r\n\r\n    private _lastTabIndex: number = 0;\r\n    public showTabIndex(index: number) {\r\n        if (index < this.tabItems.length) {\r\n            let lastTabItem = this.tabItems[this._lastTabIndex];\r\n            lastTabItem.setSelected(false);\r\n            let tabItem = this.tabItems[index];\r\n            tabItem.setSelected(true);\r\n\r\n            let lastTabView: TabViewCell = this._tabViewMap[this._lastTabIndex]\r\n            if (lastTabView) {\r\n                lastTabView.unselected()\r\n            }\r\n\r\n            let tabView: TabViewCell = this._tabViewMap[index];\r\n            if (!tabView) {\r\n                let prefab = this.tabViewPrefabs[index];\r\n                let view = cc.instantiate(prefab);\r\n                this.tabViewContainer.addChild(view);\r\n                tabView = view.getComponent(TabViewCell);\r\n                this._tabViewMap[index] = tabView;\r\n            }\r\n            tabView.selected();\r\n            this._lastTabIndex = index;\r\n        }\r\n    }\r\n\r\n    onTabItemTabbed(tabItem: TabItem) {\r\n        let index = tabItem.getIndex();\r\n        this.showTabIndex(index);\r\n    }\r\n}\r\n","\r\nconst { ccclass, property } = cc._decorator;\r\n\r\n@ccclass\r\nexport default class TableViewCell extends cc.Component {\r\n    public static InvalidIndex: number = -1\r\n\r\n    private _index: number = 0;\r\n    public getIndex(): number {\r\n        return this._index;\r\n    }\r\n    public setIndex(index: number): void {\r\n        this._index = index;\r\n    }\r\n\r\n    public reset() {\r\n        this._index = TableViewCell.InvalidIndex;\r\n    }\r\n\r\n}\r\n","import TableViewCell from \"./TableViewCell\";\r\n\r\nexport interface TableViewDelegate {\r\n    tableCellTouched(tableView: TableView, cell: TableViewCell);\r\n    // tableCellHighlight(tableView: TableView, cell: TableViewCell);\r\n    // tableCellUnhighlight(tableView: TableView, cell: TableViewCell);\r\n    // tableCellWillRecycle(tableView: TableView, cell: TableViewCell);\r\n}\r\n\r\nexport interface TableViewDataSource {\r\n\r\n    tableCellSizeForIndex(table: TableView, index: number): cc.Size;\r\n    tableCellAtIndex(table: TableView, index: number): TableViewCell;\r\n    numberOfCellsInTableView(table: TableView): number;\r\n}\r\n\r\nexport enum TableViewDirection {\r\n    None,\r\n    Horizontal,\r\n    Vertical,\r\n}\r\n\r\nconst { ccclass, property } = cc._decorator;\r\n\r\n@ccclass\r\nexport default class TableView extends cc.Component {\r\n\r\n    @property(cc.ScrollView)\r\n    scrollView: cc.ScrollView = null;\r\n\r\n    private _cellPositions: number[] = [];\r\n    private _usedCells: TableViewCell[] = [];\r\n    private _freedCells: TableViewCell[] = [];\r\n\r\n    private _direction: TableViewDirection = TableViewDirection.Vertical;\r\n    public getDirection(): TableViewDirection {\r\n        return this._direction;\r\n    }\r\n\r\n    public setDirection(direction: TableViewDirection): void {\r\n        this._direction = direction;\r\n        this.reload();\r\n    }\r\n\r\n    private _useFastMode: boolean = true;\r\n    public getUseFastMode(): boolean {\r\n        return this._useFastMode;\r\n    }\r\n\r\n    public setUseFastMode(fast: boolean) {\r\n        this._useFastMode = fast;\r\n    }\r\n\r\n    onLoad() {\r\n\r\n    }\r\n\r\n    onDestroy() {\r\n        this._dataSource = null;\r\n        this._delegate = null;\r\n        for (let index = 0; index < this._usedCells.length; index++) {\r\n            let element = this._usedCells[index];\r\n            element.node && element.node.destroy()\r\n        }\r\n        this._usedCells = null\r\n\r\n        for (let index = 0; index < this._freedCells.length; index++) {\r\n            let element = this._freedCells[index];\r\n            element.node && element.node.destroy()\r\n        }\r\n        this._freedCells = null\r\n    }\r\n\r\n    onEnable() {\r\n        // this.scrollView.node.on(\"scroll-to-top\", this.onScrollViewScrollToTop, this);\r\n        // this.scrollView.node.on(\"scroll-to-bottom\", this.onScrollViewScrollToBottom, this);\r\n        // this.scrollView.node.on(\"scroll-to-left\", this.onScrollViewScrollToLeft, this);\r\n        // this.scrollView.node.on(\"scroll-to-right\", this.onScrollViewScrollToRight, this);\r\n        this.scrollView.node.on(\"scrolling\", this.onScrollViewScrolling, this);\r\n        // this.scrollView.node.on(\"bounce-bottom\", this.onScrollViewBounceBottom, this);\r\n        // this.scrollView.node.on(\"bounce-left\", this.onScrollViewBounceLeft, this);\r\n        // this.scrollView.node.on(\"bounce-right\", this.onScrollViewBounceRight, this);\r\n        // this.scrollView.node.on(\"bounce-top\", this.onScrollViewBounceTop, this);\r\n        // this.scrollView.node.on(\"scroll-ended\", this.onScrollViewScrollEnd, this);\r\n        // this.scrollView.node.on(\"touch-up\", this.onScrollViewTouchUp, this);\r\n        // this.scrollView.node.on(\"scroll-ended-with-threshold\", this.onScrollViewScrollEndWithThreshold, this);\r\n        // this.scrollView.node.on(\"scroll-began\", this.onScrollViewScrollBeign, this);\r\n\r\n        this.scrollView.node.on(cc.Node.EventType.TOUCH_START, this.onTouchStart, this);\r\n        this.scrollView.node.on(cc.Node.EventType.TOUCH_MOVE, this.onTouchMove, this);\r\n        this.scrollView.node.on(cc.Node.EventType.TOUCH_END, this.onTouchEnd, this);\r\n        this.scrollView.node.on(cc.Node.EventType.TOUCH_CANCEL, this.onTouchCancel, this);\r\n    }\r\n\r\n    onDisable() {\r\n        // this.scrollView.node.off(\"scroll-to-top\", this.onScrollViewScrollToTop, this);\r\n        // this.scrollView.node.off(\"scroll-to-bottom\", this.onScrollViewScrollToBottom, this);\r\n        // this.scrollView.node.off(\"scroll-to-left\", this.onScrollViewScrollToLeft, this);\r\n        // this.scrollView.node.off(\"scroll-to-right\", this.onScrollViewScrollToRight, this);\r\n        this.scrollView.node.off(\"scrolling\", this.onScrollViewScrolling, this);\r\n        // this.scrollView.node.off(\"bounce-bottom\", this.onScrollViewBounceBottom, this);\r\n        // this.scrollView.node.off(\"bounce-left\", this.onScrollViewBounceLeft, this);\r\n        // this.scrollView.node.off(\"bounce-right\", this.onScrollViewBounceRight, this);\r\n        // this.scrollView.node.off(\"bounce-top\", this.onScrollViewBounceTop, this);\r\n        // this.scrollView.node.off(\"scroll-ended\", this.onScrollViewScrollEnd, this);\r\n        // this.scrollView.node.off(\"touch-up\", this.onScrollViewTouchUp, this);\r\n        // this.scrollView.node.off(\"scroll-ended-with-threshold\", this.onScrollViewScrollEndWithThreshold, this);\r\n        // this.scrollView.node.off(\"scroll-began\", this.onScrollViewScrollBeign, this);\r\n\r\n        this.scrollView.node.off(cc.Node.EventType.TOUCH_START, this.onTouchStart, this);\r\n        this.scrollView.node.off(cc.Node.EventType.TOUCH_MOVE, this.onTouchMove, this);\r\n        this.scrollView.node.off(cc.Node.EventType.TOUCH_END, this.onTouchEnd, this);\r\n        this.scrollView.node.off(cc.Node.EventType.TOUCH_CANCEL, this.onTouchCancel, this);\r\n    }\r\n\r\n    private onScrollViewScrollToTop(event: cc.Event) {\r\n        console.log(\"ScrollToTop\");\r\n    }\r\n\r\n    private onScrollViewScrollToBottom(event: cc.Event) {\r\n        console.log(\"ScrollToBottom\");\r\n    }\r\n\r\n    private onScrollViewScrollToLeft(event: cc.Event) {\r\n        console.log(\"ScrollToLeft\");\r\n    }\r\n\r\n    private onScrollViewScrollToRight(event: cc.Event) {\r\n        console.log(\"ScrollToRight\");\r\n    }\r\n\r\n    private onScrollViewScrolling(event: cc.Event) {\r\n        //console.log(\"Scrolling\");\r\n        this.onScrollViewDidScroll();\r\n    }\r\n\r\n    private onScrollViewBounceBottom(event: cc.Event) {\r\n        console.log(\"BounceBottom\");\r\n    }\r\n    private onScrollViewBounceLeft(event: cc.Event) {\r\n        console.log(\"BounceLeft\");\r\n    }\r\n\r\n    private onScrollViewBounceTop(event: cc.Event) {\r\n        console.log(\"BounceTop\");\r\n    }\r\n\r\n    private onScrollViewBounceRight(event: cc.Event) {\r\n        console.log(\"BounceRight\");\r\n    }\r\n\r\n    private onScrollViewScrollEnd(event: cc.Event) {\r\n        console.log(\"ScrollEnd\");\r\n    }\r\n\r\n    private onScrollViewTouchUp(event: cc.Event) {\r\n        console.log(\"TouchUp\");\r\n    }\r\n\r\n    private onScrollViewScrollEndWithThreshold(event: cc.Event) {\r\n        console.log(\"ScrollEndWithThreshold\");\r\n    }\r\n\r\n    private onScrollViewScrollBeign(event: cc.Event) {\r\n        console.log(\"ScrollBeign\");\r\n    }\r\n\r\n    private _touchStartPos: cc.Vec2 = cc.v2(0, 0);\r\n    private _touchStartIndex: number = -1;\r\n    private onTouchStart(event: cc.Event.EventTouch) {\r\n        this._touchStartPos = event.touch.getLocationInView();\r\n        let nodePos = this.scrollView.content.convertToNodeSpaceAR(event.touch.getLocationInView());\r\n        this._touchStartIndex = this.getIndexFromOffSet(cc.v2(-nodePos.x, nodePos.y));\r\n    }\r\n\r\n    private onTouchMove(event: cc.Event.EventTouch) {\r\n        let worldPos = event.touch.getLocationInView();\r\n        let offset = worldPos.sub(this._touchStartPos);\r\n        if (offset.magSqr() >= 100) {\r\n            this._touchStartIndex = -1;\r\n        }\r\n    }\r\n\r\n    private onTouchEnd(event: cc.Event.EventTouch) {\r\n        let contetnPos = this.scrollView.content.convertToNodeSpaceAR(event.touch.getLocationInView());\r\n        let index = this.getIndexFromOffSet(cc.v2(-contetnPos.x, contetnPos.y));\r\n        if (this._touchStartIndex == index) {\r\n            let cell = this.getCellAtIndex(index);\r\n            if (cell) {\r\n                this._delegate && this._delegate.tableCellTouched(this, cell);\r\n            }\r\n        }\r\n    }\r\n    private onTouchCancel(event: cc.Event) {\r\n        this._touchStartIndex = -1;\r\n    }\r\n\r\n    private updateCellPositions() {\r\n        if (!this._dataSource) {\r\n            return\r\n        }\r\n\r\n        this._cellPositions.length = 0;\r\n        let count = this._dataSource.numberOfCellsInTableView(this);\r\n        if (count > 0) {\r\n            let currentPos = 0;\r\n            for (let i = 0; i < count; i++) {\r\n                this._cellPositions.push(currentPos);\r\n                let cellSize = this._dataSource.tableCellSizeForIndex(this, i);\r\n\r\n                switch (this._direction) {\r\n                    case TableViewDirection.Horizontal: {\r\n                        currentPos += cellSize.width;\r\n                    }\r\n                        break;\r\n                    case TableViewDirection.Vertical: {\r\n                        currentPos += cellSize.height;\r\n                    }\r\n                        break;\r\n                }\r\n            }\r\n            this._cellPositions.push(currentPos);\r\n        }\r\n\r\n        let size = cc.size(0, 0);\r\n        if (count > 0) {\r\n            let maxPosition = this._cellPositions[count];\r\n            let viewSize = this.getViewSize();\r\n\r\n            switch (this._direction) {\r\n                case TableViewDirection.Horizontal: {\r\n                    size = cc.size(maxPosition, viewSize.height);\r\n                }\r\n                    break;\r\n                case TableViewDirection.Vertical: {\r\n                    size = cc.size(viewSize.width, maxPosition);\r\n                }\r\n                    break;\r\n            }\r\n        }\r\n        this.scrollView.content.setContentSize(size);\r\n\r\n        switch (this._direction) {\r\n            case TableViewDirection.Horizontal: {\r\n                this.scrollView.content.parent.setAnchorPoint(0, 0.5);\r\n                this.scrollView.content.setAnchorPoint(0, 0.5);\r\n            }\r\n                break;\r\n            case TableViewDirection.Vertical: {\r\n                this.scrollView.content.parent.setAnchorPoint(0.5, 1);\r\n                this.scrollView.content.setAnchorPoint(0.5, 1);\r\n            }\r\n                break;\r\n        }\r\n    }\r\n\r\n    private getViewSize(): cc.Size {\r\n        return this.scrollView.node.getContentSize();\r\n    }\r\n\r\n    private getContentOffset(): cc.Vec2 {\r\n        let contentPos = this.scrollView.content.getPosition();\r\n        return contentPos;\r\n    }\r\n\r\n    private getContentSize(): cc.Size {\r\n        return this.scrollView.content.getContentSize();\r\n    }\r\n\r\n    private getOffsetForIndex(index: number): cc.Vec2 {\r\n        let pos = this._cellPositions[index];\r\n\r\n        switch (this._direction) {\r\n            case TableViewDirection.Horizontal: {\r\n                return cc.v2(pos, 0);\r\n            }\r\n                break\r\n            case TableViewDirection.Vertical: {\r\n                return cc.v2(0, -pos);\r\n            }\r\n                break\r\n        }\r\n    }\r\n\r\n    private getIndexFromOffSet(offset: cc.Vec2) {\r\n        if (!this._dataSource) {\r\n            return -1\r\n        }\r\n        let low = 0;\r\n        let high = this._dataSource.numberOfCellsInTableView(this) - 1;\r\n\r\n        let search = offset.y;\r\n        switch (this._direction) {\r\n            case TableViewDirection.Horizontal: {\r\n                search = -offset.x;\r\n            }\r\n                break;\r\n            case TableViewDirection.Vertical: {\r\n                search = offset.y;\r\n            }\r\n                break;\r\n        }\r\n        while (high >= low) {\r\n            let index = low + Math.floor((high - low) / 2);\r\n            let cellStart = this._cellPositions[index];\r\n            let cellEnd = this._cellPositions[index + 1];\r\n            if (search >= cellStart && search <= cellEnd) {\r\n                return index;\r\n            } else if (search < cellStart) {\r\n                high = index - 1;\r\n            } else {\r\n                low = index + 1;\r\n            }\r\n        }\r\n\r\n        if (low <= 0) {\r\n            return 0;\r\n        }\r\n\r\n        if (high >= this._dataSource.numberOfCellsInTableView(this) - 1) {\r\n            return this._dataSource.numberOfCellsInTableView(this) - 1;\r\n        }\r\n\r\n        return -1;\r\n    }\r\n\r\n\r\n    private onScrollViewDidScroll() {\r\n        if (!this._dataSource) {\r\n            return\r\n        }\r\n        let startIndex = 0;\r\n        let endIndex = 0;\r\n        let minIndex = 0;\r\n        let maxIndex = Math.max(this._dataSource.numberOfCellsInTableView(this) - 1, 0);\r\n\r\n        let startOffset = this.getContentOffset();\r\n        startIndex = Math.max(this.getIndexFromOffSet(startOffset), minIndex);\r\n\r\n        let viewSize = this.getViewSize();\r\n        let endOffset = startOffset.add(cc.v2(viewSize.width, 0))\r\n        switch (this._direction) {\r\n            case TableViewDirection.Horizontal:\r\n                endOffset = startOffset.sub(cc.v2(viewSize.width, 0))\r\n                break;\r\n            case TableViewDirection.Vertical:\r\n                endOffset = startOffset.add(cc.v2(0, viewSize.height))\r\n                break;\r\n        }\r\n        endIndex = Math.min(this.getIndexFromOffSet(endOffset), maxIndex);\r\n\r\n\r\n        for (let index = 0; index < this._usedCells.length; index++) {\r\n            let cell = this._usedCells[index];\r\n            if (cell.getIndex() < startIndex || cell.getIndex() > endIndex) {\r\n                this.removeCell(cell);\r\n                index -= 1;\r\n            }\r\n        }\r\n\r\n        for (let index = startIndex; index <= endIndex; index++) {\r\n            if (this.getCellAtIndex(index)) {\r\n                continue;\r\n            }\r\n            this.updateCellAtIndex(index);\r\n        }\r\n\r\n        //console.log(\"onScrollViewDidScroll\", this._freedCells.length, this._usedCells.length);\r\n    }\r\n\r\n    private setIndexForCell(index: number, cell: TableViewCell) {\r\n\r\n        switch (this._direction) {\r\n            case TableViewDirection.Horizontal: {\r\n                cell.node.setAnchorPoint(0, 0.5);\r\n            }\r\n                break;\r\n            case TableViewDirection.Vertical: {\r\n                cell.node.setAnchorPoint(0.5, 1);\r\n            }\r\n                break;\r\n        }\r\n\r\n        let pos = this.getOffsetForIndex(index);\r\n        cell.node.setPosition(pos);\r\n        cell.setIndex(index);\r\n    }\r\n\r\n\r\n\r\n    public getCellAtIndex(index: number): TableViewCell {\r\n        for (let i = 0; i < this._usedCells.length; i++) {\r\n            let element = this._usedCells[i];\r\n            if (element.getIndex() == index) {\r\n                return element;\r\n            }\r\n        }\r\n        return null;\r\n    }\r\n\r\n    private addCell(cell: TableViewCell) {\r\n        // cell.node.active = true;\r\n        if (cell.node.parent != this.scrollView.content) {\r\n            this.scrollView.content.addChild(cell.node);\r\n        }\r\n        this._usedCells.splice(cell.getIndex(), 0, cell)\r\n    }\r\n    private removeCell(cell: TableViewCell) {\r\n        this._freedCells.push(cell);\r\n        let index = this._usedCells.indexOf(cell);\r\n        if (index != -1) {\r\n            this._usedCells.splice(index, 1);\r\n        }\r\n        cell.reset();\r\n\r\n        if (this._useFastMode) {\r\n            cell.node.removeFromParent(false);\r\n        } else {\r\n            cell.node.setPosition(cc.v2(-10000, -10000));\r\n            // cell.node.active = false;\r\n        }\r\n    }\r\n\r\n    public updateCellAtIndex(index: number) {\r\n        if (!this._dataSource) {\r\n            return\r\n        }\r\n\r\n        let cell = this.getCellAtIndex(index);\r\n        if (cell) {\r\n            this.removeCell(cell);\r\n        }\r\n        if (index >= 0 && index < this._dataSource.numberOfCellsInTableView(this)) {\r\n            let cell = this._dataSource.tableCellAtIndex(this, index);\r\n            this.setIndexForCell(index, cell);\r\n            this.addCell(cell);\r\n        }\r\n    }\r\n    public insertCellAtIndex(index: number) {\r\n        this.reload();\r\n    }\r\n\r\n    public removeCellAtIndex(index: number) {\r\n        this.reload();\r\n    }\r\n\r\n    private _dataSource: TableViewDataSource = null;\r\n    public setDataSource(dataSource: TableViewDataSource): void {\r\n        this._dataSource = dataSource;\r\n        this.reload();\r\n    }\r\n\r\n    private _delegate: TableViewDelegate = null;\r\n    public setDelegate(delegate: TableViewDelegate): void {\r\n        this._delegate = delegate;\r\n    }\r\n\r\n    public init(dataSource: TableViewDataSource, delegate?: TableViewDelegate) {\r\n        this.setDataSource(dataSource);\r\n        this.setDelegate(delegate);\r\n    }\r\n\r\n    public reload() {\r\n\r\n        for (let index = 0; index < this._usedCells.length; index++) {\r\n            let cell = this._usedCells[index];\r\n            this._freedCells.push(cell);\r\n            cell.reset();\r\n            cell.node.removeFromParent(false);\r\n        }\r\n        this._usedCells.length = 0;\r\n\r\n        this.updateCellPositions();\r\n        this.onScrollViewDidScroll()\r\n    }\r\n\r\n    public dequeneCell(): TableViewCell {\r\n        if (this._freedCells.length > 0) {\r\n            let cell = this._freedCells[0];\r\n            this._freedCells.splice(0, 1);\r\n            return cell;\r\n        }\r\n        return null;\r\n    }\r\n\r\n    public getTopCellInSight(): TableViewCell {\r\n        if (this._usedCells.length <= 0) {\r\n            return null;\r\n        }\r\n        let minIndex = 0;\r\n        for (let index = 0; index < this._usedCells.length; index++) {\r\n            let cell = this._usedCells[index];\r\n            if (cell.getIndex() < this._usedCells[minIndex].getIndex()) {\r\n                minIndex = index;\r\n            }\r\n        }\r\n        return this._usedCells[minIndex]\r\n    }\r\n\r\n    public getBottomCellInSight(): TableViewCell {\r\n        if (this._usedCells.length <= 0) {\r\n            return null;\r\n        }\r\n        let minIndex = 0;\r\n        for (let index = 0; index < this._usedCells.length; index++) {\r\n            let cell = this._usedCells[index];\r\n            if (cell.getIndex() > this._usedCells[minIndex].getIndex()) {\r\n                minIndex = index;\r\n            }\r\n        }\r\n        return this._usedCells[minIndex];\r\n    }\r\n\r\n    public stopAutoScroll() {\r\n        this.scrollView.stopAutoScroll();\r\n    }\r\n\r\n    public scrollTo(anchor: cc.Vec2, timeInSecond?: number, attenuated?: boolean) {\r\n        this.scrollView.scrollTo(anchor, timeInSecond, attenuated);\r\n        this.onScrollViewDidScroll();\r\n    }\r\n    public scrollToIndex(index: number, timeInSecond?: number, attenuated?: boolean) {\r\n        let offset = this.getOffsetForIndex(index)\r\n        switch (this._direction) {\r\n            case TableViewDirection.Horizontal:\r\n                this.scrollView.scrollToOffset(cc.v2(offset.x, offset.y), timeInSecond, attenuated);\r\n                break;\r\n            case TableViewDirection.Vertical:\r\n                this.scrollView.scrollToOffset(cc.v2(offset.x, -offset.y), timeInSecond, attenuated);\r\n                break;\r\n            default:\r\n                break;\r\n        }\r\n        this.onScrollViewDidScroll();\r\n    }\r\n\r\n    public scrollToTop(timeInSecond?: number, attenuated?: boolean) {\r\n        this.scrollView.scrollToTop(timeInSecond, attenuated);\r\n    }\r\n\r\n    public getScrollOffset(): cc.Vec2 {\r\n        return this.scrollView.getScrollOffset();\r\n    }\r\n\r\n    public getMaxScrollOffset(): cc.Vec2 {\r\n        return this.scrollView.getMaxScrollOffset()\r\n    }\r\n\r\n\r\n}\r\n","import AssetCache from \"../AssetCache/AssetCache\";\r\n\r\nexport class TileLayer {\r\n    id: number;\r\n    name: string;\r\n    type: string;\r\n    width: number;\r\n    height: number;\r\n    x: number;\r\n    y: number;\r\n    GIDs: number[];\r\n\r\n    public static createWithTmxData(data: any): TileLayer {\r\n        let instance = new TileLayer()\r\n        if (data) {\r\n            instance.id = data.id || 0;\r\n            instance.name = data.name || \"\";\r\n            instance.type = data.type || \"\";\r\n            instance.width = data.width || 0;\r\n            instance.height = data.height || 0;\r\n            instance.x = data.x || 0;\r\n            instance.y = data.y || 0;\r\n            instance.GIDs = data.data || [];\r\n        }\r\n        return instance;\r\n    }\r\n\r\n    public getGid(pos: cc.Vec2): number {\r\n        let index = Math.floor(pos.y) * this.width + Math.floor(pos.x);\r\n        if (index >= 0 && index < this.GIDs.length) {\r\n            return this.GIDs[index];\r\n        }\r\n        return 0;\r\n    }\r\n}\r\n\r\nexport class TileMapProperty {\r\n    name: string;\r\n    type: string;\r\n    value: any;\r\n\r\n    public static createWithTmxData(data: any): TileMapProperty {\r\n        let instance = new TileMapProperty()\r\n        if (data) {\r\n            instance.name = data.name || \"\";\r\n            instance.type = data.type || \"\";\r\n            instance.value = data.value || null;\r\n        }\r\n        return instance;\r\n    }\r\n}\r\n\r\nexport class TileMapObject {\r\n    id: number\r\n    name: string\r\n    width: number\r\n    height: number\r\n    x: number;\r\n    y: number;\r\n    propertyDict: { [key: string]: TileMapProperty }\r\n    gid: number\r\n    polyline: Array<{ x: number, y: number }>\r\n\r\n    public static createWithTmxData(data: any): TileMapObject {\r\n        let instance = new TileMapObject()\r\n        if (data) {\r\n            instance.id = data.id || 0;\r\n            instance.name = data.name || \"\";\r\n            instance.width = data.width || 0;\r\n            instance.height = data.height || 0;\r\n            instance.x = data.x || 0;\r\n            instance.y = data.y || 0;\r\n            instance.propertyDict = {}\r\n            if (data.properties) {\r\n                for (const property of data.properties) {\r\n                    instance.propertyDict[property.name] = TileMapProperty.createWithTmxData(property);\r\n                }\r\n            }\r\n            instance.gid = data.gid || 0;\r\n            instance.polyline = data.polyline || [];\r\n        }\r\n        return instance;\r\n    }\r\n\r\n    public getProperty(key: string): TileMapProperty {\r\n        return this.propertyDict[key];\r\n    }\r\n}\r\n\r\nexport class ObjectLayer {\r\n    id: number;\r\n    name: string;\r\n    type: string;\r\n    x: number;\r\n    y: number;\r\n    objects: Array<TileMapObject>;\r\n\r\n    public static createWithTmxData(data: any): ObjectLayer {\r\n        let instance = new ObjectLayer()\r\n        if (data) {\r\n            instance.id = data.id || 0;\r\n            instance.name = data.name || \"\";\r\n            instance.type = data.type || \"\";\r\n            instance.x = data.x || 0;\r\n            instance.y = data.y || 0;\r\n            instance.objects = []\r\n            if (data.objects) {\r\n                for (const object of data.objects) {\r\n                    instance.objects.push(TileMapObject.createWithTmxData(object));\r\n                }\r\n            }\r\n\r\n        }\r\n        return instance;\r\n    }\r\n\r\n    public getObjectInArea(rect: cc.Rect): TileMapObject[] {\r\n        let result: TileMapObject[] = [];\r\n        for (let objectInfo of this.objects) {\r\n            let objectRect = cc.rect(objectInfo.x, objectInfo.y, objectInfo.width, objectInfo.height);\r\n            if (objectInfo.gid != 0) {\r\n                objectRect.y -= objectRect.height;\r\n            }\r\n            if (objectRect.intersects(rect)) {\r\n                result.push(objectInfo);\r\n            }\r\n        }\r\n        return result;\r\n    }\r\n\r\n}\r\n\r\nexport class TilesetProperty {\r\n    id: number;\r\n    propertyDict: { [key: string]: TileMapProperty };\r\n\r\n    public static createWithTmxData(data: any): TilesetProperty {\r\n        let instance = new TilesetProperty()\r\n        if (data) {\r\n            instance.id = data.id || 0;\r\n            instance.propertyDict = {}\r\n            if (data.properties) {\r\n                for (const property of data.properties) {\r\n                    instance.propertyDict[property.name] = TileMapProperty.createWithTmxData(property);\r\n                }\r\n            }\r\n\r\n        }\r\n        return instance;\r\n    }\r\n\r\n    public getProperty(key: string): TileMapProperty {\r\n        return this.propertyDict[key];\r\n    }\r\n}\r\n\r\nexport default class TiledMapJsonPhraser {\r\n\r\n    public static createWithFile(bundleID: string, url: string): TiledMapJsonPhraser {\r\n        let instance = new TiledMapJsonPhraser(bundleID, url);\r\n        return instance;\r\n    }\r\n\r\n    private _mapSize: cc.Size = null;\r\n    private _tileSize: cc.Size = null;\r\n    private _tileLayers: { [key: string]: TileLayer } = {};\r\n    private _objectLayers: { [key: string]: ObjectLayer } = {};\r\n    private _tilesetProperties: { [key: number]: TilesetProperty } = {};\r\n\r\n    private _bundleID: string = \"\"\r\n    private _url: string = \"\"\r\n    protected constructor(bundleID: string, url: string) {\r\n        this._bundleID = bundleID;\r\n        this._url = url;\r\n        let jsonAsset: cc.JsonAsset = AssetCache.getInstance().getAssetSync(bundleID, url, cc.JsonAsset) as cc.JsonAsset\r\n        this.initWithData(jsonAsset.json);\r\n    }\r\n\r\n    protected initWithData(json: Object) {\r\n        this.initMapInfo(json);\r\n        this.initLayers(json);\r\n        this.initTileProperties(json);\r\n    }\r\n\r\n    private initMapInfo(jsonObj: Object): void {\r\n        this._mapSize = cc.size(jsonObj['width'] || 0, jsonObj['height'] || 0);\r\n        this._tileSize = cc.size(jsonObj['tilewidth'] || 0, jsonObj['tilewidth'] || 0);\r\n    }\r\n\r\n    private initLayers(jsonObj: Object): void {\r\n        this._tileLayers = {};\r\n        let layers: Object = jsonObj['layers'];\r\n        if (layers) {\r\n            for (let key in layers) {\r\n                let layer: any = layers[key];\r\n                let type: string = layer['type'];\r\n                if (type == 'tilelayer') {\r\n                    let tileLayer = TileLayer.createWithTmxData(layer)\r\n                    this._tileLayers[tileLayer.name] = tileLayer;\r\n                } else if (type == 'objectgroup') {\r\n                    let objectLayer = ObjectLayer.createWithTmxData(layer);\r\n                    this._objectLayers[objectLayer.name] = objectLayer;\r\n                }\r\n            }\r\n        }\r\n\r\n    }\r\n\r\n    private initTileProperties(genericValue: Object): void {\r\n        this._tilesetProperties = {};\r\n        let tileSets: Object[] = genericValue['tilesets'];\r\n\r\n        if (tileSets) {\r\n            for (let objItem of tileSets) {\r\n                let firstGID: number = objItem['firstgid'];\r\n\r\n                if (objItem.hasOwnProperty('source')) {\r\n                    let source: string = objItem['source'];\r\n                    let fileName = source.substr(0, source.lastIndexOf('.'));\r\n                    let tilesetUrl: string = this._url.substr(0, this._url.lastIndexOf('/') + 1) + fileName;\r\n                    let jsonAsset: cc.JsonAsset = AssetCache.getInstance().getAssetSync(this._bundleID, tilesetUrl, cc.JsonAsset) as cc.JsonAsset\r\n                    let tiles = jsonAsset.json.tiles\r\n                    for (let index = 0; index < tiles.length; index++) {\r\n                        let tilesetProperty = TilesetProperty.createWithTmxData(tiles[index]);\r\n                        tilesetProperty.id = firstGID + index;\r\n                        this._tilesetProperties[tilesetProperty.id] = tilesetProperty;\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    public getMapSize(): cc.Size {\r\n        return this._mapSize;\r\n    }\r\n\r\n    public getTileSize(): cc.Size {\r\n        return this._tileSize;\r\n    }\r\n\r\n    public getTileLayer(name: string): TileLayer {\r\n        if (this._tileLayers[name]) {\r\n            return this._tileLayers[name];\r\n        }\r\n        return null;\r\n    }\r\n\r\n    public getGid(layerName: string, pos: cc.Vec2): number {\r\n        let layer = this.getTileLayer(layerName);\r\n        if (layer) {\r\n            return layer.getGid(pos);\r\n        }\r\n        return 0;\r\n    }\r\n\r\n    public getObjectLayer(name: string): ObjectLayer {\r\n        if (this._objectLayers[name]) {\r\n            return this._objectLayers[name];\r\n        }\r\n        return null;\r\n    }\r\n\r\n    public getObjectInfos(name: string, pos: cc.Vec2): TileMapObject[] {\r\n        let layer = this.getObjectLayer(name);\r\n        if (layer) {\r\n            let cellRect = cc.rect(\r\n                pos.x * this._tileSize.width + 1,\r\n                pos.y * this._tileSize.height + 1,\r\n                this._tileSize.width - 2,\r\n                this._tileSize.height - 2);\r\n            return layer.getObjectInArea(cellRect)\r\n        }\r\n        return [];\r\n    }\r\n\r\n    public getTilesetPropertyWithGID(gid: number): TilesetProperty {\r\n        return this._tilesetProperties[gid];\r\n    }\r\n\r\n    public getTilesetProperty(layerName: string, pos: cc.Vec2): TilesetProperty {\r\n        let gid = this.getGid(layerName, pos);\r\n        if (gid != 0) {\r\n            return this.getTilesetPropertyWithGID(gid);\r\n        }\r\n        return null;\r\n    }\r\n}\r\n","import DeviceTypeUtils from \"../../Utils/DeviceTypeUtils\";\r\n\r\n\r\n\r\nconst { ccclass, property } = cc._decorator;\r\n\r\n@ccclass\r\nexport default class UITopViewAdaptor extends cc.Component {\r\n\r\n    // LIFE-CYCLE CALLBACKS:\r\n    private _adapted: boolean = false\r\n    start() {\r\n        this.updateAlignment();\r\n    }\r\n\r\n    // update (dt) {}\r\n\r\n    public updateAlignment() {\r\n\r\n        if (this._adapted) {\r\n            return;\r\n        }\r\n        this._adapted = true;\r\n        let delta = DeviceTypeUtils.getTopViewAdpatHeight();\r\n        if (delta > 0) {\r\n            let widget: cc.Widget = this.getComponent(cc.Widget);\r\n            if (widget) {\r\n                let beforeAdaptTop = 0;\r\n                if (widget.isAlignTop) {\r\n                    beforeAdaptTop = widget.top;\r\n                }\r\n                widget.isAlignTop = true;\r\n                widget.top = beforeAdaptTop + delta;\r\n                widget.updateAlignment();\r\n            } else {\r\n                let beforePos = this.node.getPosition();\r\n                this.node.setPosition(cc.v2(beforePos.x, beforePos.y - delta));\r\n            }\r\n        }\r\n    }\r\n\r\n\r\n}\r\n","import Heap from \"../STL/Heap\";\r\nexport default class Utils {\r\n    /**\r\n     * \r\n        let samples: Sample[] = [\r\n            { value: 0, weight: 2 },\r\n            { value: 1, weight: 2 },\r\n            { value: 2, weight: 3 },\r\n            { value: 3, weight: 20 },\r\n            { value: 4, weight: 15 },\r\n            { value: 5, weight: 20 },\r\n            { value: 6, weight: 50 },\r\n            { value: 7, weight: 60 },\r\n            { value: 8, weight: 7 },\r\n            { value: 9, weight: 5 },\r\n        ]\r\n\r\n        let count: number[] = [];\r\n        for (let index = 0; index < 10; index++) {\r\n            count[index] = 0;\r\n        }\r\n\r\n        for (let i = 0; i < 100000; i++) {\r\n            let result = Utils.getNSampleWithHeap(samples, 3);\r\n            for (const samp of result) {\r\n                count[samp.value]++;\r\n            }\r\n        }\r\n\r\n        let percentage: number[] = [];\r\n        for (let i = 0; i < 10; i++) {\r\n            percentage.push(count[i] / 300000);\r\n        }\r\n\r\n        a-res 蓄水池算法 加权随机采样，无放回\r\n     * @param samples \r\n     * @param count \r\n     */\r\n    public static getNSampleWithHeap<T>(samples: Array<{ value: T, weight: number }>, count: number): Array<T> {\r\n\r\n        let minHeap: Heap<{ value: T, weight: number }> = new Heap<{ value: T, weight: number }>(\r\n            (a: { value: T, weight: number }, b: { value: T, weight: number }) => {\r\n                return a.weight < b.weight;\r\n            },\r\n            (a: { value: T, weight: number }, b: { value: T, weight: number }) => {\r\n                return a.weight == b.weight;\r\n            })\r\n\r\n        for (const sample of samples) {\r\n            let priority = Math.log(Math.random()) / sample.weight;;\r\n\r\n            if (minHeap.length() < count) {\r\n                let newSample: Object = {\r\n                    value: sample.value,\r\n                    weight: priority\r\n                };\r\n                minHeap.push(newSample as { value: T, weight: number })\r\n            } else if (priority > minHeap.peek().weight) {\r\n                let newSample: Object = {\r\n                    value: sample.value,\r\n                    weight: priority\r\n                };\r\n                minHeap.push(newSample as { value: T, weight: number });\r\n                minHeap.pop();\r\n            }\r\n        }\r\n\r\n        let result: T[] = [];\r\n        while (!minHeap.isEmpty()) {\r\n            result.push(minHeap.peek().value);\r\n            minHeap.pop();\r\n        }\r\n        return result;\r\n    }\r\n\r\n\r\n    public static getNSample<T>(samples: Array<{ value: T, weight: number }>, amount: number): Array<T> {\r\n\r\n        let indexes: { index: number, priority: number }[] = [];\r\n        for (let i = 0; i < samples.length; i++) {\r\n            let priority = Math.log(Math.random()) / samples[i].weight;\r\n            if (indexes.length < amount) {\r\n                indexes.push({ index: i, priority: priority });\r\n            } else {\r\n                let minIndex = this.getMinPriorityIndex(indexes);\r\n                if (priority > indexes[minIndex].priority) {\r\n                    indexes[minIndex].index = i;\r\n                    indexes[minIndex].priority = priority;\r\n                }\r\n            }\r\n        }\r\n\r\n        let result: T[] = [];\r\n        for (let i = 0; i < indexes.length; i++) {\r\n            result.push(samples[indexes[i].index].value);\r\n        }\r\n        return result;\r\n    }\r\n\r\n    private static getMinPriorityIndex(array: ReadonlyArray<{ index: number, priority: number }>): number {\r\n        let minIndex = -1;\r\n        for (let index = 0; index < array.length; index++) {\r\n            if (minIndex == -1) {\r\n                minIndex = index;\r\n            } else if (array[index].priority < array[minIndex].priority) {\r\n                minIndex = index;\r\n            }\r\n        }\r\n        return minIndex;\r\n    }\r\n}\r\n","// Learn TypeScript:\r\n//  - [Chinese] https://docs.cocos.com/creator/manual/zh/scripting/typescript.html\r\n//  - [English] http://www.cocos2d-x.org/docs/creator/manual/en/scripting/typescript.html\r\n// Learn Attribute:\r\n//  - [Chinese] https://docs.cocos.com/creator/manual/zh/scripting/reference/attributes.html\r\n//  - [English] http://www.cocos2d-x.org/docs/creator/manual/en/scripting/reference/attributes.html\r\n// Learn life-cycle callbacks:\r\n//  - [Chinese] https://docs.cocos.com/creator/manual/zh/scripting/life-cycle-callbacks.html\r\n//  - [English] http://www.cocos2d-x.org/docs/creator/manual/en/scripting/life-cycle-callbacks.html\r\n\r\nimport EntityBase from \"../Entity/EntityBase\";\r\nimport Message from \"../FSM/Message\";\r\n\r\nconst { ccclass, property } = cc._decorator;\r\n\r\n@ccclass\r\nexport default class WorldBase extends cc.Component {\r\n\r\n    public static readonly InvalidID = -1;\r\n    private static _nextValidID: number = 0;\r\n    public getNextValidID(): number {\r\n        WorldBase._nextValidID += 1;\r\n        return WorldBase._nextValidID;\r\n    }\r\n\r\n    private _entitiesDict: Object = {};\r\n\r\n    public addEntityWithIdentifier(entity: EntityBase, identifier: number): void {\r\n        this.removeEntityWithIdentifier(identifier);\r\n        this._entitiesDict[identifier] = entity;\r\n    }\r\n\r\n    public removeEntityWithIdentifier(identifier: number): EntityBase {\r\n        let removedEntity = this._entitiesDict[identifier];\r\n        delete this._entitiesDict[identifier];\r\n        return removedEntity;\r\n    }\r\n\r\n    public getEntityWithIdentifier(identifier: number): EntityBase {\r\n        return this._entitiesDict[identifier];\r\n    }\r\n\r\n    public dispatchMessage(entityID: number, message: Message) {\r\n        const entity: EntityBase = this.getEntityWithIdentifier(entityID);\r\n        if (entity) {\r\n            this.dispatchMessageWithEntity(entity, message);\r\n        }\r\n    }\r\n\r\n    public dispatchMessageWithEntity(entity: EntityBase, message: Message) {\r\n        if (entity) {\r\n            entity.onMessage(message);\r\n        }\r\n    }\r\n}\r\n"],"file":"index.js"}