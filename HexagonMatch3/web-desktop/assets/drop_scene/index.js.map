{"version":3,"sources":["assets/bundles/drop_scene/script/Game/Unit/Candy/Base/CandyBase.ts","assets/bundles/drop_scene/script/Game/Unit/Candy/Cake/CandyCake.ts","assets/bundles/drop_scene/script/Game/Unit/Candy/CandyFactory.ts","assets/bundles/drop_scene/script/Game/Unit/Candy/Fruit/CandyFruit.ts","assets/bundles/drop_scene/script/Game/Layer/CandyLayer/CandyLayer.ts","assets/bundles/drop_scene/script/Game/Unit/Candy/Base/State/CandyStateBorn.ts","assets/bundles/drop_scene/script/Game/Unit/Candy/Base/State/CandyStateDrop.ts","assets/bundles/drop_scene/script/Game/Unit/Candy/Base/State/CandyStateNormal.ts","assets/bundles/drop_scene/script/Game/Unit/Candy/Base/State/CandyStateTeleport.ts","assets/bundles/drop_scene/script/Game/Utils/DropSceneAssetCache.ts","assets/bundles/drop_scene/script/Game/Utils/DropSceneMath.ts","assets/bundles/drop_scene/script/DropScene.ts","assets/bundles/drop_scene/script/Game/Unit/Floor/Base/FloorBase.ts","assets/bundles/drop_scene/script/Game/Unit/Floor/Entrance/FloorEntrance.ts","assets/bundles/drop_scene/script/Game/Unit/Floor/Exit/FloorExit.ts","assets/bundles/drop_scene/script/Game/Unit/Floor/FloorFactory.ts","assets/bundles/drop_scene/script/Game/Unit/Floor/Fixed/FloorFixed.ts","assets/bundles/drop_scene/script/Game/Layer/FloorLayer/FloorLayer.ts","assets/bundles/drop_scene/script/Game/Unit/Floor/Base/State/FloorStateNormal.ts","assets/bundles/drop_scene/script/Game/Unit/Frame/Base/FrameBase.ts","assets/bundles/drop_scene/script/Game/Unit/Frame/FrameFactory.ts","assets/bundles/drop_scene/script/Game/Layer/FrameLayer/FrameLayer.ts","assets/bundles/drop_scene/script/Game/Unit/Frame/Normal/FrameNormal.ts","assets/bundles/drop_scene/script/Game/Unit/Frame/Base/State/FrameStateNormal.ts","assets/bundles/drop_scene/script/Game/Grid/State/Drop/GridDropLogic.ts","assets/bundles/drop_scene/script/Game/Grid/State/Drop/GridGenerateLogic.ts","assets/bundles/drop_scene/script/Game/Layer/Base/GridLayerBase.ts","assets/bundles/drop_scene/script/Game/Grid/State/Base/GridStateBase.ts","assets/bundles/drop_scene/script/Game/Grid/State/Create/GridStateCreate.ts","assets/bundles/drop_scene/script/Game/Grid/State/Drop/GridStateDrop.ts","assets/bundles/drop_scene/script/Game/Grid/State/Base/GridStateMachine.ts","assets/bundles/drop_scene/script/Game/Grid/State/Normal/GridStateNormal.ts","assets/bundles/drop_scene/script/Game/Grid/State/Base/GridStateNull.ts","assets/bundles/drop_scene/script/Game/Grid/Grid.ts","assets/bundles/drop_scene/script/Game/Unit/Mark/Base/MarkBase.ts","assets/bundles/drop_scene/script/Game/Unit/Mark/MarkFactory.ts","assets/bundles/drop_scene/script/Game/Unit/Mark/Base/State/MarkStateNormal.ts","assets/bundles/drop_scene/script/Game/Unit/Base/UnitBase.ts","assets/bundles/drop_scene/script/Game/Unit/Base/UnitDefines.ts","assets/bundles/drop_scene/script/Game/Unit/Base/State/UnitStateBase.ts","assets/bundles/drop_scene/script/Game/Unit/Base/State/UnitStateMachine.ts","assets/bundles/drop_scene/script/Game/Unit/Base/State/UnitStateNull.ts"],"names":[],"mappings":"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;AACI;AACA;AACA;AACH;AAED;AACI;AACA;AACA;AACA;AACI;AACA;AACH;AACJ;AAED;AACA;AAAK;AACD;AACA;AACI;AACI;AACA;AACI;AACA;AACA;AACH;AACJ;AACJ;AACJ;AACD;AACA;AACA;AACJ;AAEA;;;AAGG;AACK;AACJ;AACA;AACI;AACI;AACA;AACH;AACJ;AACL;AAGQ;AACJ;AACA;AACJ;AACQ;AACJ;AACA;AACA;AACI;AACH;AACD;AACJ;AAEQ;AACJ;AACA;AACI;AACI;AACA;AACA;AACI;AACA;AACA;AACA;AACH;AAED;AACI;AACA;AACA;AACA;AACH;AACJ;AACJ;AACL;AAEQ;AACJ;AACA;AACI;AACH;AAED;AACA;AACI;AACH;AAED;AACJ;AAEA;;;;AAIG;AACK;AACJ;AACA;AACI;AACA;AACI;AACA;AACA;AACI;AACA;AACA;AACA;AACI;AACA;AACA;AACH;AACJ;AAED;AACA;AACA;AACI;AACA;AACI;AACA;AACA;AACH;AACJ;AAED;AACA;AACA;AACI;AACA;AACA;AACI;AACA;AACI;AACA;AACA;AACH;AACJ;AACJ;AAED;AACA;AACA;AACI;AACA;AACA;AACI;AACA;AACI;AACA;AACA;AACH;AACJ;AACJ;AACJ;AACJ;AACD;AACJ;AAEA;;;;;AAKG;AACI;AAA6B;AAAqC;AACrE;AACI;AACH;AACD;AACI;AACH;AACD;AACA;AACI;AACI;AACA;AACH;AACJ;AACD;AACJ;AAEO;AACH;AACA;AACJ;AAEO;AACH;AACA;AACA;AACJ;AACJ;AAAA;;;;;;;;;;;;;;;;;;;;;;;;AC3QA;AACA;AACA;AAEA;AAEA;AAKA;AAA+C;AAA/C;AAAA;AASY;;AA6BZ;AArCkB;AACV;AACA;AACA;AACJ;AACU;AACN;AACJ;AAGO;AAEP;AAEO;AACH;AACA;AACA;AACI;AACI;AACA;AACA;AACI;AACA;AACI;AACA;AACA;AACA;AACA;AACA;AACA;AACH;AACJ;AACJ;AACJ;AACD;AACJ;AACJ;AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AC/CA;AAGM;AAEN;AAAA;AACI;AACA;AACA;AACA;AACJ;AAGA;AAAoD;AAApD;AAAA;AAEY;AAQA;AAQA;AAQA;;AAkEZ;AAzFI;AAAA;AACI;AACJ;AACA;AACI;AACJ;;;AAHC;AAMD;AAAA;AACI;AACJ;AACA;AACI;AACJ;;;AAHC;AAMD;AAAA;AACI;AACJ;AACA;AACI;AACJ;;;AAHC;AAOM;AACH;AACA;AACJ;AACO;AACH;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACJ;AAEO;AAAqC;AACxC;AACA;AACA;AACI;AACA;AACA;AACA;AACI;AACH;AACJ;AACL;AAEO;AAAgC;AACnC;AACA;AACJ;AAEO;AAA+B;AAClC;AACA;AACI;AACA;AACA;AACH;AACD;AACJ;AAEQ;AACJ;AACJ;AAEU;AACN;AACA;AACA;AACA;AACJ;AAEO;AACH;AACI;AACI;AACA;AACI;AACH;AACJ;AACJ;AACL;AA3F0B;AAD7B;AAC6B;AA4F9B;AA5FA;AAA8B;;;;;;;;;;;;;;;;;;;;;;;;ACd9B;AAGA;AAAA;AACI;AACA;AACA;AACA;AACJ;AAEA;AAA2C;AAA3C;AAAA;AAEY;;AA0CZ;AAzCW;AACH;AACJ;AAEU;AACN;AACJ;AAEO;AAEP;AACO;AACH;AACA;AACI;AACA;AACH;AACL;AACO;AAEP;AACO;AACH;AACJ;AACO;AAEP;AAEO;AAEP;AACO;AAEP;AACO;AAEP;AACO;AAEP;AAEJ;AAAA;;;;;;;;;;;;;;;;;;;;;;;;ACvDA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAGA;AACA;AACA;AACA;AAGA;AAA6C;AAA7C;AAAA;AAQY;AACA;AACA;AACA;;AAwJZ;AAjKkB;AACV;AACA;AACA;AACJ;AAMU;AACN;AACA;AACA;AACA;AACA;AACJ;AAEO;AAEH;AACA;AAEA;AACA;AAGA;AACA;AAGA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACJ;AAEQ;AACJ;AAEA;AACA;AACI;AACI;AACA;AACA;AACA;AACI;AAAK;AACD;AACA;AACI;AACH;AACD;AACI;AACH;AACJ;AAED;AACA;AACI;AACA;AACI;AACH;AACD;AACI;AACH;AACD;AACI;AACH;AACJ;AACJ;AACJ;AACJ;AAED;AAEA;AACI;AACA;AACA;AACA;AAEA;AACA;AACA;AACH;AAGD;AACI;AACA;AACI;AACA;AACA;AACA;AACI;AACI;AACH;AACJ;AAED;AACA;AACA;AACI;AACI;AACH;AACJ;AAED;AACA;AACI;AACA;AACH;AACJ;AACD;AACI;AACH;AACJ;AACL;AAEQ;AACJ;AACA;AACI;AACI;AACA;AACA;AACA;AACI;AACI;AACH;AACJ;AACD;AACA;AACI;AACH;AACJ;AACJ;AACL;AAEQ;AACJ;AACA;AACI;AACI;AACA;AACI;AACA;AACA;AACH;AACJ;AACJ;AACL;AACJ;AAAA;;;;;;;;;;;;;;;;;;;;;;;;ACrLA;AACA;AAEA;AACA;AACA;AACA;AAGA;AAA2C;AAA3C;AAAA;AAOY;AACA;AAaA;;AA8BZ;AAlDkB;AACV;AACA;AACA;AACJ;AAKU;AACN;AACA;AACA;AACJ;AAEO;AACH;AACA;AACJ;AAGO;AACH;AACA;AACA;AACI;AACI;AACA;AACI;AACH;AACJ;AACJ;AAGD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACI;AACH;AACL;AAEO;AACH;AACJ;AAEJ;AAAA;;;;;;;;;;;;;;;;;;;;;;;;AC7DA;AAKA;AAA8C;AAA9C;;AAkCA;AAjCkB;AACV;AACA;AACJ;AAEO;AACH;AACJ;AAEO;AACH;AACA;AACI;AACH;AACL;AACO;AACH;AACA;AACI;AACH;AACL;AACO;AACH;AACA;AACI;AACH;AACL;AACO;AACH;AACA;AACI;AACH;AACL;AACJ;AAAA;;;;;;;;;;;;;;;;;;;;;;;;ACtCA;AAGA;AAEA;AAA6C;AAA7C;AAAA;AAWY;;AA4BZ;AAtCkB;AACV;AACA;AACA;AACJ;AAEU;AACN;AACJ;AAIO;AACH;AACA;AACA;AACI;AACH;AACD;AACJ;AACO;AAEH;AACA;AACI;AACA;AACI;AACH;AACD;AACH;AAEL;AACO;AACH;AACJ;AA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","sourcesContent":["import UnitBase from \"../../Base/UnitBase\";\r\nimport { UnitCategory, UnitKind } from \"../../Base/UnitDefines\";\r\nimport CandyStateDrop from \"./State/CandyStateDrop\";\r\nimport CandyStateNormal from \"./State/CandyStateNormal\";\r\nimport CandyStateTeleport from \"./State/CandyStateTeleport\";\r\n\r\nconst { ccclass, property } = cc._decorator;\r\n\r\n@ccclass\r\nexport default class CandyBase extends UnitBase {\r\n\r\n    public teleportToLogicalPosition(pos: cc.Vec2) {\r\n        this.layer.moveUnit(this.getLogicalPostion(), pos, false);\r\n        this.setCurrentState(CandyStateTeleport.create(this.grid.getPixelPositionWithLogicalPositon(this.getLogicalPostion())))\r\n    }\r\n\r\n    public moveToLogicalPosition(pos: cc.Vec2) {\r\n        this.layer.moveUnit(this.getLogicalPostion(), pos, false);\r\n        this.setCurrentState(CandyStateDrop.create(this.grid.getPixelPositionWithLogicalPositon(this.getLogicalPostion())))\r\n    }\r\n\r\n    public canDrop(): boolean {\r\n        return true;\r\n    }\r\n\r\n    private _selected: boolean = false;\r\n    public getSelected(): boolean {\r\n        return this._selected;\r\n    }\r\n    public setSelected(selected: boolean) {\r\n        this._selected = selected;\r\n    }\r\n\r\n    protected initCandy(kind: UnitKind) {\r\n        super.initUnit(UnitCategory.Candy, kind);\r\n        this.setCurrentState(CandyStateNormal.create());\r\n        this.setSelected(false);\r\n    }\r\n}\r\n","\r\n\r\nimport DropSceneAssetCache from \"../../../Utils/DropSceneAssetCache\";\r\nimport { UnitKind } from \"../../Base/UnitDefines\";\r\nimport CandyBase from \"../Base/CandyBase\";\r\n\r\nconst { ccclass, property } = cc._decorator;\r\n\r\n@ccclass\r\nexport default class CandyCake extends CandyBase {\r\n    public static create(hp: number): CandyCake {\r\n        let res: cc.Prefab = DropSceneAssetCache.getPrefab(\"prefab/Game/Unit/Candy/Cake/CandyCake\")\r\n        if (res) {\r\n            let node: cc.Node = cc.instantiate(res);\r\n            if (node) {\r\n                let item = node.getComponent(CandyCake);\r\n                if (item) {\r\n                    item.initWithHealthPoint(hp);\r\n                    return item;\r\n                }\r\n            }\r\n        }\r\n        return null;\r\n    }\r\n\r\n    @property(cc.Sprite)\r\n    doll: cc.Sprite = null;\r\n\r\n    @property(cc.Node)\r\n    mark: cc.Node = null;\r\n\r\n    public canDrop(): boolean {\r\n        return false;\r\n    }\r\n\r\n    public setHp(hp: number) {\r\n        hp = Math.min(4, Math.max(1, hp));\r\n        super.setHp(hp);\r\n        let filename = \"texture/Game/Candy/Cake/6080\" + this.getHP().toString();\r\n        this.doll.spriteFrame = DropSceneAssetCache.getSpriteFrame(filename);\r\n    }\r\n\r\n    public setSelected(selected: boolean) {\r\n        super.setSelected(selected);\r\n        this.mark.active = this.getSelected();\r\n    }\r\n\r\n    protected initWithHealthPoint(hp: number) {\r\n        super.initCandy(UnitKind.CandyCake);\r\n        this.setHp(hp);\r\n    }\r\n\r\n}\r\n","\r\nimport { UnitColor, UnitKind } from \"../Base/UnitDefines\";\r\nimport CandyBase from \"./Base/CandyBase\";\r\nimport CandyCake from \"./Cake/CandyCake\";\r\nimport CandyFruit from \"./Fruit/CandyFruit\";\r\n\r\nexport default class CandyFactory {\r\n\r\n    public static createCandy(param: { [key: string]: any }): CandyBase {\r\n        let kind = param[\"kind\"];\r\n        switch (kind) {\r\n            case UnitKind.CandyFruit: {\r\n                let color: number = param[\"color\"] || UnitColor.Red;\r\n                return CandyFruit.create(color);\r\n            }\r\n                break;\r\n            case UnitKind.CandyCake: {\r\n                let hp: number = param[\"healthPoint\"] || 1;\r\n                return CandyCake.create(hp);\r\n            }\r\n                break;\r\n            default:\r\n                break;\r\n        }\r\n        return null;\r\n    }\r\n}\r\n","\r\nimport DropSceneAssetCache from \"../../../Utils/DropSceneAssetCache\";\r\nimport { UnitColor, UnitKind } from \"../../Base/UnitDefines\";\r\nimport CandyBase from \"../Base/CandyBase\";\r\n\r\n\r\n\r\n\r\nconst { ccclass, property } = cc._decorator;\r\n\r\n@ccclass\r\nexport default class CandyFruit extends CandyBase {\r\n\r\n    public static create(color: UnitColor): CandyFruit {\r\n        let res: cc.Prefab = DropSceneAssetCache.getPrefab(\"prefab/Game/Unit/Candy/Fruit/CandyFruit\");\r\n        if (res) {\r\n            let node: cc.Node = cc.instantiate(res);\r\n            if (node) {\r\n                let item = node.getComponent(CandyFruit);\r\n                if (item) {\r\n                    item.initWithColor(color);\r\n                    return item;\r\n                }\r\n            }\r\n        }\r\n        return null;\r\n    }\r\n\r\n    @property(cc.Sprite)\r\n    doll: cc.Sprite = null;\r\n\r\n    @property(cc.Node)\r\n    mark: cc.Node = null;\r\n\r\n    public canDrop(): boolean {\r\n        return true;\r\n    }\r\n\r\n    public setColor(color: UnitColor) {\r\n        super.setColor(color);\r\n        let filename = \"texture/Game/Candy/Fruit/6010\" + color.toString();\r\n        this.doll.spriteFrame = DropSceneAssetCache.getSpriteFrame(filename);\r\n    }\r\n\r\n    public setSelected(selected: boolean) {\r\n        super.setSelected(selected);\r\n        this.mark.active = this.getSelected();\r\n    }\r\n\r\n    protected initWithColor(color: UnitColor) {\r\n        super.initCandy(UnitKind.CandyFruit);\r\n        this.setColor(color);\r\n    }\r\n\r\n\r\n}\r\n","\r\nimport GridLayerBase, { LayerName } from \"../Base/GridLayerBase\";\r\n\r\nconst { ccclass, property } = cc._decorator;\r\n\r\n@ccclass\r\nexport default class CandyLayer extends GridLayerBase {\r\n\r\n    public static create(contentSize: cc.Size, gridSize: cc.Size): CandyLayer {\r\n        let node = new cc.Node();\r\n        let layer = node.addComponent(CandyLayer);\r\n        layer.initWithSize(contentSize, gridSize);\r\n        return layer;\r\n    }\r\n\r\n    protected initWithSize(contentSize: cc.Size, gridSize: cc.Size) {\r\n        super.init(LayerName.Candy, contentSize, gridSize);\r\n    }\r\n}\r\n","\r\nimport UnitStateBase, { UnitStateType } from \"../../../Base/State/UnitStateBase\";\r\nimport CandyBase from \"../CandyBase\";\r\nimport CandyStateNormal from \"./CandyStateNormal\";\r\n\r\n\r\n\r\n\r\nexport default class CandyStateBorn extends UnitStateBase {\r\n\r\n    public static create(): CandyStateBorn {\r\n        let instance = new CandyStateBorn();\r\n        instance.init();\r\n        return instance;\r\n    }\r\n\r\n    private _pastDuration: number = 0;\r\n    protected init() {\r\n        super.init(UnitStateType.Born);\r\n    }\r\n\r\n    public enter(onwer: CandyBase): void {\r\n        onwer.node.scale = 0.0;\r\n    }\r\n\r\n    public update(onwer: CandyBase, dt: number): void {\r\n        this._pastDuration += dt * 4;\r\n        onwer.node.scale = Math.min(this._pastDuration, 1.0);\r\n        if (this._pastDuration >= 1.0) {\r\n            onwer.setCurrentState(CandyStateNormal.create());\r\n        }\r\n    }\r\n}\r\n","import UnitStateBase, { UnitStateType } from \"../../../Base/State/UnitStateBase\";\r\nimport CandyBase from \"../CandyBase\";\r\nimport CandyStateNormal from \"./CandyStateNormal\";\r\n\r\n\r\n\r\n\r\nexport default class CandyStateDrop extends UnitStateBase {\r\n\r\n    public static create(targetPixelPosition: cc.Vec2): CandyStateDrop {\r\n        let instance = new CandyStateDrop();\r\n        instance.initWithTargetPos(targetPixelPosition);\r\n        return instance;\r\n    }\r\n\r\n    private _pastDuration: number = 0;\r\n    private _startPixelPosition: cc.Vec2 = cc.v2(0, 0);\r\n    private _targetPixelPosition: cc.Vec2 = cc.v2(0, 0);\r\n\r\n    protected initWithTargetPos(pos: cc.Vec2) {\r\n        super.init(UnitStateType.Drop);\r\n        this._targetPixelPosition = pos;\r\n    }\r\n\r\n    public enter(onwer: CandyBase): void {\r\n        onwer.node.scale = 1.0;\r\n        this._startPixelPosition = onwer.getPixelPosition();\r\n    }\r\n\r\n    public update(onwer: CandyBase, dt: number): void {\r\n        this._pastDuration += dt * 4;\r\n        onwer.setPixelPosition(this._startPixelPosition.lerp(this._targetPixelPosition, Math.min(1.0, this._pastDuration)))\r\n        if (this._pastDuration >= 1.0) {\r\n            onwer.setCurrentState(CandyStateNormal.create());\r\n        }\r\n    }\r\n}\r\n","import UnitStateBase, { UnitStateType } from \"../../../Base/State/UnitStateBase\";\r\nimport CandyBase from \"../CandyBase\";\r\n\r\n\r\nexport default class CandyStateNormal extends UnitStateBase {\r\n    public static create(): CandyStateNormal {\r\n        let instance = new CandyStateNormal();\r\n        instance.init();\r\n        return instance;\r\n    }\r\n\r\n    protected init() {\r\n        super.init(UnitStateType.Normal);\r\n    }\r\n\r\n    public enter(onwer: CandyBase): void {\r\n        onwer.node.scale = 1.0;\r\n    }\r\n\r\n}\r\n","import UnitStateBase, { UnitStateType } from \"../../../Base/State/UnitStateBase\";\r\nimport CandyBase from \"../CandyBase\";\r\nimport CandyStateNormal from \"./CandyStateNormal\";\r\n\r\n\r\nexport default class CandyStateTeleport extends UnitStateBase {\r\n\r\n    public static create(targetPixelPosition: cc.Vec2): CandyStateTeleport {\r\n        let instance = new CandyStateTeleport();\r\n        instance.initWithTargetPos(targetPixelPosition);\r\n        return instance;\r\n    }\r\n\r\n    private _pastDuration: number = 0;\r\n    private _startPixelPosition: cc.Vec2 = cc.v2(0, 0);\r\n    private _targetPixelPosition: cc.Vec2 = cc.v2(0, 0);\r\n\r\n    protected initWithTargetPos(pos: cc.Vec2) {\r\n        super.init(UnitStateType.Drop);\r\n        this._targetPixelPosition = pos;\r\n    }\r\n\r\n    public enter(onwer: CandyBase): void {\r\n        onwer.node.scale = 1.0;\r\n        this._startPixelPosition = onwer.getPixelPosition();\r\n    }\r\n\r\n    public update(onwer: CandyBase, dt: number): void {\r\n        this._pastDuration += dt * 4;\r\n\r\n        if (this._pastDuration <= 0.5) {\r\n            onwer.setPixelPosition(this._startPixelPosition);\r\n            onwer.node.scale = 1.0 - (this._pastDuration / 0.5);\r\n        } else {\r\n            onwer.setPixelPosition(this._targetPixelPosition);\r\n            onwer.node.scale = Math.min(1, ((this._pastDuration - 0.5) / 0.5));\r\n        }\r\n        if (this._pastDuration >= 1.0) {\r\n            onwer.setCurrentState(CandyStateNormal.create());\r\n        }\r\n    }\r\n}\r\n","import { AssetBundleID } from \"../../../../../scripts/Defines/Defines\";\r\nimport AssetCache from \"../../../../../scripts/Frameworks/AssetCache/AssetCache\";\r\n\r\nexport default class DropSceneAssetCache {\r\n    public static getAssetSync(url: string, type: typeof cc.Asset): cc.Asset {\r\n        return AssetCache.getInstance().getAssetSync(AssetBundleID.DropScene, url, type)\r\n    }\r\n\r\n    public static getSpriteFrame(url: string): cc.SpriteFrame {\r\n        return this.getAssetSync(url, cc.SpriteFrame) as cc.SpriteFrame\r\n    }\r\n\r\n    public static getPrefab(url: string): cc.Prefab {\r\n        return this.getAssetSync(url, cc.Prefab) as cc.Prefab\r\n    }\r\n\r\n    public static getKeyWithLogicalPosition(pos: cc.Vec2): number {\r\n        return Math.floor(pos.y) * 100 + Math.floor(pos.x) + 10000;\r\n    }\r\n}\r\n","export default class DropSceneMath {\r\n    public static getKeyWithLogicalPosition(pos: cc.Vec2): number {\r\n        return Math.floor(pos.y) * 100 + Math.floor(pos.x) + 10000;\r\n    }\r\n}\r\n","import { AssetBundleID, SceneName } from \"../../../scripts/Defines/Defines\";\r\nimport IGame from \"../../../scripts/Frameworks/IGame/IGame\";\r\nimport PreloadBundleInfo from \"../../../scripts/Frameworks/SceneDirector/PreloadAssetInfo\";\r\nimport SceneBase from \"../../../scripts/Frameworks/SceneDirector/SceneBase\";\r\nimport SceneEnterParamBase from \"../../../scripts/Frameworks/SceneDirector/SceneEnterParamBase\";\r\nimport Grid from \"./Game/Grid/Grid\";\r\n\r\nconst { ccclass, property } = cc._decorator;\r\n\r\n@ccclass\r\nexport default class DropScene extends SceneBase {\r\n\r\n\r\n    public getSceneName(): string {\r\n        return SceneName.DropScene;\r\n    }\r\n\r\n    @property(cc.Node)\r\n    gridContainer: cc.Node = null;\r\n\r\n\r\n    private _grid: Grid = null;\r\n    // LIFE-CYCLE CALLBACKS:\r\n    public onSceneLoad(): void {\r\n\r\n    }\r\n    public onSceneEnable(): void {\r\n\r\n    }\r\n    public onSceneEnter(param: SceneEnterParamBase): void {\r\n\r\n    }\r\n    public onSceneStart(): void {\r\n        this._grid = Grid.create(1, this.gridContainer.getContentSize(), cc.size(75, 75), cc.size(9, 12));\r\n        this.gridContainer.addChild(this._grid.node);\r\n\r\n        this.node.on(cc.Node.EventType.TOUCH_START, this.onTouchStart, this);\r\n        this.node.on(cc.Node.EventType.TOUCH_MOVE, this.onTouchMove, this);\r\n        this.node.on(cc.Node.EventType.TOUCH_END, this.onTouchEnd, this);\r\n        this.node.on(cc.Node.EventType.TOUCH_CANCEL, this.onTouchCancel, this);\r\n    }\r\n    public onSceneUpdate(dt: number): void {\r\n        this._grid && this._grid.updateGrid(dt);\r\n    }\r\n    public onSceneExit(): void {\r\n\r\n    }\r\n    public onSceneDisable(): void {\r\n\r\n    }\r\n    public onSceneDestroy(): void {\r\n\r\n    }\r\n\r\n    private onStepBtn(event: cc.Event.EventTouch) {\r\n        this._grid && this._grid.clearSelectedCandy();\r\n    }\r\n\r\n    private onQuitBtn(event: cc.Event.EventTouch) {\r\n        let preloadInfo = PreloadBundleInfo.create();\r\n        preloadInfo.extiBundles = [AssetBundleID.DropScene];\r\n        preloadInfo.enterBundles[AssetBundleID.MainScene] = [];\r\n        IGame.getInstance().replaceSceneWithSwitchScene(preloadInfo, SceneName.MainScene);\r\n    }\r\n\r\n    private onTouchStart(event: cc.Event.EventTouch) {\r\n        this._grid && this._grid.onTouchStart(event);\r\n    }\r\n    private onTouchMove(event: cc.Event.EventTouch) {\r\n        this._grid && this._grid.onTouchMove(event);\r\n    }\r\n    private onTouchEnd(event: cc.Event.EventTouch) {\r\n        this._grid && this._grid.onTouchEnd(event);\r\n    }\r\n    private onTouchCancel(event: cc.Event.EventTouch) {\r\n        this._grid && this._grid.onTouchCancel(event);\r\n    }\r\n\r\n}\r\n","import UnitBase from \"../../Base/UnitBase\";\r\nimport { UnitCategory, UnitKind } from \"../../Base/UnitDefines\";\r\nimport FloorStateNormal from \"./State/FloorStateNormal\";\r\n\r\nconst { ccclass, property } = cc._decorator;\r\n\r\n@ccclass\r\nexport default class FloorBase extends UnitBase {\r\n\r\n    private _isSpawn: boolean = false\r\n    public isSpawn(): boolean {\r\n        return this._isSpawn;\r\n    }\r\n    public setIsSpawn(isSpawn: boolean) {\r\n        this._isSpawn = isSpawn;\r\n    }\r\n\r\n    protected initFloor(kind: UnitKind) {\r\n        super.initUnit(UnitCategory.Floor, kind);\r\n        this.setCurrentState(FloorStateNormal.create());\r\n    }\r\n}","\r\n\r\nimport DropSceneAssetCache from \"../../../Utils/DropSceneAssetCache\";\r\nimport { UnitKind } from \"../../Base/UnitDefines\";\r\nimport FloorBase from \"../Base/FloorBase\";\r\n\r\nconst { ccclass, property } = cc._decorator;\r\n\r\n@ccclass\r\nexport default class FloorEntrance extends FloorBase {\r\n\r\n    public static create(exit: cc.Vec2): FloorEntrance {\r\n        let res: cc.Prefab = DropSceneAssetCache.getPrefab(\"prefab/Game/Unit/Floor/Entrance/FloorEntrance\");\r\n        if (res) {\r\n            let node: cc.Node = cc.instantiate(res);\r\n            if (node) {\r\n                let item = node.getComponent(FloorEntrance);\r\n                if (item) {\r\n                    item.initWithExit(exit);\r\n                    return item;\r\n                }\r\n            }\r\n        }\r\n        return null;\r\n    }\r\n\r\n    @property(cc.Sprite)\r\n    doll: cc.Sprite = null;\r\n\r\n\r\n    private _exit: cc.Vec2 = cc.v2(0, 0);\r\n    public getExit(): cc.Vec2 {\r\n        return this._exit;\r\n    }\r\n    protected setExit(pos: cc.Vec2) {\r\n        this._exit = pos;\r\n    }\r\n\r\n    protected initWithExit(exit: cc.Vec2) {\r\n        super.initFloor(UnitKind.FloorEntrance);\r\n        this.setExit(exit);\r\n        this.node.zIndex = 1;\r\n    }\r\n\r\n}\r\n","\r\n\r\nimport DropSceneAssetCache from \"../../../Utils/DropSceneAssetCache\";\r\nimport { UnitKind } from \"../../Base/UnitDefines\";\r\nimport FloorBase from \"../Base/FloorBase\";\r\n\r\nconst { ccclass, property } = cc._decorator;\r\n\r\n@ccclass\r\nexport default class FloorExit extends FloorBase {\r\n\r\n    public static create(exit: cc.Vec2): FloorExit {\r\n        let res: cc.Prefab = DropSceneAssetCache.getPrefab(\"prefab/Game/Unit/Floor/Exit/FloorExit\");\r\n        if (res) {\r\n            let node: cc.Node = cc.instantiate(res);\r\n            if (node) {\r\n                let item = node.getComponent(FloorExit);\r\n                if (item) {\r\n                    item.initWithEntrance(exit);\r\n                    return item;\r\n                }\r\n            }\r\n        }\r\n        return null;\r\n    }\r\n\r\n    @property(cc.Sprite)\r\n    doll: cc.Sprite = null;\r\n\r\n\r\n    private _entrance: cc.Vec2 = cc.v2(0, 0);\r\n    public getEntrance(): cc.Vec2 {\r\n        return this._entrance;\r\n    }\r\n    protected setEntrance(pos: cc.Vec2) {\r\n        this._entrance = pos;\r\n    }\r\n\r\n    protected initWithEntrance(exit: cc.Vec2) {\r\n        super.initFloor(UnitKind.FloorExit);\r\n        this.setEntrance(exit);\r\n        this.node.zIndex = 1;\r\n    }\r\n\r\n}\r\n","import { UnitKind } from \"../Base/UnitDefines\";\r\nimport FloorBase from \"./Base/FloorBase\";\r\nimport FloorEntrance from \"./Entrance/FloorEntrance\";\r\nimport FloorExit from \"./Exit/FloorExit\";\r\nimport FloorFixed from \"./Fixed/FloorFixed\";\r\n\r\n\r\nexport default class FloorFactory {\r\n\r\n    public static createFloor(param: { [key: string]: any }): FloorBase {\r\n        let kind = param[\"kind\"];\r\n        switch (kind) {\r\n            case UnitKind.FloorFixed: {\r\n                return FloorFixed.create();\r\n            }\r\n                break;\r\n            case UnitKind.FloorEntrance: {\r\n                let exit = param[\"relatedPosition\"] || cc.v2(-1, -1);\r\n                return FloorEntrance.create(exit);\r\n            }\r\n                break;\r\n            case UnitKind.FloorExit: {\r\n                let entrance = param[\"relatedPosition\"] || cc.v2(-1, -1);\r\n                return FloorExit.create(entrance);\r\n            }\r\n                break;\r\n            default:\r\n                break;\r\n        }\r\n        return null;\r\n    }\r\n\r\n}\r\n","\r\n\r\nimport DropSceneAssetCache from \"../../../Utils/DropSceneAssetCache\";\r\nimport { UnitKind } from \"../../Base/UnitDefines\";\r\nimport FloorBase from \"../Base/FloorBase\";\r\n\r\nconst { ccclass, property } = cc._decorator;\r\n\r\n@ccclass\r\nexport default class FloorFixed extends FloorBase {\r\n\r\n    public static create(): FloorFixed {\r\n        let res: cc.Prefab = DropSceneAssetCache.getPrefab(\"prefab/Game/Unit/Floor/Fixed/FloorFixed\");\r\n        if (res) {\r\n            let node: cc.Node = cc.instantiate(res);\r\n            if (node) {\r\n                let item = node.getComponent(FloorFixed);\r\n                if (item) {\r\n                    item.init();\r\n                    return item;\r\n                }\r\n            }\r\n        }\r\n        return null;\r\n    }\r\n\r\n    @property(cc.Sprite)\r\n    doll: cc.Sprite = null;\r\n\r\n    protected init() {\r\n        super.initFloor(UnitKind.FloorFixed);\r\n    }\r\n\r\n}\r\n","\r\nimport GridLayerBase, { LayerName } from \"../Base/GridLayerBase\";\r\n\r\nconst { ccclass, property } = cc._decorator;\r\n\r\n@ccclass\r\nexport default class FloorLayer extends GridLayerBase {\r\n\r\n    public static create(contentSize: cc.Size, gridSize: cc.Size): FloorLayer {\r\n        let node = new cc.Node();\r\n        let layer = node.addComponent(FloorLayer);\r\n        layer.initWithSize(contentSize, gridSize);\r\n        return layer;\r\n    }\r\n\r\n    protected initWithSize(contentSize: cc.Size, gridSize: cc.Size) {\r\n        super.init(LayerName.Floor, contentSize, gridSize);\r\n    }\r\n}\r\n","\r\n\r\nimport UnitStateBase, { UnitStateType } from \"../../../Base/State/UnitStateBase\";\r\n\r\nexport default class FloorStateNormal extends UnitStateBase {\r\n    public static create(): FloorStateNormal {\r\n        let instance = new FloorStateNormal();\r\n        instance.init();\r\n        return instance;\r\n    }\r\n\r\n    protected init() {\r\n        super.init(UnitStateType.Normal);\r\n    }\r\n}\r\n","\r\nimport UnitBase from \"../../Base/UnitBase\";\r\nimport { UnitCategory, UnitKind } from \"../../Base/UnitDefines\";\r\nimport FrameStateNormal from \"./State/FrameStateNormal\";\r\n\r\nconst { ccclass, property } = cc._decorator;\r\n\r\n@ccclass\r\nexport default class FrameBase extends UnitBase {\r\n\r\n    protected initFrame(kind: UnitKind) {\r\n        super.initUnit(UnitCategory.Frame, kind);\r\n        this.setCurrentState(FrameStateNormal.create());\r\n    }\r\n}\r\n","\r\nimport { UnitKind } from \"../Base/UnitDefines\";\r\nimport FrameBase from \"./Base/FrameBase\";\r\nimport FrameNormal from \"./Normal/FrameNormal\";\r\n\r\nexport default class FrameFactory {\r\n\r\n    public static createFrame(param: { [key: string]: any }): FrameBase {\r\n        let kind = param[\"kind\"];\r\n        switch (kind) {\r\n            case UnitKind.FrameNormal: {\r\n                return FrameNormal.create();\r\n            }\r\n                break;\r\n            default:\r\n                break;\r\n        }\r\n        return null\r\n    }\r\n}\r\n","\r\nimport GridLayerBase, { LayerName } from \"../Base/GridLayerBase\";\r\n\r\nconst { ccclass, property } = cc._decorator;\r\n\r\n@ccclass\r\nexport default class FrameLayer extends GridLayerBase {\r\n\r\n    public static create(contentSize: cc.Size, gridSize: cc.Size): FrameLayer {\r\n        let node = new cc.Node();\r\n        let layer = node.addComponent(FrameLayer);\r\n        layer.initWithSize(contentSize, gridSize);\r\n        return layer;\r\n    }\r\n\r\n    protected initWithSize(contentSize: cc.Size, gridSize: cc.Size) {\r\n        super.init(LayerName.Frame, contentSize, gridSize);\r\n    }\r\n}\r\n","\r\nimport { LayerName } from \"../../../Layer/Base/GridLayerBase\";\r\nimport DropSceneAssetCache from \"../../../Utils/DropSceneAssetCache\";\r\nimport { UnitKind } from \"../../Base/UnitDefines\";\r\n\r\nimport FrameBase from \"../Base/FrameBase\";\r\nconst { ccclass, property } = cc._decorator;\r\n\r\n@ccclass\r\nexport default class FrameNormal extends FrameBase {\r\n\r\n    public static create(): FrameNormal {\r\n        let res: cc.Prefab = DropSceneAssetCache.getPrefab(\"prefab/Game/Unit/Frame/Normal/FrameNormal\");\r\n        if (res) {\r\n            let node: cc.Node = cc.instantiate(res);\r\n            if (node) {\r\n                let item = node.getComponent(FrameNormal);\r\n                if (item) {\r\n                    item.init();\r\n                    return item;\r\n                }\r\n            }\r\n        }\r\n        return null;\r\n    }\r\n\r\n    @property(cc.Sprite)\r\n    doll: cc.Sprite = null;\r\n\r\n    public setLogicalPostion(pos: cc.Vec2) {\r\n        super.setLogicalPostion(pos);\r\n        let code = this.getPositionCode(this.getLogicalPostion());\r\n        let frameName = \"01101\";\r\n        switch (code) {\r\n            case 128: {\r\n                frameName = \"00101\";\r\n            }\r\n                break;\r\n            case 2: {\r\n                frameName = \"00102\";\r\n            }\r\n                break;\r\n            case 8: {\r\n                frameName = \"00103\";\r\n            }\r\n                break;\r\n            case 32: {\r\n                frameName = \"00104\";\r\n            }\r\n                break;\r\n            case 160: {\r\n                frameName = \"00201\";\r\n            }\r\n                break;\r\n            case 130: {\r\n                frameName = \"00202\";\r\n            }\r\n                break;\r\n            case 10: {\r\n                frameName = \"00203\";\r\n            }\r\n                break;\r\n            case 40: {\r\n                frameName = \"00204\";\r\n            }\r\n                break;\r\n            case 136: {\r\n                frameName = \"00205\";\r\n            }\r\n                break;\r\n            case 34: {\r\n                frameName = \"00206\";\r\n            }\r\n                break;\r\n            case 162: {\r\n                frameName = \"00301\";\r\n            }\r\n                break;\r\n            case 138: {\r\n                frameName = \"00302\";\r\n            }\r\n                break;\r\n            case 42: {\r\n                frameName = \"00303\";\r\n            }\r\n                break;\r\n            case 168: {\r\n                frameName = \"00304\";\r\n            }\r\n                break;\r\n            case 170: {\r\n                frameName = \"00401\";\r\n            }\r\n                break;\r\n            case 64:\r\n            case 96:\r\n            case 192:\r\n            case 224: {\r\n                frameName = \"00501\";\r\n            }\r\n                break;\r\n            case 1:\r\n            case 3:\r\n            case 129:\r\n            case 131: {\r\n                frameName = \"00502\";\r\n            }\r\n                break;\r\n            case 4:\r\n            case 6:\r\n            case 12:\r\n            case 14: {\r\n                frameName = \"00503\";\r\n            }\r\n                break;\r\n            case 16:\r\n            case 24:\r\n            case 56:\r\n            case 48: {\r\n                frameName = \"00504\";\r\n            }\r\n                break;\r\n            case 66:\r\n            case 98:\r\n            case 194:\r\n            case 226: {\r\n                frameName = \"00601\";\r\n            }\r\n                break;\r\n            case 72:\r\n            case 104:\r\n            case 200:\r\n            case 232: {\r\n                frameName = \"00602\";\r\n            }\r\n                break;\r\n            case 9:\r\n            case 11:\r\n            case 137:\r\n            case 139: {\r\n                frameName = \"00603\";\r\n            }\r\n                break;\r\n            case 33:\r\n            case 35:\r\n            case 161:\r\n            case 163: {\r\n                frameName = \"00604\";\r\n            }\r\n                break;\r\n            case 36:\r\n            case 38:\r\n            case 44:\r\n            case 46: {\r\n                frameName = \"00605\";\r\n            }\r\n                break;\r\n            case 132:\r\n            case 134:\r\n            case 140:\r\n            case 142: {\r\n                frameName = \"00606\";\r\n            }\r\n                break;\r\n            case 144:\r\n            case 152:\r\n            case 176:\r\n            case 184: {\r\n                frameName = \"00607\";\r\n            }\r\n                break;\r\n            case 18:\r\n            case 26:\r\n            case 50:\r\n            case 58: {\r\n                frameName = \"00608\";\r\n            }\r\n                break;\r\n            case 74:\r\n            case 106:\r\n            case 202:\r\n            case 234: {\r\n                frameName = \"00701\";\r\n            }\r\n                break;\r\n            case 41:\r\n            case 43:\r\n            case 169:\r\n            case 171: {\r\n                frameName = \"00702\";\r\n            }\r\n                break;\r\n            case 164:\r\n            case 166:\r\n            case 172:\r\n            case 174: {\r\n                frameName = \"00703\";\r\n            }\r\n                break;\r\n            case 146:\r\n            case 154:\r\n            case 178:\r\n            case 186: {\r\n                frameName = \"00704\";\r\n            }\r\n                break;\r\n            case 65:\r\n            case 67:\r\n            case 97:\r\n            case 99:\r\n            case 193:\r\n            case 195:\r\n            case 225:\r\n            case 227: {\r\n                frameName = \"00801\";\r\n            }\r\n                break;\r\n            case 5:\r\n            case 7:\r\n            case 13:\r\n            case 15:\r\n            case 133:\r\n            case 135:\r\n            case 141:\r\n            case 143: {\r\n                frameName = \"00802\";\r\n            }\r\n                break;\r\n            case 20:\r\n            case 22:\r\n            case 28:\r\n            case 30:\r\n            case 52:\r\n            case 54:\r\n            case 60:\r\n            case 62: {\r\n                frameName = \"00803\";\r\n            }\r\n                break;\r\n            case 80:\r\n            case 88:\r\n            case 112:\r\n            case 120:\r\n            case 208:\r\n            case 216:\r\n            case 240:\r\n            case 248: {\r\n                frameName = \"00804\";\r\n            }\r\n                break;\r\n            case 68:\r\n            case 70:\r\n            case 76:\r\n            case 78:\r\n            case 100:\r\n            case 102:\r\n            case 108:\r\n            case 110:\r\n            case 196:\r\n            case 198:\r\n            case 204:\r\n            case 206:\r\n            case 228:\r\n            case 230:\r\n            case 236:\r\n            case 238: {\r\n                frameName = \"00805\";\r\n            }\r\n                break;\r\n            case 17:\r\n            case 19:\r\n            case 25:\r\n            case 27:\r\n            case 49:\r\n            case 51:\r\n            case 57:\r\n            case 59:\r\n            case 145:\r\n            case 147:\r\n            case 153:\r\n            case 155:\r\n            case 177:\r\n            case 179:\r\n            case 185:\r\n            case 187: {\r\n                frameName = \"00806\";\r\n            }\r\n                break;\r\n            case 73:\r\n            case 75:\r\n            case 105:\r\n            case 107:\r\n            case 201:\r\n            case 203:\r\n            case 233:\r\n            case 235: {\r\n                frameName = \"00901\";\r\n            }\r\n                break;\r\n            case 37:\r\n            case 39:\r\n            case 45:\r\n            case 47:\r\n            case 165:\r\n            case 167:\r\n            case 173:\r\n            case 175: {\r\n                frameName = \"00902\";\r\n            }\r\n                break;\r\n            case 148:\r\n            case 150:\r\n            case 156:\r\n            case 158:\r\n            case 180:\r\n            case 182:\r\n            case 188:\r\n            case 190: {\r\n                frameName = \"00903\";\r\n            }\r\n                break;\r\n            case 82:\r\n            case 90:\r\n            case 114:\r\n            case 122:\r\n            case 210:\r\n            case 218:\r\n            case 242:\r\n            case 250: {\r\n                frameName = \"00904\";\r\n            }\r\n                break;\r\n            case 69:\r\n            case 71:\r\n            case 77:\r\n            case 79:\r\n            case 101:\r\n            case 103:\r\n            case 109:\r\n            case 111:\r\n            case 197:\r\n            case 199:\r\n            case 205:\r\n            case 207:\r\n            case 229:\r\n            case 231:\r\n            case 237:\r\n            case 239: {\r\n                frameName = \"01001\";\r\n            }\r\n                break;\r\n            case 21:\r\n            case 23:\r\n            case 29:\r\n            case 31:\r\n            case 53:\r\n            case 55:\r\n            case 61:\r\n            case 63:\r\n            case 149:\r\n            case 151:\r\n            case 157:\r\n            case 159:\r\n            case 181:\r\n            case 183:\r\n            case 189:\r\n            case 191: {\r\n                frameName = \"01002\";\r\n            }\r\n                break;\r\n            case 84:\r\n            case 86:\r\n            case 92:\r\n            case 94:\r\n            case 116:\r\n            case 118:\r\n            case 124:\r\n            case 126:\r\n            case 212:\r\n            case 214:\r\n            case 220:\r\n            case 222:\r\n            case 244:\r\n            case 246:\r\n            case 252:\r\n            case 254: {\r\n                frameName = \"01003\";\r\n            }\r\n                break;\r\n            case 81:\r\n            case 83:\r\n            case 89:\r\n            case 91:\r\n            case 113:\r\n            case 115:\r\n            case 121:\r\n            case 123:\r\n            case 209:\r\n            case 211:\r\n            case 217:\r\n            case 219:\r\n            case 241:\r\n            case 243:\r\n            case 249:\r\n            case 251: {\r\n                frameName = \"01004\";\r\n            }\r\n                break;\r\n            case 85:\r\n            case 87:\r\n            case 93:\r\n            case 95:\r\n            case 117:\r\n            case 119:\r\n            case 125:\r\n            case 127:\r\n            case 213:\r\n            case 215:\r\n            case 221:\r\n            case 223:\r\n            case 245:\r\n            case 247:\r\n            case 253:\r\n            case 255: {\r\n                frameName = \"01101\";\r\n            }\r\n                break;\r\n            default: {\r\n            }\r\n                break;\r\n        }\r\n\r\n        let fileName = 'texture/Game/Frame/Normal/' + frameName;\r\n        this.doll.spriteFrame = DropSceneAssetCache.getSpriteFrame(fileName);\r\n        this.doll.node.active = code != 0;\r\n    }\r\n\r\n\r\n    protected getPositionCode(pos: cc.Vec2) {\r\n\r\n        let bitOffsets: cc.Vec2[] = [\r\n            cc.v2(1, 0),\r\n            cc.v2(1, 1),\r\n            cc.v2(0, 1),\r\n            cc.v2(-1, 1),\r\n            cc.v2(-1, 0),\r\n            cc.v2(-1, -1),\r\n            cc.v2(0, -1),\r\n            cc.v2(1, -1),\r\n        ];\r\n        let code = 0;\r\n        let bitValue = 1;\r\n\r\n        for (let offset of bitOffsets) {\r\n            let checkPos = pos.add(offset);\r\n            let floor = this.grid.getUnit(LayerName.Floor, checkPos);\r\n            if (floor) {\r\n                code += bitValue;\r\n            }\r\n            bitValue *= 2;\r\n        }\r\n        return code;\r\n    }\r\n\r\n    protected init() {\r\n        super.initFrame(UnitKind.FrameNormal);\r\n    }\r\n}\r\n","\r\n\r\nimport UnitStateBase, { UnitStateType } from \"../../../Base/State/UnitStateBase\";\r\n\r\nexport default class FrameStateNormal extends UnitStateBase {\r\n    public static create(): FrameStateNormal {\r\n        let instance = new FrameStateNormal();\r\n        instance.init();\r\n        return instance;\r\n    }\r\n\r\n    protected init() {\r\n        super.init(UnitStateType.Normal);\r\n    }\r\n}\r\n","import { LayerName } from \"../../../Layer/Base/GridLayerBase\";\r\nimport CandyBase from \"../../../Unit/Candy/Base/CandyBase\";\r\nimport Grid from \"../../Grid\";\r\nimport GridStateBase, { GridStateType } from \"../Base/GridStateBase\";\r\nimport FloorBase from \"../../../Unit/Floor/Base/FloorBase\";\r\nimport DropSceneMath from \"../../../Utils/DropSceneMath\";\r\nimport { UnitKind } from \"../../../Unit/Base/UnitDefines\";\r\nimport FloorExit from \"../../../Unit/Floor/Exit/FloorExit\";\r\nimport FloorEntrance from \"../../../Unit/Floor/Entrance/FloorEntrance\";\r\n\r\n\r\n\r\nexport default class GridDropLogic extends GridStateBase {\r\n\r\n    public static create(): GridDropLogic {\r\n        let instance = new GridDropLogic();\r\n        instance.init()\r\n        return instance;\r\n    }\r\n\r\n    private _searchOffsets: cc.Vec2[] = [];\r\n    protected init() {\r\n        super.init(GridStateType.Drop)\r\n        this._floorStatusDict = {};\r\n        this._wallsDict = {};\r\n        this._searchOffsets.push(cc.v2(0, 1));\r\n        this._searchOffsets.push(cc.v2(-1, 1));\r\n        this._searchOffsets.push(cc.v2(1, 1));\r\n    }\r\n\r\n\r\n    private _floorStatusDict: { [key: number]: boolean } = {}\r\n    /**\r\n     * 获取指定格子的生死状态，生代表此格的元素将会变化， 死代表此格的元素不会变化\r\n     * @param onwer \r\n     * @param logicalPosition \r\n     */\r\n    private getFloorStatus(onwer: Grid, logicalPosition: cc.Vec2, checkedFloor: Set<number> = null) {\r\n        if (checkedFloor == null) {\r\n            checkedFloor = new Set<number>();\r\n        }\r\n        let key = DropSceneMath.getKeyWithLogicalPosition(logicalPosition);\r\n        if (checkedFloor.has(key)) {\r\n            return false;\r\n        }\r\n        checkedFloor.add(key);\r\n        // 是否已经缓存了此格子的生死状态\r\n        let status = this._floorStatusDict[key];\r\n        if (status != null) {\r\n            return status;\r\n        }\r\n\r\n        let floor: FloorBase = onwer.getUnit(LayerName.Floor, logicalPosition) as FloorBase;\r\n        if (floor == null) {\r\n            // 没有格子的位置是死\r\n            this._floorStatusDict[key] = false;\r\n            return false;\r\n        }\r\n\r\n        let candy: CandyBase = onwer.getUnit(LayerName.Candy, logicalPosition) as CandyBase;\r\n        if (candy && !candy.canDrop()) {\r\n            // 元素不能下落的格子是死\r\n            this._floorStatusDict[key] = false;\r\n            return false;\r\n        }\r\n\r\n        if (floor.isSpawn()) {\r\n            // 出生格是活\r\n            this._floorStatusDict[key] = true;\r\n            return true;\r\n        }\r\n\r\n        if (floor.getUnitKind() == UnitKind.FloorExit) {\r\n            // 传送门格生死取决于入口是生死\r\n            let exit: FloorExit = floor as FloorExit;\r\n            let status = this.getFloorStatus(onwer, exit.getEntrance(), checkedFloor);\r\n            if (status) {\r\n                this._floorStatusDict[key] = true;\r\n                return true;\r\n            }\r\n        }\r\n\r\n        let size = onwer.getMapSize();\r\n        for (const offset of this._searchOffsets) {\r\n            let checkPos = logicalPosition.add(offset);\r\n            if (checkPos.x >= 0 && checkPos.x < size.width && checkPos.y >= 0 && checkPos.y < size.height) {\r\n                if (this.hasWall(logicalPosition, checkPos) == false) {\r\n                    let status = this.getFloorStatus(onwer, checkPos, checkedFloor);\r\n                    if (status) {\r\n                        // 任一连通位置是活格，则是活格\r\n                        this._floorStatusDict[key] = true;\r\n                        return true;\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        // 所有连通位置都是死格则是死格\r\n        this._floorStatusDict[key] = false;\r\n        return false;\r\n    }\r\n\r\n    /**\r\n     * 记录所有格子生死状态\r\n     * @param onwer \r\n     */\r\n    private recordFloorStatus(onwer: Grid) {\r\n        let size = onwer.getMapSize();\r\n        for (let row = size.height - 1; row > -1; row--) {\r\n            for (let column = 0; column < size.width; column++) {\r\n                let checkPos = cc.v2(column, row);\r\n                this.getFloorStatus(onwer, checkPos);\r\n            }\r\n        }\r\n    }\r\n\r\n    private _wallsDict: { [key: string]: boolean } = {};\r\n    private getWallKeyWithLogicalPosition(from: cc.Vec2, to: cc.Vec2): string {\r\n        let key = cc.js.formatStr(\"{%s,%s}->{%s,%s}\", from.x, from.y, to.x, to.y);\r\n        return key;\r\n    }\r\n    private hasWall(from: cc.Vec2, to: cc.Vec2): boolean {\r\n        let key = this.getWallKeyWithLogicalPosition(from, to);\r\n        let value = this._wallsDict[key];\r\n        if (value != null) {\r\n            return true;\r\n        }\r\n        return false;\r\n    }\r\n\r\n    private recordWalls(onwer: Grid) {\r\n        let size = onwer.getMapSize();\r\n        for (let row = 0; row < size.height; row++) {\r\n            for (let column = 0; column < size.width; column++) {\r\n                let checkPos = cc.v2(column, row);\r\n                let floor: FloorBase = onwer.getUnit(LayerName.Floor, checkPos) as FloorBase;\r\n                if (floor.getUnitKind() == UnitKind.FloorEntrance) {\r\n                    let downKey = this.getWallKeyWithLogicalPosition(checkPos, checkPos.add(cc.v2(0, -1)))\r\n                    this._wallsDict[downKey] = true;\r\n                    let upKey = this.getWallKeyWithLogicalPosition(checkPos.add(cc.v2(0, -1)), checkPos)\r\n                    this._wallsDict[upKey] = true;\r\n                }\r\n\r\n                if (floor.getUnitKind() == UnitKind.FloorExit) {\r\n                    let downKey = this.getWallKeyWithLogicalPosition(checkPos, checkPos.add(cc.v2(0, 1)))\r\n                    this._wallsDict[downKey] = true;\r\n                    let upKey = this.getWallKeyWithLogicalPosition(checkPos.add(cc.v2(0, 1)), checkPos)\r\n                    this._wallsDict[upKey] = true;\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    private isFloorAvailable(onwer: Grid, logicalPosition: cc.Vec2): boolean {\r\n        let floor = onwer.getUnit(LayerName.Floor, logicalPosition)\r\n        if (floor == null) {\r\n            return false;\r\n        }\r\n\r\n        let candy = onwer.getUnit(LayerName.Candy, logicalPosition)\r\n        if (candy != null) {\r\n            return false\r\n        }\r\n\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * 下落指定位置元素\r\n     * @param onwer \r\n     * @param checkPos \r\n     */\r\n    private dropCandy(onwer: Grid, checkPos: cc.Vec2, checkedCandy: Set<CandyBase>, movedCandy: Set<CandyBase>): boolean {\r\n        let candy: CandyBase = onwer.getUnit(LayerName.Candy, checkPos) as CandyBase;\r\n        if (candy && !checkedCandy.has(candy)) {\r\n            checkedCandy.add(candy);\r\n            if (candy.canDrop()) {\r\n                // 传送门入口，先更新传送门出口\r\n                let floor: FloorBase = onwer.getUnit(LayerName.Floor, checkPos) as FloorBase;\r\n                if (floor.getUnitKind() == UnitKind.FloorEntrance) {\r\n                    let entrance: FloorEntrance = floor as FloorEntrance;\r\n                    let eixtPos = entrance.getExit()\r\n                    this.dropCandy(onwer, eixtPos, checkedCandy, movedCandy)\r\n                    if (this.isFloorAvailable(onwer, eixtPos)) {\r\n                        candy.teleportToLogicalPosition(eixtPos);\r\n                        movedCandy.add(candy);\r\n                        return true;\r\n                    }\r\n                }\r\n\r\n                // 更新正下方位置\r\n                let downPos = checkPos.add(cc.v2(0, -1))\r\n                if (this.hasWall(checkPos, downPos) == false) {\r\n                    this.dropCandy(onwer, downPos, checkedCandy, movedCandy)\r\n                    if (this.isFloorAvailable(onwer, downPos)) {\r\n                        candy.moveToLogicalPosition(downPos);\r\n                        movedCandy.add(candy);\r\n                        return true;\r\n                    }\r\n                }\r\n\r\n                // 如果可以左下滑动，更新左下方位置\r\n                let leftDownPos = checkPos.add(cc.v2(-1, -1));\r\n                if (this.hasWall(checkPos, leftDownPos) == false) {\r\n                    // 必须左侧的格子不能与下方的格子连通或者是死格时，才可向左下滑动，\r\n                    let leftPos = checkPos.add(cc.v2(-1, 0));\r\n                    if (this.hasWall(leftPos, leftDownPos) || this.getFloorStatus(onwer, leftPos) == false) {\r\n                        this.dropCandy(onwer, leftDownPos, checkedCandy, movedCandy);\r\n                        if (this.isFloorAvailable(onwer, leftDownPos)) {\r\n                            candy.moveToLogicalPosition(leftDownPos);\r\n                            movedCandy.add(candy);\r\n                            return true;\r\n                        }\r\n                    }\r\n                }\r\n\r\n                // 如果可以右下滑动，更新左下方位置\r\n                let rightDownPos = checkPos.add(cc.v2(1, -1));\r\n                if (this.hasWall(checkPos, rightDownPos) == false) {\r\n                    let rightPos = checkPos.add(cc.v2(1, 0));\r\n                    // 必须右侧的格子是死格时，才可向右下滑动，\r\n                    if (this.hasWall(rightPos, rightDownPos) || this.getFloorStatus(onwer, rightPos) == false) {\r\n                        this.dropCandy(onwer, rightDownPos, checkedCandy, movedCandy);\r\n                        if (this.isFloorAvailable(onwer, rightDownPos)) {\r\n                            candy.moveToLogicalPosition(rightDownPos);\r\n                            movedCandy.add(candy);\r\n                            return true;\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        return false;\r\n    }\r\n\r\n    /**\r\n     * \r\n     * @param onwer \r\n     * @param checkedCandy \r\n     * @param movedCandy \r\n     */\r\n    public tryDropAllCandy(onwer: Grid, checkedCandy: Set<CandyBase> = null, movedCandy: Set<CandyBase> = null): Set<CandyBase> {\r\n        if (checkedCandy == null) {\r\n            checkedCandy = new Set<CandyBase>();\r\n        }\r\n        if (movedCandy == null) {\r\n            movedCandy = new Set<CandyBase>();\r\n        }\r\n        let size = onwer.getMapSize();\r\n        for (let row = 0; row < size.height; row++) {\r\n            for (let column = 0; column < size.width; column++) {\r\n                let checkPos = cc.v2(column, row);\r\n                this.dropCandy(onwer, checkPos, checkedCandy, movedCandy)\r\n            }\r\n        }\r\n        return movedCandy;\r\n    }\r\n\r\n    public enter(onwer: Grid): void {\r\n        this.recordFloorStatus(onwer);\r\n        this.recordWalls(onwer);\r\n    }\r\n\r\n    public onTouchStart(onwer: Grid, pos: cc.Vec2) {\r\n        let logicalPos = onwer.getLogicalPositionWithPixelPositon(pos);\r\n        let status = this.getFloorStatus(onwer, logicalPos);\r\n        console.log(cc.js.formatStr(\"GridDropLogic.onTouchStart Pos{%s,%s} is %s\", logicalPos.x, logicalPos.y, status ? \"Alive\" : \"Dead\"))\r\n    }\r\n}\r\n","import { LayerName } from \"../../../Layer/Base/GridLayerBase\";\r\nimport CandyFactory from \"../../../Unit/Candy/CandyFactory\";\r\nimport CandyStateBorn from \"../../../Unit/Candy/Base/State/CandyStateBorn\";\r\nimport Grid from \"../../Grid\";\r\nimport GridStateBase, { GridStateType } from \"../Base/GridStateBase\";\r\nimport FloorBase from \"../../../Unit/Floor/Base/FloorBase\";\r\nimport { UnitColor, UnitKind } from \"../../../Unit/Base/UnitDefines\";\r\nimport CandyBase from \"../../../Unit/Candy/Base/CandyBase\";\r\n\r\n\r\n\r\nexport default class GridGenerateLogic extends GridStateBase {\r\n    public static create(): GridGenerateLogic {\r\n        let instance = new GridGenerateLogic();\r\n        instance.init()\r\n        return instance;\r\n    }\r\n    protected init() {\r\n        super.init(GridStateType.Drop)\r\n    }\r\n    private _generatedCandy: Set<CandyBase> = new Set();\r\n\r\n    public enter(onwer: Grid): void {\r\n\r\n    }\r\n\r\n    public generateNewCandy(onwer: Grid): Set<CandyBase> {\r\n        this._generatedCandy.clear();\r\n        let size = onwer.getMapSize();\r\n        for (let row = 0; row < size.height; row++) {\r\n            for (let column = 0; column < size.width; column++) {\r\n                let checkPos = cc.v2(column, row);\r\n                let floor: FloorBase = onwer.getUnit(LayerName.Floor, checkPos) as FloorBase;\r\n                if (floor && floor.isSpawn()) {\r\n                    let candy: CandyBase = onwer.getUnit(LayerName.Candy, checkPos) as CandyBase;\r\n                    if (candy == null) {\r\n                        let colorCount = UnitColor.End - UnitColor.Begin;\r\n                        let color = Math.floor(Math.random() * colorCount) + UnitColor.Begin\r\n                        let param = { kind: UnitKind.CandyFruit, color: color }\r\n                        candy = CandyFactory.createCandy(param);\r\n                        onwer.setUnit(LayerName.Candy, checkPos, candy);\r\n                        candy.setCurrentState(CandyStateBorn.create());\r\n                        this._generatedCandy.add(candy);\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        return this._generatedCandy;\r\n    }\r\n}\r\n","import Grid from \"../../Grid/Grid\";\r\nimport UnitBase from \"../../Unit/Base/UnitBase\";\r\nimport DropSceneAssetCache from \"../../Utils/DropSceneAssetCache\";\r\n\r\n\r\nconst { ccclass, property } = cc._decorator;\r\n\r\nexport enum LayerName {\r\n    None = \"none\",\r\n    Frame = \"frame\",\r\n    Floor = \"floor\",\r\n    Candy = \"candy\",\r\n}\r\n\r\n@ccclass\r\nexport default abstract class GridLayerBase extends cc.Component {\r\n\r\n    private _grid: Grid = null;\r\n    public get grid(): Grid {\r\n        return this._grid;\r\n    }\r\n    public set grid(grid: Grid) {\r\n        this._grid = grid;\r\n    }\r\n\r\n    private _size: cc.Size = cc.size(0, 0);\r\n    public get size(): cc.Size {\r\n        return this._size;\r\n    }\r\n    public set size(size: cc.Size) {\r\n        this._size = size;\r\n    }\r\n\r\n    private _id: string = \"\";\r\n    public get id(): string {\r\n        return this._id;\r\n    }\r\n    public set id(id: string) {\r\n        this._id = id;\r\n    }\r\n\r\n    private _unitDict: { [key: string]: UnitBase } = {};\r\n\r\n    public getUnit(logicalPos: cc.Vec2): UnitBase {\r\n        let key = this.getKeyWithLogicalPosition(logicalPos)\r\n        return this._unitDict[key];\r\n    }\r\n    public setUnit(logicalPos: cc.Vec2, unit: UnitBase): UnitBase {\r\n        let key = this.getKeyWithLogicalPosition(logicalPos)\r\n        let removedUnit = this.removeUnit(logicalPos);\r\n        unit.layer = this;\r\n        unit.setPixelPosition(this.grid.getPixelPositionWithLogicalPositon(logicalPos));\r\n        unit.setLogicalPostion(logicalPos);\r\n        this._unitDict[key] = unit;\r\n        this.node.addChild(unit.node)\r\n        return removedUnit;\r\n    }\r\n\r\n    public moveUnit(from: cc.Vec2, to: cc.Vec2, syncPixelPos: boolean = true) {\r\n        let fromKey = this.getKeyWithLogicalPosition(from)\r\n        let toKey = this.getKeyWithLogicalPosition(to)\r\n        if (this._unitDict[fromKey] && this._unitDict[toKey] == null) {\r\n            this._unitDict[toKey] = this._unitDict[fromKey];\r\n            this._unitDict[fromKey] = null;\r\n            this._unitDict[toKey].setLogicalPostion(to);\r\n            if (syncPixelPos) {\r\n                this._unitDict[toKey].setPixelPosition(this.grid.getPixelPositionWithLogicalPositon(to));\r\n            }\r\n        }\r\n    }\r\n\r\n    public removeUnit(logicalPos: cc.Vec2, cleanup: boolean = false): UnitBase {\r\n        let key = this.getKeyWithLogicalPosition(logicalPos)\r\n        return this.removeUnitWithKey(key, cleanup);\r\n    }\r\n\r\n    public removeUnitWithKey(key: number, cleanup: boolean = false): UnitBase {\r\n        let unit = this._unitDict[key];\r\n        if (unit) {\r\n            unit.layer = null;\r\n            unit.node.removeFromParent(cleanup);\r\n            delete this._unitDict[key];\r\n        }\r\n        return unit;\r\n    }\r\n\r\n    private getKeyWithLogicalPosition(logicalPosition: cc.Vec2): number {\r\n        return DropSceneAssetCache.getKeyWithLogicalPosition(logicalPosition)\r\n    }\r\n\r\n    protected init(type: LayerName, contentSize: cc.Size, gridSize: cc.Size) {\r\n        this.id = type;\r\n        this.node.setAnchorPoint(0, 0);\r\n        this.node.setContentSize(contentSize);\r\n        this.size = gridSize;\r\n    }\r\n\r\n    public updateLayer(dt: number) {\r\n        for (let row = 0; row < this.size.height; row++) {\r\n            for (let column = 0; column < this.size.width; column++) {\r\n                let unit = this.getUnit(cc.v2(column, row));\r\n                if (unit) {\r\n                    unit.updateUnit(dt);\r\n                }\r\n            }\r\n        }\r\n    }\r\n}\r\n","import Message from \"../../../../../../../scripts/Frameworks/EWS/FSM/Message\";\r\nimport State from \"../../../../../../../scripts/Frameworks/EWS/FSM/State\";\r\nimport Grid from \"../../Grid\";\r\n\r\nexport enum GridStateType {\r\n    None = 0,\r\n    Create,\r\n    Normal,\r\n    Drop\r\n}\r\n\r\nexport default class GridStateBase extends State<Grid> {\r\n\r\n    private _type: GridStateType = GridStateType.None;\r\n    public getType(): GridStateType {\r\n        return this._type;\r\n    }\r\n\r\n    protected init(type: GridStateType) {\r\n        this._type = type;\r\n    }\r\n\r\n    public enter(onwer: Grid): void {\r\n\r\n    }\r\n    public update(onwer: Grid, dt: number): void {\r\n        let layerDict = onwer.getLayers();\r\n        for (const key in layerDict) {\r\n            let layer = layerDict[key];\r\n            layer.updateLayer(dt);\r\n        }\r\n    }\r\n    public exit(onwer: Grid): void {\r\n\r\n    }\r\n    public onMessage(message: Message): boolean {\r\n        return false;\r\n    }\r\n    public reset(): void {\r\n\r\n    }\r\n\r\n    public onTouchStart(onwer: Grid, pos: cc.Vec2) {\r\n\r\n    }\r\n    public onTouchMove(onwer: Grid, pos: cc.Vec2) {\r\n\r\n    }\r\n    public onTouchEnd(onwer: Grid, pos: cc.Vec2) {\r\n\r\n    }\r\n    public onTouchCancel(onwer: Grid, pos: cc.Vec2) {\r\n\r\n    }\r\n\r\n}\r\n","import { AssetBundleID } from \"../../../../../../../scripts/Defines/Defines\";\r\nimport TiledMapJsonPhraser from \"../../../../../../../scripts/Frameworks/TiledMap/TiledMapJsonPhraser\";\r\nimport GameMath from \"../../../../../../../scripts/Frameworks/Utils/GameMath\";\r\nimport { LayerName } from \"../../../Layer/Base/GridLayerBase\";\r\nimport FloorLayer from \"../../../Layer/FloorLayer/FloorLayer\";\r\nimport FrameLayer from \"../../../Layer/FrameLayer/FrameLayer\";\r\nimport CandyLayer from \"../../../Layer/CandyLayer/CandyLayer\";\r\nimport FloorFactory from \"../../../Unit/Floor/FloorFactory\";\r\nimport CandyFactory from \"../../../Unit/Candy/CandyFactory\";\r\nimport Grid from \"../../Grid\";\r\nimport GridStateBase, { GridStateType } from \"../Base/GridStateBase\";\r\nimport GridStateNormal from \"../Normal/GridStateNormal\";\r\nimport FloorBase from \"../../../Unit/Floor/Base/FloorBase\";\r\nimport FrameFactory from \"../../../Unit/Frame/FrameFactory\";\r\nimport DropSceneMath from \"../../../Utils/DropSceneMath\";\r\nimport { UnitKind } from \"../../../Unit/Base/UnitDefines\";\r\nimport GridStateDrop from \"../Drop/GridStateDrop\";\r\n\r\n\r\nexport default class GridStateCreate extends GridStateBase {\r\n\r\n    public static create(level: number, viewSize: cc.Size, cellSize: cc.Size, gridSize: cc.Size): GridStateCreate {\r\n        let instance = new GridStateCreate();\r\n        instance.initWithLevel(level, viewSize, cellSize, gridSize);\r\n        return instance;\r\n    }\r\n\r\n    private _level: number = 0;\r\n    private _viewSize: cc.Size = cc.size(0, 0);\r\n    private _cellSize: cc.Size = cc.size(0, 0);\r\n    private _mapSize: cc.Size = cc.size(0, 0);\r\n    protected initWithLevel(level: number, viewSize: cc.Size, cellSize: cc.Size, gridSize: cc.Size) {\r\n        super.init(GridStateType.Create)\r\n        this._level = level;\r\n        this._viewSize = viewSize;\r\n        this._cellSize = cellSize;\r\n        this._mapSize = gridSize;\r\n    }\r\n\r\n    public enter(onwer: Grid): void {\r\n\r\n        onwer.setCellSize(this._cellSize);\r\n        onwer.setMapSize(this._mapSize);\r\n\r\n        onwer.setOrigin(cc.v2(this._cellSize.width * 0.5, this._cellSize.height * 0.5));\r\n        let contentSize = cc.size(\r\n            this._cellSize.width * this._mapSize.width,\r\n            this._cellSize.height * this._mapSize.height)\r\n        onwer.node.setContentSize(contentSize);\r\n        let scale = GameMath.getScaleFromViewSize(this._viewSize,\r\n            cc.size(contentSize.width + this._cellSize.width, contentSize.height + this._cellSize.height),\r\n            0.75, 1.25);\r\n        onwer.node.scale = scale;\r\n\r\n        onwer.addLayer(FrameLayer.create(contentSize, this._mapSize));\r\n        onwer.addLayer(FloorLayer.create(contentSize, this._mapSize));\r\n        onwer.addLayer(CandyLayer.create(contentSize, this._mapSize));\r\n\r\n        let tmx = TiledMapJsonPhraser.createWithFile(AssetBundleID.DropScene, \"config/level\" + this._level.toString());\r\n        this.createFloor(tmx, onwer)\r\n        this.createCandy(tmx, onwer)\r\n        this.createFrame(tmx, onwer);\r\n\r\n        onwer.setCurrentState(GridStateDrop.create());\r\n    }\r\n\r\n    private createFloor(tmx: TiledMapJsonPhraser, onwer: Grid) {\r\n        let teleporterGruop: { [key: number]: { entrance: cc.Vec2, exit: cc.Vec2 } } = {};\r\n\r\n        let mapSize = tmx.getMapSize();\r\n        for (let column = 0; column < mapSize.width; column++) {\r\n            for (let row = 0; row < mapSize.height; row++) {\r\n                let checkPos = cc.v2(column, mapSize.height - 1 - row)\r\n                let markParams: { [key: string]: any } = {}\r\n                let markProperties = tmx.getObjectInfos(\"Mark\", checkPos);\r\n                if (markProperties) {\r\n                    for (const properties of markProperties) {\r\n                        let tilesetProperty = tmx.getTilesetPropertyWithGID(properties.gid);\r\n                        for (const key in tilesetProperty.propertyDict) {\r\n                            markParams[key] = tilesetProperty.propertyDict[key].value;\r\n                        }\r\n                        for (const key in properties.propertyDict) {\r\n                            markParams[key] = properties.propertyDict[key].value;\r\n                        }\r\n                    }\r\n\r\n                    let kind = markParams[\"kind\"]\r\n                    if (kind == UnitKind.MarkEntrance || kind == UnitKind.MarkExit) {\r\n                        let group = markParams[\"group\"];\r\n                        if (teleporterGruop[group] == null) {\r\n                            teleporterGruop[group] = { entrance: cc.v2(-1, -1), exit: cc.v2(-1, -1) };\r\n                        }\r\n                        if (kind == UnitKind.MarkEntrance) {\r\n                            teleporterGruop[group].entrance = cc.v2(column, row);\r\n                        }\r\n                        if (kind == UnitKind.MarkExit) {\r\n                            teleporterGruop[group].exit = cc.v2(column, row);\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n        }\r\n\r\n        let teleporters: { [key: number]: { kind: number, relatedPosition: cc.Vec2 } } = {}\r\n\r\n        for (const key in teleporterGruop) {\r\n            const value = teleporterGruop[key];\r\n            let entrance = { kind: UnitKind.FloorEntrance, relatedPosition: value.exit };\r\n            let entranceKey = DropSceneMath.getKeyWithLogicalPosition(value.entrance);\r\n            teleporters[entranceKey] = entrance;\r\n\r\n            let exit = { kind: UnitKind.FloorExit, relatedPosition: value.entrance };\r\n            let exitKey = DropSceneMath.getKeyWithLogicalPosition(value.exit);\r\n            teleporters[exitKey] = exit;\r\n        }\r\n\r\n\r\n        for (let column = 0; column < mapSize.width; column++) {\r\n            let topFloor: FloorBase = null\r\n            for (let row = 0; row < mapSize.height; row++) {\r\n                let checkPos = cc.v2(column, mapSize.height - 1 - row)\r\n                let params: { [key: string]: any } = {}\r\n                let floorProperties = tmx.getTilesetProperty(\"Floor\", checkPos);\r\n                if (floorProperties) {\r\n                    for (const key in floorProperties.propertyDict) {\r\n                        params[key] = floorProperties.propertyDict[key].value;\r\n                    }\r\n                }\r\n\r\n                let key = DropSceneMath.getKeyWithLogicalPosition(cc.v2(column, row));\r\n                let teleporterProperties = teleporters[key];\r\n                if (teleporterProperties) {\r\n                    for (const key in teleporterProperties) {\r\n                        params[key] = teleporterProperties[key];\r\n                    }\r\n                }\r\n\r\n                let floor = FloorFactory.createFloor(params)\r\n                if (floor) {\r\n                    onwer.setUnit(LayerName.Floor, cc.v2(column, row), floor);\r\n                    topFloor = floor;\r\n                }\r\n            }\r\n            if (topFloor) {\r\n                topFloor.setIsSpawn(true);\r\n            }\r\n        }\r\n    }\r\n\r\n    private createCandy(tmx: TiledMapJsonPhraser, onwer: Grid) {\r\n        let mapSize = tmx.getMapSize();\r\n        for (let row = 0; row < mapSize.height; row++) {\r\n            for (let column = 0; column < mapSize.width; column++) {\r\n                let params: { [key: string]: any } = {}\r\n                let checkPos = cc.v2(column, mapSize.height - 1 - row)\r\n                let properties = tmx.getTilesetProperty(\"Candy\", checkPos);\r\n                if (properties) {\r\n                    for (const key in properties.propertyDict) {\r\n                        params[key] = properties.propertyDict[key].value;\r\n                    }\r\n                }\r\n                let candy = CandyFactory.createCandy(params);\r\n                if (candy) {\r\n                    onwer.setUnit(LayerName.Candy, cc.v2(column, row), candy);\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    private createFrame(tmx: TiledMapJsonPhraser, onwer: Grid) {\r\n        let mapSize = tmx.getMapSize();\r\n        for (let row = -1; row <= mapSize.height; row++) {\r\n            for (let column = -1; column <= mapSize.width; column++) {\r\n                let floor = onwer.getUnit(LayerName.Floor, cc.v2(column, row))\r\n                if (floor == null) {\r\n                    let params: { [key: string]: any } = { kind: UnitKind.FrameNormal }\r\n                    let frame = FrameFactory.createFrame(params);\r\n                    onwer.setUnit(LayerName.Frame, cc.v2(column, row), frame);\r\n                }\r\n            }\r\n        }\r\n    }\r\n}\r\n","\r\nimport { LayerName } from \"../../../Layer/Base/GridLayerBase\";\r\nimport { UnitStateType } from \"../../../Unit/Base/State/UnitStateBase\";\r\nimport Grid from \"../../Grid\";\r\nimport GridStateBase, { GridStateType } from \"../Base/GridStateBase\";\r\nimport GridStateNormal from \"../Normal/GridStateNormal\";\r\nimport GridDropLogic from \"./GridDropLogic\";\r\nimport GridGenerateLogic from \"./GridGenerateLogic\";\r\n\r\n\r\nexport default class GridStateDrop extends GridStateBase {\r\n    public static create(): GridStateDrop {\r\n        let instance = new GridStateDrop();\r\n        instance.init();\r\n        return instance;\r\n    }\r\n\r\n    private _dropLogical: GridDropLogic = null;\r\n    private _generateLogic: GridGenerateLogic = null;\r\n\r\n    protected init() {\r\n        super.init(GridStateType.Drop)\r\n        this._dropLogical = GridDropLogic.create();\r\n        this._generateLogic = GridGenerateLogic.create();\r\n    }\r\n\r\n    public enter(onwer: Grid): void {\r\n        this._dropLogical.enter(onwer);\r\n        this._generateLogic.enter(onwer);\r\n    }\r\n\r\n    private _steps = 0;\r\n    public update(onwer: Grid, dt: number): void {\r\n        super.update(onwer, dt);\r\n        let mapSize = onwer.getMapSize();\r\n        for (let row = 0; row < mapSize.height; row++) {\r\n            for (let column = 0; column < mapSize.width; column++) {\r\n                let unit = onwer.getUnit(LayerName.Candy, cc.v2(column, row));\r\n                if (unit && unit.getCurrentState().getType() != UnitStateType.Normal) {\r\n                    return\r\n                }\r\n            }\r\n        }\r\n\r\n\r\n        // if (this._steps > 0) {\r\n        //     onwer.setCurrentState(GridStateNormal.create());\r\n        //     return;\r\n        // }\r\n        let dropedCandy = this._dropLogical.tryDropAllCandy(onwer);\r\n        let generatedCandy = this._generateLogic.generateNewCandy(onwer);\r\n        this._steps++\r\n        if (dropedCandy.size == 0 && generatedCandy.size == 0) {\r\n            onwer.setCurrentState(GridStateNormal.create());\r\n        }\r\n    }\r\n\r\n    public onTouchStart(onwer: Grid, pos: cc.Vec2) {\r\n        this._dropLogical.onTouchStart(onwer, pos);\r\n    }\r\n\r\n}\r\n","import SimpleStateMachine from \"../../../../../../../scripts/Frameworks/EWS/FSM/SimpleStateMachine\";\r\nimport Grid from \"../../Grid\";\r\nimport GridStateBase from \"./GridStateBase\";\r\n\r\n\r\nexport default class GridStateMachine extends SimpleStateMachine<Grid> {\r\n    public static create(onwer: Grid) {\r\n        let instance = new GridStateMachine(onwer);\r\n        return instance;\r\n    }\r\n\r\n    public getCurrentState(): GridStateBase {\r\n        return super.getCurrentState() as GridStateBase;\r\n    }\r\n\r\n    public onTouchStart(pos: cc.Vec2) {\r\n        let currentState = this.getCurrentState();\r\n        if (currentState) {\r\n            currentState.onTouchStart(this.getOnwer(), pos);\r\n        }\r\n    }\r\n    public onTouchMove(pos: cc.Vec2) {\r\n        let currentState = this.getCurrentState();\r\n        if (currentState) {\r\n            currentState.onTouchMove(this.getOnwer(), pos);\r\n        }\r\n    }\r\n    public onTouchEnd(pos: cc.Vec2) {\r\n        let currentState = this.getCurrentState();\r\n        if (currentState) {\r\n            currentState.onTouchEnd(this.getOnwer(), pos);\r\n        }\r\n    }\r\n    public onTouchCancel(pos: cc.Vec2) {\r\n        let currentState = this.getCurrentState();\r\n        if (currentState) {\r\n            currentState.onTouchCancel(this.getOnwer(), pos);\r\n        }\r\n    }\r\n}\r\n","\r\nimport { LayerName } from \"../../../Layer/Base/GridLayerBase\";\r\nimport CandyBase from \"../../../Unit/Candy/Base/CandyBase\";\r\nimport Grid from \"../../Grid\";\r\nimport GridStateBase, { GridStateType } from \"../Base/GridStateBase\";\r\n\r\nexport default class GridStateNormal extends GridStateBase {\r\n    public static create(): GridStateNormal {\r\n        let instance = new GridStateNormal();\r\n        instance.init();\r\n        return instance;\r\n    }\r\n\r\n    protected init() {\r\n        super.init(GridStateType.Normal)\r\n    }\r\n\r\n    private _lastTouchPosition: cc.Vec2 = cc.v2(-1, -1);\r\n\r\n    public onTouchStart(onwer: Grid, pos: cc.Vec2) {\r\n        let logicalPos = onwer.getLogicalPositionWithPixelPositon(pos);\r\n        let candy: CandyBase = onwer.getUnit(LayerName.Candy, logicalPos) as CandyBase\r\n        if (candy) {\r\n            candy.setSelected(!candy.getSelected());\r\n        }\r\n        this._lastTouchPosition = logicalPos;\r\n    }\r\n    public onTouchMove(onwer: Grid, pos: cc.Vec2) {\r\n\r\n        let logicalPos = onwer.getLogicalPositionWithPixelPositon(pos);\r\n        if (!logicalPos.equals(this._lastTouchPosition)) {\r\n            let candy: CandyBase = onwer.getUnit(LayerName.Candy, logicalPos) as CandyBase\r\n            if (candy) {\r\n                candy.setSelected(!candy.getSelected());\r\n            }\r\n            this._lastTouchPosition = logicalPos;\r\n        }\r\n\r\n    }\r\n    public onTouchEnd(onwer: Grid, pos: cc.Vec2) {\r\n        this._lastTouchPosition = cc.v2(-1, -1);\r\n    }\r\n    public onTouchCancel(onwer: Grid, pos: cc.Vec2) {\r\n        this._lastTouchPosition = cc.v2(-1, -1);\r\n    }\r\n}\r\n","\r\nimport GridStateBase, { GridStateType } from \"./GridStateBase\";\r\nexport default class GridStateNull extends GridStateBase {\r\n    public static create(): GridStateNull {\r\n        let instance = new GridStateNull();\r\n        instance.init();\r\n        return instance;\r\n    }\r\n\r\n    protected init() {\r\n        super.init(GridStateType.None)\r\n    }\r\n}\r\n","\r\nimport GridLayerBase, { LayerName } from \"../Layer/Base/GridLayerBase\";\r\nimport UnitBase from \"../Unit/Base/UnitBase\";\r\nimport CandyBase from \"../Unit/Candy/Base/CandyBase\";\r\nimport DropSceneAssetCache from \"../Utils/DropSceneAssetCache\";\r\nimport GridStateBase from \"./State/Base/GridStateBase\";\r\nimport GridStateMachine from \"./State/Base/GridStateMachine\";\r\nimport GridStateCreate from \"./State/Create/GridStateCreate\";\r\nimport GridStateDrop from \"./State/Drop/GridStateDrop\";\r\n\r\nconst { ccclass, property } = cc._decorator;\r\n\r\n@ccclass\r\nexport default class Grid extends cc.Component {\r\n\r\n    public static create(level: number, viewSize: cc.Size, cellSize: cc.Size, gridSize: cc.Size): Grid {\r\n        let res: cc.Prefab = DropSceneAssetCache.getPrefab(\"prefab/Game/Grid/Grid\");\r\n        if (res) {\r\n            let node: cc.Node = cc.instantiate(res);\r\n            if (node) {\r\n                let grid = node.getComponent(Grid);\r\n                if (grid) {\r\n                    grid.init(level, viewSize, cellSize, gridSize)\r\n                    return grid;\r\n                }\r\n            }\r\n        }\r\n        return null;\r\n    }\r\n\r\n    @property(cc.Node)\r\n    layerRoot: cc.Node = null;\r\n\r\n    private _origin: cc.Vec2 = cc.v2(0, 0);\r\n    public getOrigin(): cc.Vec2 {\r\n        return this._origin;\r\n    }\r\n    public setOrigin(pos: cc.Vec2) {\r\n        this._origin = pos;\r\n    }\r\n    private _cellSize: cc.Size = cc.size(75, 75);\r\n    public getCellSize(): cc.Size {\r\n        return this._cellSize;\r\n    }\r\n    public setCellSize(size: cc.Size) {\r\n        this._cellSize = size;\r\n    }\r\n\r\n    private _mapSize: cc.Size = cc.size(9, 12);\r\n    public getMapSize(): cc.Size {\r\n        return this._mapSize;\r\n    }\r\n    public setMapSize(size: cc.Size) {\r\n        this._mapSize = size;\r\n    }\r\n\r\n    private _stateMachine: GridStateMachine = null;\r\n    public getStateMachine(): GridStateMachine {\r\n        return this._stateMachine;\r\n    }\r\n\r\n    public getCurrentState(): GridStateBase {\r\n        return this._stateMachine.getCurrentState();\r\n    }\r\n\r\n    public setCurrentState(state: GridStateBase) {\r\n        this._stateMachine.setCurrentState(state);\r\n    }\r\n\r\n    private _layers: { [key: string]: GridLayerBase } = {};\r\n    public getLayers(): { [key: string]: GridLayerBase } {\r\n        return this._layers;\r\n    }\r\n\r\n    public getPixelPositionWithLogicalPositon(logicalPosition: cc.Vec2): cc.Vec2 {\r\n        return cc.v2(this._cellSize.width * logicalPosition.x, this._cellSize.height * logicalPosition.y).add(this._origin);\r\n    }\r\n\r\n    public getLogicalPositionWithPixelPositon(pixelPosition: cc.Vec2): cc.Vec2 {\r\n        let column = Math.floor(pixelPosition.x / this._cellSize.width);\r\n        let row = Math.floor(pixelPosition.y / this._cellSize.height);\r\n        return cc.v2(column, row);\r\n    }\r\n\r\n    public getLayer(id: string): GridLayerBase {\r\n        return this._layers[id];\r\n    }\r\n\r\n    public addLayer(layer: GridLayerBase) {\r\n        layer.grid = this;\r\n        this._layers[layer.id] = layer;\r\n        this.layerRoot.addChild(layer.node);\r\n    }\r\n\r\n    public removeLayer(id: number): GridLayerBase {\r\n        let layer = this._layers[id];\r\n        if (layer) {\r\n            layer.node.parent = null;\r\n            layer.grid = null;\r\n        }\r\n        return layer;\r\n    }\r\n\r\n    public getUnit(id: string, logicalPosition: cc.Vec2): UnitBase {\r\n        let layer = this.getLayer(id);\r\n        if (layer) {\r\n            return layer.getUnit(logicalPosition);\r\n        }\r\n        return null;\r\n    }\r\n\r\n    public setUnit(id: string, logicalPosition: cc.Vec2, unit: UnitBase): void {\r\n        let layer = this.getLayer(id);\r\n        if (layer) {\r\n            layer.setUnit(logicalPosition, unit);\r\n        }\r\n    }\r\n\r\n    public removeUnit(id: string, logicalPosition: cc.Vec2): UnitBase {\r\n        let layer = this.getLayer(id);\r\n        if (layer) {\r\n            return layer.removeUnit(logicalPosition);\r\n        }\r\n        return null;\r\n    }\r\n\r\n    public onTouchStart(event: cc.Event.EventTouch) {\r\n        let pos = this.layerRoot.convertToNodeSpaceAR(event.getLocation());\r\n        this._stateMachine.onTouchStart(pos)\r\n    }\r\n    public onTouchMove(event: cc.Event.EventTouch) {\r\n        let pos = this.layerRoot.convertToNodeSpaceAR(event.getLocation());\r\n        this._stateMachine.onTouchMove(pos)\r\n    }\r\n    public onTouchEnd(event: cc.Event.EventTouch) {\r\n        let pos = this.layerRoot.convertToNodeSpaceAR(event.getLocation());\r\n        this._stateMachine.onTouchEnd(pos)\r\n    }\r\n    public onTouchCancel(event: cc.Event.EventTouch) {\r\n        let pos = this.layerRoot.convertToNodeSpaceAR(event.getLocation());\r\n        this._stateMachine.onTouchCancel(pos)\r\n    }\r\n\r\n    protected init(level: number, viewSize: cc.Size, cellSize: cc.Size, gridSize: cc.Size) {\r\n        this._stateMachine = GridStateMachine.create(this);\r\n        this.setCurrentState(GridStateCreate.create(level, viewSize, cellSize, gridSize))\r\n    }\r\n\r\n    public updateGrid(dt: number) {\r\n        this._stateMachine.update(dt);\r\n    }\r\n\r\n    public clearSelectedCandy() {\r\n        let mapSize = this.getMapSize();\r\n        for (let row = 0; row < mapSize.height; row++) {\r\n            for (let column = 0; column < mapSize.width; column++) {\r\n                let candy: CandyBase = this.getUnit(LayerName.Candy, cc.v2(column, row)) as CandyBase;\r\n                if (candy && candy.getSelected()) {\r\n                    this.removeUnit(LayerName.Candy, cc.v2(column, row));\r\n                }\r\n            }\r\n        }\r\n        this.setCurrentState(GridStateDrop.create());\r\n    }\r\n}\r\n","\r\nimport UnitBase from \"../../Base/UnitBase\";\r\nimport { UnitCategory, UnitKind } from \"../../Base/UnitDefines\";\r\nimport MarkStateNormal from \"./State/MarkStateNormal\";\r\n\r\nconst { ccclass, property } = cc._decorator;\r\n\r\n@ccclass\r\nexport default class MarkBase extends UnitBase {\r\n    protected initMark(kind: UnitKind) {\r\n        super.initUnit(UnitCategory.Mark, kind);\r\n        this.setCurrentState(MarkStateNormal.create());\r\n    }\r\n}\r\n","import { UnitKind } from \"../Base/UnitDefines\";\r\nimport MarkBase from \"./Base/MarkBase\";\r\n\r\nexport default class MarkFactory {\r\n\r\n    public static createMark(param: { [key: string]: any }): MarkBase {\r\n        let kind = param[\"kind\"];\r\n        switch (kind) {\r\n            case UnitKind.MarkEntrance: {\r\n\r\n            }\r\n                break;\r\n            case UnitKind.MarkExit: {\r\n\r\n            }\r\n                break;\r\n            default:\r\n                break;\r\n        }\r\n        return null\r\n    }\r\n}\r\n","\r\n\r\nimport UnitStateBase, { UnitStateType } from \"../../../Base/State/UnitStateBase\";\r\n\r\nexport default class MarkStateNormal extends UnitStateBase {\r\n    public static create(): MarkStateNormal {\r\n        let instance = new MarkStateNormal();\r\n        instance.init();\r\n        return instance;\r\n    }\r\n\r\n    protected init() {\r\n        super.init(UnitStateType.Normal);\r\n    }\r\n}\r\n","import Grid from \"../../Grid/Grid\";\r\nimport GridLayerBase from \"../../Layer/Base/GridLayerBase\";\r\nimport UnitStateBase, { UnitStateType } from \"./State/UnitStateBase\";\r\nimport UnitStateMachine from \"./State/UnitStateMachine\";\r\nimport UnitStateNull from \"./State/UnitStateNull\";\r\nimport { UnitCategory, UnitColor, UnitKind } from \"./UnitDefines\";\r\n\r\n\r\nconst { ccclass, property } = cc._decorator;\r\n\r\n@ccclass\r\nexport default abstract class UnitBase extends cc.Component {\r\n\r\n\r\n\r\n\r\n    private _unitCategory: UnitCategory = UnitCategory.None;\r\n    public getUnitCategory(): UnitCategory {\r\n        return this._unitCategory;\r\n    }\r\n    protected setUnitCategory(category: UnitCategory) {\r\n        this._unitCategory = category;\r\n    }\r\n\r\n\r\n    private _unitKind: UnitKind = UnitKind.None;\r\n    public getUnitKind(): UnitKind {\r\n        return this._unitKind;\r\n    }\r\n    protected setUnitKind(kind: UnitKind) {\r\n        this._unitKind = kind;\r\n    }\r\n\r\n    private _healthPoint: number = 1;\r\n    public getHP(): number {\r\n        return this._healthPoint;\r\n    }\r\n    public setHp(hp: number) {\r\n        this._healthPoint = hp;\r\n    }\r\n\r\n    private _unitColor: UnitColor = UnitColor.None;\r\n    public getColor(): UnitColor {\r\n        return this._unitColor;\r\n    }\r\n    public setColor(color: UnitColor) {\r\n        this._unitColor = color;\r\n    }\r\n\r\n    private _layer: GridLayerBase = null;\r\n    public get layer(): GridLayerBase {\r\n        return this._layer;\r\n    }\r\n    public set layer(layer: GridLayerBase) {\r\n        this._layer = layer;\r\n    }\r\n\r\n    public get grid(): Grid {\r\n        return this._layer.grid;\r\n    }\r\n    private _logicalPostion: cc.Vec2 = cc.v2(0, 0);\r\n    public getLogicalPostion(): cc.Vec2 {\r\n        return this._logicalPostion;\r\n    }\r\n    public setLogicalPostion(pos: cc.Vec2) {\r\n        this._logicalPostion = pos;\r\n    }\r\n\r\n    public getPixelPosition(): cc.Vec2 {\r\n        return this.node.getPosition();\r\n    }\r\n    public setPixelPosition(pos: cc.Vec2) {\r\n        this.node.setPosition(pos);\r\n    }\r\n\r\n    private _stateMachine: UnitStateMachine = null;\r\n    public getStateMachine(): UnitStateMachine {\r\n        return this._stateMachine;\r\n    }\r\n\r\n    public getCurrentState(): UnitStateBase {\r\n        return this._stateMachine.getCurrentState();\r\n    }\r\n\r\n    public setCurrentState(state: UnitStateBase) {\r\n        this._stateMachine.setCurrentState(state);\r\n    }\r\n\r\n    protected initUnit(category: UnitCategory, kind: UnitKind) {\r\n        this.setUnitCategory(category);\r\n        this.setUnitKind(kind);\r\n        this._stateMachine = UnitStateMachine.create(this)\r\n        this.setCurrentState(UnitStateNull.create());\r\n    }\r\n\r\n    public updateUnit(dt: number) {\r\n        this._stateMachine.update(dt);\r\n    }\r\n\r\n}\r\n","\r\nexport enum UnitCategory {\r\n    None = 0,\r\n    Frame = 10000,\r\n    Floor = 20000,\r\n    Candy = 60000,\r\n    Mark = 90000,\r\n}\r\n\r\nexport enum UnitColor {\r\n    None = 0,\r\n    Begin = 1,\r\n    Red = 1,\r\n    Green,\r\n    Blue,\r\n    Yellow,\r\n    Orange,\r\n    Purple,\r\n    End\r\n}\r\n\r\nexport enum UnitKind {\r\n    None = 0,\r\n\r\n    FrameNormal = 10001,\r\n\r\n    FloorFixed = 20001,\r\n    FloorEntrance = 20002,\r\n    FloorExit = 20003,\r\n\r\n    CandyFruit = 60001,\r\n    CandyCake = 60002,\r\n\r\n    MarkEntrance = 90001,\r\n    MarkExit = 90002\r\n}\r\n\r\n","\r\nimport Message from \"../../../../../../../scripts/Frameworks/EWS/FSM/Message\";\r\nimport State from \"../../../../../../../scripts/Frameworks/EWS/FSM/State\";\r\nimport UnitBase from \"../UnitBase\";\r\n\r\nexport enum UnitStateType {\r\n    None = 0,\r\n    Normal,\r\n    Drop,\r\n    Born,\r\n}\r\n\r\nexport default class UnitStateBase extends State<UnitBase> {\r\n\r\n\r\n    private _type: UnitStateType = UnitStateType.None;\r\n    public getType(): UnitStateType {\r\n        return this._type;\r\n    }\r\n\r\n    protected init(type: UnitStateType) {\r\n        this._type = type;\r\n    }\r\n    public enter(onwer: UnitBase): void {\r\n\r\n    }\r\n    public update(onwer: UnitBase, deltaTime: number): void {\r\n\r\n    }\r\n    public exit(onwer: UnitBase): void {\r\n\r\n    }\r\n    public onMessage(message: Message): boolean {\r\n        return false;\r\n    }\r\n    public reset(): void {\r\n\r\n    }\r\n}\r\n","\r\n\r\nimport SimpleStateMachine from \"../../../../../../../scripts/Frameworks/EWS/FSM/SimpleStateMachine\";\r\nimport UnitBase from \"../UnitBase\";\r\nimport UnitStateBase from \"./UnitStateBase\";\r\n\r\n\r\n\r\nconst { ccclass, property } = cc._decorator;\r\n\r\n@ccclass\r\nexport default class UnitStateMachine extends SimpleStateMachine<UnitBase> {\r\n\r\n    public static create(onwer: UnitBase) {\r\n        let instance = new UnitStateMachine(onwer);\r\n        return instance;\r\n    }\r\n\r\n    public getCurrentState(): UnitStateBase {\r\n        return super.getCurrentState() as UnitStateBase;\r\n    }\r\n\r\n    public setCurrentState(newState: UnitStateBase): void {\r\n        super.setCurrentState(newState);\r\n    }\r\n}\r\n","import UnitStateBase, { UnitStateType } from \"./UnitStateBase\";\r\n\r\nexport default class UnitStateNull extends UnitStateBase {\r\n    public static create(): UnitStateNull {\r\n        let instance = new UnitStateNull();\r\n        instance.init();\r\n        return instance;\r\n    }\r\n\r\n    protected init() {\r\n        super.init(UnitStateType.None)\r\n    }\r\n}\r\n"],"file":"index.js"}