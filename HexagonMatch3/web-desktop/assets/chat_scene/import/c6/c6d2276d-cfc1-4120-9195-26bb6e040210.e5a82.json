[1,0,0,[["cc.TextAsset",["_name","text"],1]],[[0,0,1,3]],[[0,"proto.d","import * as $protobuf from \"protobufjs\";\n/** Namespace Battle. */\nexport namespace Battle {\n\n    /** C2S_CMD enum. */\n    enum C2S_CMD {\n        Test = 10001\n    }\n\n    /** S2C_CMD enum. */\n    enum S2C_CMD {\n        Test = 20001\n    }\n\n    /** Properties of a Person. */\n    interface IPerson {\n\n        /** Person name */\n        name?: (string|null);\n\n        /** Person id */\n        id?: (number|null);\n\n        /** Person email */\n        email?: (string|null);\n    }\n\n    /** Represents a Person. */\n    class Person implements IPerson {\n\n        /**\n         * Constructs a new Person.\n         * @param [properties] Properties to set\n         */\n        constructor(properties?: Battle.IPerson);\n\n        /** Person name. */\n        public name: string;\n\n        /** Person id. */\n        public id: number;\n\n        /** Person email. */\n        public email: string;\n\n        /**\n         * Creates a new Person instance using the specified properties.\n         * @param [properties] Properties to set\n         * @returns Person instance\n         */\n        public static create(properties?: Battle.IPerson): Battle.Person;\n\n        /**\n         * Encodes the specified Person message. Does not implicitly {@link Battle.Person.verify|verify} messages.\n         * @param message Person message or plain object to encode\n         * @param [writer] Writer to encode to\n         * @returns Writer\n         */\n        public static encode(message: Battle.IPerson, writer?: $protobuf.Writer): $protobuf.Writer;\n\n        /**\n         * Encodes the specified Person message, length delimited. Does not implicitly {@link Battle.Person.verify|verify} messages.\n         * @param message Person message or plain object to encode\n         * @param [writer] Writer to encode to\n         * @returns Writer\n         */\n        public static encodeDelimited(message: Battle.IPerson, writer?: $protobuf.Writer): $protobuf.Writer;\n\n        /**\n         * Decodes a Person message from the specified reader or buffer.\n         * @param reader Reader or buffer to decode from\n         * @param [length] Message length if known beforehand\n         * @returns Person\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        public static decode(reader: ($protobuf.Reader|Uint8Array), length?: number): Battle.Person;\n\n        /**\n         * Decodes a Person message from the specified reader or buffer, length delimited.\n         * @param reader Reader or buffer to decode from\n         * @returns Person\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        public static decodeDelimited(reader: ($protobuf.Reader|Uint8Array)): Battle.Person;\n\n        /**\n         * Verifies a Person message.\n         * @param message Plain object to verify\n         * @returns `null` if valid, otherwise the reason why it is not\n         */\n        public static verify(message: { [k: string]: any }): (string|null);\n\n        /**\n         * Creates a Person message from a plain object. Also converts values to their respective internal types.\n         * @param object Plain object\n         * @returns Person\n         */\n        public static fromObject(object: { [k: string]: any }): Battle.Person;\n\n        /**\n         * Creates a plain object from a Person message. Also converts values to other types if specified.\n         * @param message Person\n         * @param [options] Conversion options\n         * @returns Plain object\n         */\n        public static toObject(message: Battle.Person, options?: $protobuf.IConversionOptions): { [k: string]: any };\n\n        /**\n         * Converts this Person to JSON.\n         * @returns JSON object\n         */\n        public toJSON(): { [k: string]: any };\n    }\n}\n\n/** Namespace Chat. */\nexport namespace Chat {\n\n    /** C2S_CMD enum. */\n    enum C2S_CMD {\n        Message = 10001\n    }\n\n    /** S2C_CMD enum. */\n    enum S2C_CMD {\n        Message = 20001\n    }\n\n    /** Properties of a Message. */\n    interface IMessage {\n\n        /** Message word */\n        word?: (string|null);\n\n        /** Message timestamp */\n        timestamp?: (number|null);\n    }\n\n    /** Represents a Message. */\n    class Message implements IMessage {\n\n        /**\n         * Constructs a new Message.\n         * @param [properties] Properties to set\n         */\n        constructor(properties?: Chat.IMessage);\n\n        /** Message word. */\n        public word: string;\n\n        /** Message timestamp. */\n        public timestamp: number;\n\n        /**\n         * Creates a new Message instance using the specified properties.\n         * @param [properties] Properties to set\n         * @returns Message instance\n         */\n        public static create(properties?: Chat.IMessage): Chat.Message;\n\n        /**\n         * Encodes the specified Message message. Does not implicitly {@link Chat.Message.verify|verify} messages.\n         * @param message Message message or plain object to encode\n         * @param [writer] Writer to encode to\n         * @returns Writer\n         */\n        public static encode(message: Chat.IMessage, writer?: $protobuf.Writer): $protobuf.Writer;\n\n        /**\n         * Encodes the specified Message message, length delimited. Does not implicitly {@link Chat.Message.verify|verify} messages.\n         * @param message Message message or plain object to encode\n         * @param [writer] Writer to encode to\n         * @returns Writer\n         */\n        public static encodeDelimited(message: Chat.IMessage, writer?: $protobuf.Writer): $protobuf.Writer;\n\n        /**\n         * Decodes a Message message from the specified reader or buffer.\n         * @param reader Reader or buffer to decode from\n         * @param [length] Message length if known beforehand\n         * @returns Message\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        public static decode(reader: ($protobuf.Reader|Uint8Array), length?: number): Chat.Message;\n\n        /**\n         * Decodes a Message message from the specified reader or buffer, length delimited.\n         * @param reader Reader or buffer to decode from\n         * @returns Message\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        public static decodeDelimited(reader: ($protobuf.Reader|Uint8Array)): Chat.Message;\n\n        /**\n         * Verifies a Message message.\n         * @param message Plain object to verify\n         * @returns `null` if valid, otherwise the reason why it is not\n         */\n        public static verify(message: { [k: string]: any }): (string|null);\n\n        /**\n         * Creates a Message message from a plain object. Also converts values to their respective internal types.\n         * @param object Plain object\n         * @returns Message\n         */\n        public static fromObject(object: { [k: string]: any }): Chat.Message;\n\n        /**\n         * Creates a plain object from a Message message. Also converts values to other types if specified.\n         * @param message Message\n         * @param [options] Conversion options\n         * @returns Plain object\n         */\n        public static toObject(message: Chat.Message, options?: $protobuf.IConversionOptions): { [k: string]: any };\n\n        /**\n         * Converts this Message to JSON.\n         * @returns JSON object\n         */\n        public toJSON(): { [k: string]: any };\n    }\n\n    /** Properties of a MessageRequest. */\n    interface IMessageRequest {\n\n        /** MessageRequest senderId */\n        senderId?: (string|null);\n\n        /** MessageRequest receiverId */\n        receiverId?: (string|null);\n\n        /** MessageRequest message */\n        message?: (Chat.IMessage|null);\n    }\n\n    /** Represents a MessageRequest. */\n    class MessageRequest implements IMessageRequest {\n\n        /**\n         * Constructs a new MessageRequest.\n         * @param [properties] Properties to set\n         */\n        constructor(properties?: Chat.IMessageRequest);\n\n        /** MessageRequest senderId. */\n        public senderId: string;\n\n        /** MessageRequest receiverId. */\n        public receiverId: string;\n\n        /** MessageRequest message. */\n        public message?: (Chat.IMessage|null);\n\n        /**\n         * Creates a new MessageRequest instance using the specified properties.\n         * @param [properties] Properties to set\n         * @returns MessageRequest instance\n         */\n        public static create(properties?: Chat.IMessageRequest): Chat.MessageRequest;\n\n        /**\n         * Encodes the specified MessageRequest message. Does not implicitly {@link Chat.MessageRequest.verify|verify} messages.\n         * @param message MessageRequest message or plain object to encode\n         * @param [writer] Writer to encode to\n         * @returns Writer\n         */\n        public static encode(message: Chat.IMessageRequest, writer?: $protobuf.Writer): $protobuf.Writer;\n\n        /**\n         * Encodes the specified MessageRequest message, length delimited. Does not implicitly {@link Chat.MessageRequest.verify|verify} messages.\n         * @param message MessageRequest message or plain object to encode\n         * @param [writer] Writer to encode to\n         * @returns Writer\n         */\n        public static encodeDelimited(message: Chat.IMessageRequest, writer?: $protobuf.Writer): $protobuf.Writer;\n\n        /**\n         * Decodes a MessageRequest message from the specified reader or buffer.\n         * @param reader Reader or buffer to decode from\n         * @param [length] Message length if known beforehand\n         * @returns MessageRequest\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        public static decode(reader: ($protobuf.Reader|Uint8Array), length?: number): Chat.MessageRequest;\n\n        /**\n         * Decodes a MessageRequest message from the specified reader or buffer, length delimited.\n         * @param reader Reader or buffer to decode from\n         * @returns MessageRequest\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        public static decodeDelimited(reader: ($protobuf.Reader|Uint8Array)): Chat.MessageRequest;\n\n        /**\n         * Verifies a MessageRequest message.\n         * @param message Plain object to verify\n         * @returns `null` if valid, otherwise the reason why it is not\n         */\n        public static verify(message: { [k: string]: any }): (string|null);\n\n        /**\n         * Creates a MessageRequest message from a plain object. Also converts values to their respective internal types.\n         * @param object Plain object\n         * @returns MessageRequest\n         */\n        public static fromObject(object: { [k: string]: any }): Chat.MessageRequest;\n\n        /**\n         * Creates a plain object from a MessageRequest message. Also converts values to other types if specified.\n         * @param message MessageRequest\n         * @param [options] Conversion options\n         * @returns Plain object\n         */\n        public static toObject(message: Chat.MessageRequest, options?: $protobuf.IConversionOptions): { [k: string]: any };\n\n        /**\n         * Converts this MessageRequest to JSON.\n         * @returns JSON object\n         */\n        public toJSON(): { [k: string]: any };\n    }\n\n    /** MessageErrorCode enum. */\n    enum MessageErrorCode {\n        Succeed = 0,\n        Failed = 1\n    }\n\n    /** Properties of a MessageRespone. */\n    interface IMessageRespone {\n\n        /** MessageRespone senderId */\n        senderId?: (string|null);\n\n        /** MessageRespone receiverId */\n        receiverId?: (string|null);\n\n        /** MessageRespone message */\n        message?: (Chat.IMessage|null);\n\n        /** MessageRespone result */\n        result?: (number|null);\n    }\n\n    /** Represents a MessageRespone. */\n    class MessageRespone implements IMessageRespone {\n\n        /**\n         * Constructs a new MessageRespone.\n         * @param [properties] Properties to set\n         */\n        constructor(properties?: Chat.IMessageRespone);\n\n        /** MessageRespone senderId. */\n        public senderId: string;\n\n        /** MessageRespone receiverId. */\n        public receiverId: string;\n\n        /** MessageRespone message. */\n        public message?: (Chat.IMessage|null);\n\n        /** MessageRespone result. */\n        public result: number;\n\n        /**\n         * Creates a new MessageRespone instance using the specified properties.\n         * @param [properties] Properties to set\n         * @returns MessageRespone instance\n         */\n        public static create(properties?: Chat.IMessageRespone): Chat.MessageRespone;\n\n        /**\n         * Encodes the specified MessageRespone message. Does not implicitly {@link Chat.MessageRespone.verify|verify} messages.\n         * @param message MessageRespone message or plain object to encode\n         * @param [writer] Writer to encode to\n         * @returns Writer\n         */\n        public static encode(message: Chat.IMessageRespone, writer?: $protobuf.Writer): $protobuf.Writer;\n\n        /**\n         * Encodes the specified MessageRespone message, length delimited. Does not implicitly {@link Chat.MessageRespone.verify|verify} messages.\n         * @param message MessageRespone message or plain object to encode\n         * @param [writer] Writer to encode to\n         * @returns Writer\n         */\n        public static encodeDelimited(message: Chat.IMessageRespone, writer?: $protobuf.Writer): $protobuf.Writer;\n\n        /**\n         * Decodes a MessageRespone message from the specified reader or buffer.\n         * @param reader Reader or buffer to decode from\n         * @param [length] Message length if known beforehand\n         * @returns MessageRespone\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        public static decode(reader: ($protobuf.Reader|Uint8Array), length?: number): Chat.MessageRespone;\n\n        /**\n         * Decodes a MessageRespone message from the specified reader or buffer, length delimited.\n         * @param reader Reader or buffer to decode from\n         * @returns MessageRespone\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        public static decodeDelimited(reader: ($protobuf.Reader|Uint8Array)): Chat.MessageRespone;\n\n        /**\n         * Verifies a MessageRespone message.\n         * @param message Plain object to verify\n         * @returns `null` if valid, otherwise the reason why it is not\n         */\n        public static verify(message: { [k: string]: any }): (string|null);\n\n        /**\n         * Creates a MessageRespone message from a plain object. Also converts values to their respective internal types.\n         * @param object Plain object\n         * @returns MessageRespone\n         */\n        public static fromObject(object: { [k: string]: any }): Chat.MessageRespone;\n\n        /**\n         * Creates a plain object from a MessageRespone message. Also converts values to other types if specified.\n         * @param message MessageRespone\n         * @param [options] Conversion options\n         * @returns Plain object\n         */\n        public static toObject(message: Chat.MessageRespone, options?: $protobuf.IConversionOptions): { [k: string]: any };\n\n        /**\n         * Converts this MessageRespone to JSON.\n         * @returns JSON object\n         */\n        public toJSON(): { [k: string]: any };\n    }\n}\n\n/** Namespace Login. */\nexport namespace Login {\n\n    /** C2S_CMD enum. */\n    enum C2S_CMD {\n        Open = 1001,\n        Error = 1002,\n        Close = 1003,\n        Login = 1004,\n        HeartBeat = 1005\n    }\n\n    /** S2C_CMD enum. */\n    enum S2C_CMD {\n        Open = 2001,\n        Error = 2002,\n        Closed = 2003,\n        Login = 2004,\n        HeartBeat = 2005\n    }\n\n    /** Properties of a LoginRequest. */\n    interface ILoginRequest {\n\n        /** LoginRequest userId */\n        userId?: (string|null);\n    }\n\n    /** Represents a LoginRequest. */\n    class LoginRequest implements ILoginRequest {\n\n        /**\n         * Constructs a new LoginRequest.\n         * @param [properties] Properties to set\n         */\n        constructor(properties?: Login.ILoginRequest);\n\n        /** LoginRequest userId. */\n        public userId: string;\n\n        /**\n         * Creates a new LoginRequest instance using the specified properties.\n         * @param [properties] Properties to set\n         * @returns LoginRequest instance\n         */\n        public static create(properties?: Login.ILoginRequest): Login.LoginRequest;\n\n        /**\n         * Encodes the specified LoginRequest message. Does not implicitly {@link Login.LoginRequest.verify|verify} messages.\n         * @param message LoginRequest message or plain object to encode\n         * @param [writer] Writer to encode to\n         * @returns Writer\n         */\n        public static encode(message: Login.ILoginRequest, writer?: $protobuf.Writer): $protobuf.Writer;\n\n        /**\n         * Encodes the specified LoginRequest message, length delimited. Does not implicitly {@link Login.LoginRequest.verify|verify} messages.\n         * @param message LoginRequest message or plain object to encode\n         * @param [writer] Writer to encode to\n         * @returns Writer\n         */\n        public static encodeDelimited(message: Login.ILoginRequest, writer?: $protobuf.Writer): $protobuf.Writer;\n\n        /**\n         * Decodes a LoginRequest message from the specified reader or buffer.\n         * @param reader Reader or buffer to decode from\n         * @param [length] Message length if known beforehand\n         * @returns LoginRequest\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        public static decode(reader: ($protobuf.Reader|Uint8Array), length?: number): Login.LoginRequest;\n\n        /**\n         * Decodes a LoginRequest message from the specified reader or buffer, length delimited.\n         * @param reader Reader or buffer to decode from\n         * @returns LoginRequest\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        public static decodeDelimited(reader: ($protobuf.Reader|Uint8Array)): Login.LoginRequest;\n\n        /**\n         * Verifies a LoginRequest message.\n         * @param message Plain object to verify\n         * @returns `null` if valid, otherwise the reason why it is not\n         */\n        public static verify(message: { [k: string]: any }): (string|null);\n\n        /**\n         * Creates a LoginRequest message from a plain object. Also converts values to their respective internal types.\n         * @param object Plain object\n         * @returns LoginRequest\n         */\n        public static fromObject(object: { [k: string]: any }): Login.LoginRequest;\n\n        /**\n         * Creates a plain object from a LoginRequest message. Also converts values to other types if specified.\n         * @param message LoginRequest\n         * @param [options] Conversion options\n         * @returns Plain object\n         */\n        public static toObject(message: Login.LoginRequest, options?: $protobuf.IConversionOptions): { [k: string]: any };\n\n        /**\n         * Converts this LoginRequest to JSON.\n         * @returns JSON object\n         */\n        public toJSON(): { [k: string]: any };\n    }\n\n    /** LoginErrorCode enum. */\n    enum LoginErrorCode {\n        Succeed = 0,\n        Failed = 1\n    }\n\n    /** Properties of a LoginRespone. */\n    interface ILoginRespone {\n\n        /** LoginRespone userId */\n        userId?: (string|null);\n\n        /** LoginRespone result */\n        result?: (number|null);\n    }\n\n    /** Represents a LoginRespone. */\n    class LoginRespone implements ILoginRespone {\n\n        /**\n         * Constructs a new LoginRespone.\n         * @param [properties] Properties to set\n         */\n        constructor(properties?: Login.ILoginRespone);\n\n        /** LoginRespone userId. */\n        public userId: string;\n\n        /** LoginRespone result. */\n        public result: number;\n\n        /**\n         * Creates a new LoginRespone instance using the specified properties.\n         * @param [properties] Properties to set\n         * @returns LoginRespone instance\n         */\n        public static create(properties?: Login.ILoginRespone): Login.LoginRespone;\n\n        /**\n         * Encodes the specified LoginRespone message. Does not implicitly {@link Login.LoginRespone.verify|verify} messages.\n         * @param message LoginRespone message or plain object to encode\n         * @param [writer] Writer to encode to\n         * @returns Writer\n         */\n        public static encode(message: Login.ILoginRespone, writer?: $protobuf.Writer): $protobuf.Writer;\n\n        /**\n         * Encodes the specified LoginRespone message, length delimited. Does not implicitly {@link Login.LoginRespone.verify|verify} messages.\n         * @param message LoginRespone message or plain object to encode\n         * @param [writer] Writer to encode to\n         * @returns Writer\n         */\n        public static encodeDelimited(message: Login.ILoginRespone, writer?: $protobuf.Writer): $protobuf.Writer;\n\n        /**\n         * Decodes a LoginRespone message from the specified reader or buffer.\n         * @param reader Reader or buffer to decode from\n         * @param [length] Message length if known beforehand\n         * @returns LoginRespone\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        public static decode(reader: ($protobuf.Reader|Uint8Array), length?: number): Login.LoginRespone;\n\n        /**\n         * Decodes a LoginRespone message from the specified reader or buffer, length delimited.\n         * @param reader Reader or buffer to decode from\n         * @returns LoginRespone\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        public static decodeDelimited(reader: ($protobuf.Reader|Uint8Array)): Login.LoginRespone;\n\n        /**\n         * Verifies a LoginRespone message.\n         * @param message Plain object to verify\n         * @returns `null` if valid, otherwise the reason why it is not\n         */\n        public static verify(message: { [k: string]: any }): (string|null);\n\n        /**\n         * Creates a LoginRespone message from a plain object. Also converts values to their respective internal types.\n         * @param object Plain object\n         * @returns LoginRespone\n         */\n        public static fromObject(object: { [k: string]: any }): Login.LoginRespone;\n\n        /**\n         * Creates a plain object from a LoginRespone message. Also converts values to other types if specified.\n         * @param message LoginRespone\n         * @param [options] Conversion options\n         * @returns Plain object\n         */\n        public static toObject(message: Login.LoginRespone, options?: $protobuf.IConversionOptions): { [k: string]: any };\n\n        /**\n         * Converts this LoginRespone to JSON.\n         * @returns JSON object\n         */\n        public toJSON(): { [k: string]: any };\n    }\n\n    /** Properties of a HeartBeatRequest. */\n    interface IHeartBeatRequest {\n\n        /** HeartBeatRequest userId */\n        userId?: (string|null);\n    }\n\n    /** Represents a HeartBeatRequest. */\n    class HeartBeatRequest implements IHeartBeatRequest {\n\n        /**\n         * Constructs a new HeartBeatRequest.\n         * @param [properties] Properties to set\n         */\n        constructor(properties?: Login.IHeartBeatRequest);\n\n        /** HeartBeatRequest userId. */\n        public userId: string;\n\n        /**\n         * Creates a new HeartBeatRequest instance using the specified properties.\n         * @param [properties] Properties to set\n         * @returns HeartBeatRequest instance\n         */\n        public static create(properties?: Login.IHeartBeatRequest): Login.HeartBeatRequest;\n\n        /**\n         * Encodes the specified HeartBeatRequest message. Does not implicitly {@link Login.HeartBeatRequest.verify|verify} messages.\n         * @param message HeartBeatRequest message or plain object to encode\n         * @param [writer] Writer to encode to\n         * @returns Writer\n         */\n        public static encode(message: Login.IHeartBeatRequest, writer?: $protobuf.Writer): $protobuf.Writer;\n\n        /**\n         * Encodes the specified HeartBeatRequest message, length delimited. Does not implicitly {@link Login.HeartBeatRequest.verify|verify} messages.\n         * @param message HeartBeatRequest message or plain object to encode\n         * @param [writer] Writer to encode to\n         * @returns Writer\n         */\n        public static encodeDelimited(message: Login.IHeartBeatRequest, writer?: $protobuf.Writer): $protobuf.Writer;\n\n        /**\n         * Decodes a HeartBeatRequest message from the specified reader or buffer.\n         * @param reader Reader or buffer to decode from\n         * @param [length] Message length if known beforehand\n         * @returns HeartBeatRequest\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        public static decode(reader: ($protobuf.Reader|Uint8Array), length?: number): Login.HeartBeatRequest;\n\n        /**\n         * Decodes a HeartBeatRequest message from the specified reader or buffer, length delimited.\n         * @param reader Reader or buffer to decode from\n         * @returns HeartBeatRequest\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        public static decodeDelimited(reader: ($protobuf.Reader|Uint8Array)): Login.HeartBeatRequest;\n\n        /**\n         * Verifies a HeartBeatRequest message.\n         * @param message Plain object to verify\n         * @returns `null` if valid, otherwise the reason why it is not\n         */\n        public static verify(message: { [k: string]: any }): (string|null);\n\n        /**\n         * Creates a HeartBeatRequest message from a plain object. Also converts values to their respective internal types.\n         * @param object Plain object\n         * @returns HeartBeatRequest\n         */\n        public static fromObject(object: { [k: string]: any }): Login.HeartBeatRequest;\n\n        /**\n         * Creates a plain object from a HeartBeatRequest message. Also converts values to other types if specified.\n         * @param message HeartBeatRequest\n         * @param [options] Conversion options\n         * @returns Plain object\n         */\n        public static toObject(message: Login.HeartBeatRequest, options?: $protobuf.IConversionOptions): { [k: string]: any };\n\n        /**\n         * Converts this HeartBeatRequest to JSON.\n         * @returns JSON object\n         */\n        public toJSON(): { [k: string]: any };\n    }\n\n    /** HeartBeatErrorCode enum. */\n    enum HeartBeatErrorCode {\n        Succeed = 0,\n        Failed = 1\n    }\n\n    /** Properties of a HeartBeatRespone. */\n    interface IHeartBeatRespone {\n\n        /** HeartBeatRespone userId */\n        userId?: (string|null);\n\n        /** HeartBeatRespone result */\n        result?: (number|null);\n    }\n\n    /** Represents a HeartBeatRespone. */\n    class HeartBeatRespone implements IHeartBeatRespone {\n\n        /**\n         * Constructs a new HeartBeatRespone.\n         * @param [properties] Properties to set\n         */\n        constructor(properties?: Login.IHeartBeatRespone);\n\n        /** HeartBeatRespone userId. */\n        public userId: string;\n\n        /** HeartBeatRespone result. */\n        public result: number;\n\n        /**\n         * Creates a new HeartBeatRespone instance using the specified properties.\n         * @param [properties] Properties to set\n         * @returns HeartBeatRespone instance\n         */\n        public static create(properties?: Login.IHeartBeatRespone): Login.HeartBeatRespone;\n\n        /**\n         * Encodes the specified HeartBeatRespone message. Does not implicitly {@link Login.HeartBeatRespone.verify|verify} messages.\n         * @param message HeartBeatRespone message or plain object to encode\n         * @param [writer] Writer to encode to\n         * @returns Writer\n         */\n        public static encode(message: Login.IHeartBeatRespone, writer?: $protobuf.Writer): $protobuf.Writer;\n\n        /**\n         * Encodes the specified HeartBeatRespone message, length delimited. Does not implicitly {@link Login.HeartBeatRespone.verify|verify} messages.\n         * @param message HeartBeatRespone message or plain object to encode\n         * @param [writer] Writer to encode to\n         * @returns Writer\n         */\n        public static encodeDelimited(message: Login.IHeartBeatRespone, writer?: $protobuf.Writer): $protobuf.Writer;\n\n        /**\n         * Decodes a HeartBeatRespone message from the specified reader or buffer.\n         * @param reader Reader or buffer to decode from\n         * @param [length] Message length if known beforehand\n         * @returns HeartBeatRespone\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        public static decode(reader: ($protobuf.Reader|Uint8Array), length?: number): Login.HeartBeatRespone;\n\n        /**\n         * Decodes a HeartBeatRespone message from the specified reader or buffer, length delimited.\n         * @param reader Reader or buffer to decode from\n         * @returns HeartBeatRespone\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        public static decodeDelimited(reader: ($protobuf.Reader|Uint8Array)): Login.HeartBeatRespone;\n\n        /**\n         * Verifies a HeartBeatRespone message.\n         * @param message Plain object to verify\n         * @returns `null` if valid, otherwise the reason why it is not\n         */\n        public static verify(message: { [k: string]: any }): (string|null);\n\n        /**\n         * Creates a HeartBeatRespone message from a plain object. Also converts values to their respective internal types.\n         * @param object Plain object\n         * @returns HeartBeatRespone\n         */\n        public static fromObject(object: { [k: string]: any }): Login.HeartBeatRespone;\n\n        /**\n         * Creates a plain object from a HeartBeatRespone message. Also converts values to other types if specified.\n         * @param message HeartBeatRespone\n         * @param [options] Conversion options\n         * @returns Plain object\n         */\n        public static toObject(message: Login.HeartBeatRespone, options?: $protobuf.IConversionOptions): { [k: string]: any };\n\n        /**\n         * Converts this HeartBeatRespone to JSON.\n         * @returns JSON object\n         */\n        public toJSON(): { [k: string]: any };\n    }\n}\n"]],0,0,[],[],[]]