{"version":3,"sources":["assets/bundles/main_scene/script/MainScene.ts","assets/bundles/main_scene/script/RedDotItem.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AACA;AACA;AACA;AAGM;AAEN;AAAuC;AAAvC;;AAmIA;AAlIW;AACH;AACJ;AAEA;AACA;AAEA;AACA;AAEA;AACA;AAGA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEO;AAEP;AACO;AAEP;AACA;AACI;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACJ;AACO;AACH;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACJ;AACO;AAEP;AACO;AAEP;AACO;AAEP;AACO;AAEP;AAEQ;AACJ;AACA;AACA;AACA;AACJ;AAEQ;AACJ;AACA;AACA;AACA;AACJ;AAEQ;AACJ;AACA;AACA;AACA;AACJ;AAEQ;AACJ;AACA;AACA;AACA;AACJ;AAGQ;AACJ;AACA;AACA;AACA;AACJ;AA3GiB;AADpB;AACoB;AAmIrB;AAnIA;AAAqB;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACPrB;AACA;AAGM;AAGN;AAAwC;AAAxC;;AAoCA;AAnCI;AAGA;AACI;AACA;AACJ;AAEA;AACI;AACJ;AAEA;AAEA;AAEA;AAEU;AACN;AACI;AAAY;AACR;AACA;AACH;AACG;AACJ;AAAY;AACR;AACA;AACH;AACG;AAEJ;AACI;AACP;AACL;AAnCiB;AADpB;AACoB;AAoCrB;AApCA;AAAqB","sourcesContent":["import { AssetBundleID, SceneName } from \"../../../scripts/Defines/Defines\";\r\nimport IGame from \"../../../scripts/Frameworks/IGame/IGame\";\r\nimport PreloadBundleInfo from \"../../../scripts/Frameworks/SceneDirector/PreloadAssetInfo\";\r\nimport SceneBase from \"../../../scripts/Frameworks/SceneDirector/SceneBase\";\r\nimport SceneEnterParamBase from \"../../../scripts/Frameworks/SceneDirector/SceneEnterParamBase\";\r\n\r\nconst { ccclass, property } = cc._decorator;\r\n@ccclass\r\nexport default class MainScene extends SceneBase {\r\n    public getSceneName(): string {\r\n        return SceneName.MainScene;\r\n    }\r\n\r\n    // @property(cc.Node)\r\n    // startBtn: cc.Node = null;\r\n\r\n    // @property(cc.Node)\r\n    // shaderBtn: cc.Node = null;\r\n\r\n    // @property(cc.Node)\r\n    // lockStepBtn: cc.Node = null;\r\n\r\n\r\n    // @property([SimpleCheckBox])\r\n    // checkBoxes: SimpleCheckBox[] = [];\r\n\r\n    // @property(cc.TiledMap)\r\n    // tiledMap: cc.TiledMap = null;\r\n\r\n    // @property([cc.String])\r\n    // texts: string[] = [];\r\n    // @property([cc.Boolean])\r\n    // bools: boolean[] = [];\r\n    // @property([cc.Float])\r\n    // floats: number[] = [];\r\n    // @property([cc.Integer])\r\n    // ints: number[] = [];\r\n    // @property([cc.Vec2])\r\n    // vectors: cc.Vec2[] = [];\r\n\r\n    public onSceneLoad(): void {\r\n\r\n    }\r\n    public onSceneEnable(): void {\r\n\r\n    }\r\n    onSceneEnter(param: SceneEnterParamBase) {\r\n        // this.startBtn.on(cc.Node.EventType.TOUCH_END, this.onStartBtn, this);\r\n        // this.shaderBtn.on(cc.Node.EventType.TOUCH_END, this.onShaderBtn, this);\r\n        // this.lockStepBtn.on(cc.Node.EventType.TOUCH_END, this.onLockStepBtn, this)\r\n        // for (let index = 0; index < this.checkBoxes.length; index++) {\r\n        //     let checkBox = this.checkBoxes[index];\r\n        //     checkBox.tag = index;\r\n        //     checkBox.setStatusChangeHandler(this, this.onCheckbox);\r\n        // }\r\n    }\r\n    public onSceneStart(): void {\r\n        // AssetCache.getInstance().getAsset(\"MainScene/TMX/test\", cc.TiledMapAsset, () => { }, (error: Error, tmxAsset: cc.TiledMapAsset) => {\r\n        //     this.tiledMap.tmxAsset = tmxAsset;\r\n        //     let mapName = this.tiledMap.getProperty(\"MapName\");\r\n        //     let ground = this.tiledMap.getLayer(\"Ground\");\r\n        //     let gid = ground.getTileGIDAt(cc.v2(10, 19))\r\n        //     let properties = this.tiledMap.getPropertiesForGID(gid)\r\n        //     let tileName = properties[\"tileName\"];\r\n\r\n        //     console.log(mapName + \" \" + tileName);\r\n        // });\r\n    }\r\n    public onSceneUpdate(dt: number): void {\r\n\r\n    }\r\n    public onSceneDisable(): void {\r\n\r\n    }\r\n    public onSceneExit(): void {\r\n\r\n    }\r\n    public onSceneDestroy(): void {\r\n\r\n    }\r\n\r\n    private onStartBtn(event: cc.Event.EventCustom) {\r\n        let preloadInfo = PreloadBundleInfo.create();\r\n        preloadInfo.extiBundles = [AssetBundleID.MainScene];\r\n        preloadInfo.enterBundles[AssetBundleID.GameScene] = [\"prefab\", \"texture\"];\r\n        IGame.getInstance().replaceSceneWithSwitchScene(preloadInfo, SceneName.GameScene);\r\n    }\r\n\r\n    private onShaderBtn(event: cc.Event.EventCustom) {\r\n        let preloadInfo = PreloadBundleInfo.create();\r\n        preloadInfo.extiBundles = [AssetBundleID.MainScene];\r\n        preloadInfo.enterBundles[AssetBundleID.ShaderScene] = [\"prefab\", \"shader\", \"texture\"];\r\n        IGame.getInstance().replaceSceneWithSwitchScene(preloadInfo, SceneName.ShaderScene);\r\n    }\r\n\r\n    private onLockStepBtn(event: cc.Event.EventCustom) {\r\n        let preloadInfo = PreloadBundleInfo.create();\r\n        preloadInfo.extiBundles = [AssetBundleID.MainScene];\r\n        preloadInfo.enterBundles[AssetBundleID.LockStepScene] = [];\r\n        IGame.getInstance().replaceSceneWithSwitchScene(preloadInfo, SceneName.LockStepScene);\r\n    }\r\n\r\n    private onChatBtn(event: cc.Event.EventCustom) {\r\n        let preloadInfo = PreloadBundleInfo.create();\r\n        preloadInfo.extiBundles = [AssetBundleID.MainScene];\r\n        preloadInfo.enterBundles[AssetBundleID.ChatScene] = [];\r\n        IGame.getInstance().replaceSceneWithSwitchScene(preloadInfo, SceneName.ChatScene);\r\n    }\r\n\r\n\r\n    private onDropBtn(event: cc.Event.EventCustom) {\r\n        let preloadInfo = PreloadBundleInfo.create();\r\n        preloadInfo.extiBundles = [AssetBundleID.MainScene];\r\n        preloadInfo.enterBundles[AssetBundleID.DropScene] = [\"config\", \"prefab\", \"texture\"];\r\n        IGame.getInstance().replaceSceneWithSwitchScene(preloadInfo, SceneName.DropScene);\r\n    }\r\n\r\n    // private _lastCheckBox: SimpleCheckBox = null;\r\n    // private onCheckbox(checkBox: SimpleCheckBox) {\r\n    //     if (this._lastCheckBox) {\r\n    //         this._lastCheckBox.unchecked();\r\n    //     }\r\n    //     checkBox.checked();\r\n    //     this._lastCheckBox = checkBox;\r\n\r\n    //     switch (checkBox.tag) {\r\n    //         case 1: {\r\n    //             RedDotNotifyCenter.getInstance().dispatchEvent(new RedDotEvent(\"111\"));\r\n    //         }\r\n    //             break;\r\n    //         case 2: {\r\n    //             RedDotNotifyCenter.getInstance().dispatchEvent(new RedDotEvent(\"222\"));\r\n    //         }\r\n    //             break;\r\n\r\n    //         default:\r\n    //             break;\r\n    //     }\r\n    // }\r\n}\r\n","import RedDotEvent from \"../../../scripts/Frameworks/Components/RedDot/RedDotEvent\";\r\nimport RedDotObserver from \"../../../scripts/Frameworks/Components/RedDot/RedDotObserver\";\r\nimport Debuger from \"../../../scripts/Frameworks/Utils/Debuger\";\r\n\r\n\r\nconst { ccclass, property } = cc._decorator;\r\n\r\n@ccclass\r\nexport default class RedDotItem extends RedDotObserver {\r\n    // LIFE-CYCLE CALLBACKS:\r\n\r\n\r\n    onLoad() {\r\n        this.listen(\"111\");\r\n        this.listen(\"222\");\r\n    }\r\n\r\n    onDestroy() {\r\n        this.unlistenAll();\r\n    }\r\n\r\n    start() {\r\n\r\n    }\r\n\r\n    // update (dt) {}\r\n\r\n    protected onRedDotEvent(event: RedDotEvent): void {\r\n        switch (event.eventName) {\r\n            case \"111\": {\r\n                Debuger.log(Debuger.FILTER_TAG01, \"onEvent 111\");\r\n                this.node.active = false;\r\n            }\r\n                break;\r\n            case \"222\": {\r\n                Debuger.log(Debuger.FILTER_TAG01, \"onEvent 222\");\r\n                this.node.active = true;\r\n            }\r\n                break;\r\n\r\n            default:\r\n                break;\r\n        }\r\n    }\r\n}\r\n"],"file":"index.js"}