[1,["ecpdLyjvZBwrvm+cedCcQy","e7q6FL+VZEgLJUjVeDLic/","29FYIk+N1GYaeWH/q1NxQO","312JYturtOx74Zjp9UpOqZ","f0BIwQ8D5Ml7nTNQbh1YlS","f8WIKOqgFNKI7CMu1tlh4l","68J8oyAQdFUrqy37MXmbtE","90AErWL21A4ZPvtxQ3XG8G","3ae7efMv1CLq2ilvUY/tQi","e97GVMl6JHh5Ml5qEDdSGa","08xEIT/khD/rRa8FTwEu+G","2dZjFzFIRIUazgXq53TzGD","95GFo54LdIoblWPYVitCOM","b1WaE71VlGJJLvMeIb4Y6M","98vZmw3X5Bc49SDycUoDt/","6edqs5ui1Fp6h2oJY24tGz","16UsSaLSlNMbUcTntlRyrf","71VhFCTINJM6/Ky3oX9nBT","02kcE0s9pAmLe145ftvpR/","27vHceG65DP5Tpl2A2fmSL","21EY+qw25IgZH98xzMkuJK","c9DWxYs1ZFiIv6fnxDnsVp","44NzHAMg1IR4gLtj4P8TBV","7bYGQXfZNPV4iOT8uiHMv6","c2BU+P7OZMQIdSREsuh/NO","07qfei7uREup/3wW1rGU7R","3d3w35UdVPvLJCRQ+Ih3xw","4f7LVk4FBHSI4h2z0uUUZQ","a2MjXRFdtLlYQ5ouAFv/+R","40YDyOw+dFTLJGGwF7cBHd","0aapy1HvtPZJOqrFe2omCm","54zqzVqApJqJaSkd4mytVq","caRXes44lOY6TyfXDDJduY","6bCtSxSB9HFYu13+oFbUjd","d1eCHugvhP847IMANNzq/3","955zvDv09ANKg5gobSmcks","44wTLheatF1YTij55I/Upp","dfGJOKXo9BLJnuBYYlDoii","6a57Z5rTBIHKFqyqfq+BCg","367IDalgxDmKHAFAi+OzF5","4fvL3oLzhONadBUmk9KCBM","d34PxNx/1EK4Q42E+wyft4","d2kHe6FidKcpV5e1aiNTQM","888lmEkr9DjrZaLIfE1Lct","96rQBAPDlDrbM9X2wOo+I1","9aCDqJILRNmKbDG74bEztD","8cLZQZOVBOII6R2rux3zG5","21UVBkHIVJPJM16jJqm5D7","73oJA92A5OPKpn+ZlUPAj1","12Z0CoumhOP5EFcR1SLa83","466pUSmcNJxJ+0Wavx2lp4","cc6CyJ3v1KZow5rXPRwwcF","f9Gzdnd4RBeaeuXMiHptbu","67SKfO6fxBk5LiWT82hNYb","6e+1QVVTRINIut2fEXrcDu","3fpp3Jvg9NQI684yZMx4fj","caln0gatxJc4jJLV24dhbL","9bs0Qfl6pKzZr+tt3xF85S","56fc2Ai/RFNYpaMT8crweK","b4P/PCArtIdIH38t6mlw8Y","e8Ueib+qJEhL6mXAHdnwbi","e1pctG1jlGP4wa7zKZT0CW"],["node","_spriteFrame","_normalMaterial","_N$normalSprite","_N$pressedSprite","_N$hoverSprite","_N$disabledSprite","_parent","root","data","_effectAsset","_textureSetter","image","slider","nameLabel","_grayMaterial","valueLabel","blue","green","red","_N$target","alpha","offset","radius","threshold","level","enableFrog","cropAlpha","frequency","bothLevel","yLevel","xLevel","nextBtn","quitBtn","previousBtn","layerContainer","scene","angularVelocity","amplitude","toggle","gradient","lineWidth","lineAngle","density"],["cc.Texture2D","cc.SpriteFrame",["cc.Node",["_name","_objFlags","_id","_components","_contentSize","_parent","_children","_trs","_prefab","_color"],0,9,5,1,2,7,4,5],["cc.Widget",["_alignFlags","_bottom","_originalWidth","_top","alignMode","_originalHeight","_isAbsBottom","_isAbsTop","_left","_right","node"],-7,1],["cc.Node",["_name","_objFlags","_components","_prefab","_contentSize","_parent","_children","_trs"],1,12,4,5,1,2,7],["cc.Label",["_string","_N$verticalAlign","_enableWrapText","_N$horizontalAlign","_N$overflow","_N$cacheMode","node","_materials"],-3,1,3],["cc.Sprite",["_sizeMode","_type","_isTrimmedMode","node","_materials","_spriteFrame"],0,1,3,6],["cc.Node",["_name","_objFlags","_parent","_components","_prefab","_contentSize","_trs","_children"],1,1,2,4,5,7,2],["cc.Layout",["_resize","_N$layoutType","_N$spacingY","_N$spacingX","node","_layoutSize"],-1,1,5],["cc.PrefabInfo",["fileId","root"],2,1],["cc.Button",["_N$transition","zoomScale","_N$enableAutoGrayEffect","node","_N$pressedColor","_N$disabledColor","_N$target","_N$normalColor","_N$normalSprite","_N$pressedSprite","_N$hoverSprite","_N$disabledSprite"],0,1,5,5,1,5,6,6,6,6],["cc.Slider",["_N$progress","node","_N$handle"],2,1,1],["cc.Material",["_name","_techniqueData"],1],["cc.Material",["_name","_techniqueData"],2,11],["cc.Prefab",["_name"],2],["16f7fALQkRBU4/czIjYleSa",["node","image","xLevel","yLevel","bothLevel"],3,1,1,1,1,1],["d154b6EG0RGqqXe2MnSrfbv",["node","nameLabel","slider","valueLabel"],3,1,1,1,1],["cc.EffectAsset",["_name","shaders","techniques"],0],["3ba53pFeM5PbozPNk0lEIId",["node","image","slider"],3,1,1,1],["e0167GHCd9Fm7ThfMsGrHSa",["node","image","radius","offset"],3,1,1,1,1],["cc.SceneAsset",["_name","asyncLoadAssets"],1],["cc.Canvas",["_fitWidth","_fitHeight","node","_designResolution"],1,1,5],["22e63XA9YtBzbgg8QSn9PiD",["node","layerContainer","previousBtn","quitBtn","nextBtn","testPrefabs"],3,1,1,1,1,1,3],["cc.Scene",["_name","_active","autoReleaseAssets","_children","_anchorPoint","_trs"],0,2,5,7],["cc.Camera",["_clearFlags","_depth","node"],1,1],["384aetIxfVI1JMYiayB6wtJ",["node","image","red","green","blue","level","threshold"],3,1,1,1,1,1,1,1],["e57a465yMJDcqpBu43ASuaz",["node","image","level"],3,1,1,1],["40ea15aRwRGGIkhx8na4Wt5",["node","image","red","green","blue","alpha","radius","cropAlpha","enableFrog"],3,1,1,1,1,1,1,1,1,1],["cc.Toggle",["zoomScale","_N$transition","node","_N$normalColor","_N$target","checkMark"],1,1,5,1,1],["e993fMBG5pDYJ855JiggchY",["node","nameLabel","toggle"],3,1,1,1],["c0a1bbosd1Kw6prClLSS1i6",["node","image","amplitude","angularVelocity","frequency","offset"],3,1,1,1,1,1,1],["334cf6bJOdLBZNxYsUba59k",["node","image","red","green","blue","alpha","threshold"],3,1,1,1,1,1,1,1],["0c83fX1kxxFD6EizsrlgoxX",["node","image","red","green","blue","alpha","lineAngle","lineWidth","gradient","cropAlpha","enableFrog"],3,1,1,1,1,1,1,1,1,1,1,1],["cca4aON7zVHhaP8rbvg2evo",["node","image","density","frequency"],3,1,1,1,1]],[[9,0,1,2],[7,0,2,3,4,5,6,2],[6,1,0,3,4,5,3],[7,0,2,7,3,4,5,6,2],[8,0,1,3,4,5,4],[3,0,2,10,3],[2,0,1,5,3,8,4,3],[4,0,1,5,2,3,4,7,3],[5,0,3,1,6,7,4],[10,1,2,0,3,4,5,6,4],[16,0,1,2,3,1],[5,0,2,1,4,6,7,5],[11,1,2,1],[2,0,5,6,3,8,4,7,2],[4,0,5,6,2,3,4,7,2],[2,0,6,3,8,4,7,2],[3,4,0,2,5,10,5],[14,0,2],[11,0,1,2,2],[3,0,10,2],[2,0,6,3,8,9,4,7,2],[3,0,1,6,10,4],[3,0,3,7,10,4],[17,0,1,2,4],[3,0,3,2,10,4],[4,0,5,2,3,4,2],[6,0,2,3,4,3],[12,0,1,3],[6,3,4,5,1],[2,0,1,5,3,8,4,7,3],[7,0,1,2,3,4,5,3],[8,0,1,2,4,5,4],[8,0,1,4,5,3],[6,3,4,1],[5,0,2,3,1,6,7,5],[28,0,1,2,3,4,5,3],[29,0,1,2,1],[13,0,1,2],[4,0,5,6,2,3,4,2],[4,0,1,5,6,2,3,4,7,3],[9,1,1],[4,0,6,2,3,4,7,2],[2,0,5,6,3,4,7,2],[2,0,1,5,6,3,4,3],[2,0,1,5,3,9,4,3],[5,0,2,3,1,5,6,7,6],[10,0,3,7,4,5,6,8,9,10,11,2],[2,0,5,3,8,4,2],[2,0,5,3,4,7,2],[4,0,6,2,3,4,2],[3,0,9,1,10,4],[2,0,6,3,9,4,2],[2,0,2,6,3,4,7,3],[3,0,8,1,10,4],[3,0,1,10,3],[15,0,1,2,3,4,1],[5,0,2,3,1,4,6,7,6],[18,0,1,2,1],[19,0,1,2,3,1],[20,0,1,3],[21,0,1,2,3,3],[22,0,1,2,3,4,5,1],[23,0,1,2,3,4,5,4],[24,0,1,2,3],[25,0,1,2,3,4,5,6,1],[26,0,1,2,1],[27,0,1,2,3,4,5,6,7,8,1],[30,0,1,2,3,4,5,1],[31,0,1,2,3,4,5,6,1],[32,0,1,2,3,4,5,6,7,8,9,10,1],[33,0,1,2,3,1]],[[["0,9729,9729,33071,33071,0,0,1",-1],[0],0,[],[],[]],[[[27,"water_ring",{"0":{"defines":{"USE_TEXTURE":false,"USE_WATER_RING":true},"props":{"offset":0.2,"radius":0.5}}}]],0,0,[0],[10],[11]],[[{"name":"jewelry","rect":[0,2,221,219],"offset":[0,-0.5],"originalSize":[221,222],"capInsets":[0,0,0,0]}],[1],0,[0],[11],[12]],[[[17,"mosaic"],[20,"mosaic",[-8,-9],[[16,0,45,200,150,-2],[55,-7,-6,-5,-4,-3]],[0,"ebQrhbnqhODaA0TvDfqIf5",-1],[4,4286218881],[5,720,1280],[360,640,0,0,0,0,1,1,1,1]],[15,"sliders",[-12,-13,-14],[[31,1,2,20,-10,[5,720,190]],[24,41,-35,300,-11]],[0,"4bHQAPzT5Kj4+xk4tl5gv2",1],[5,720,190],[0,260,0,0,0,0,1,1,1,1]],[14,"xLevel",2,[-17,-18,-19],[[-15,[4,1,1,20,-16,[5,522.42,50]]],1,4],[0,"320Jzbsx5MgbC/C1mgEEQ2",1],[5,522.42,50],[0,70,0,0,0,0,1,1,1,1]],[38,"yLevel",2,[-22,-23,-24],[[-20,[4,1,1,20,-21,[5,522.42,50]]],1,4],[0,"9bA9iYYEJH3oy06sTiiXdf",1],[5,522.42,50]],[14,"bothLevel",2,[-27,-28,-29],[[-25,[4,1,1,20,-26,[5,522.42,50]]],1,4],[0,"4fppjuaixByaWArtx0y/X9",1],[5,522.42,50],[0,-70,0,0,0,0,1,1,1,1]],[3,"slider",3,[-31,-32],[-30],[0,"b5N0jEIqNGsYmMcy2LIpwy",1],[5,297.87,20],[14.425000000000011,0,0,0,0,0,1,1,1,1]],[7,"Handle",512,6,[[[2,1,2,-33,[4],5],-34],4,1],[0,"8boJaJ5ytB54ggbPoqDr3k",1],[5,32,32],[0,0,0,0,0,0,1,1,1,0]],[3,"slider",4,[-36,-37],[-35],[0,"12mNA8S69KBY/xollvqGnn",1],[5,297.87,20],[14.425000000000011,0,0,0,0,0,1,1,1,1]],[7,"Handle",512,8,[[[2,1,2,-38,[10],11],-39],4,1],[0,"b6xxtp8XlCfrSoIMH0JuOl",1],[5,32,32],[0,0,0,0,0,0,1,1,1,0]],[3,"slider",5,[-41,-42],[-40],[0,"fdoNAyPbVNA4nyRjlyiuxA",1],[5,297.87,20],[14.425000000000011,0,0,0,0,0,1,1,1,1]],[7,"Handle",512,10,[[[2,1,2,-43,[16],17],-44],4,1],[0,"94kIvP3vBCiZC0+c+cr5Q3",1],[5,32,32],[0,0,0,0,0,0,1,1,1,0]],[13,"topView",1,[-46],[[21,45,0.5,false,-45]],[0,"5852LtF7FI6ppmgCt1CzX9",1],[5,720,640],[0,320,0,0,0,0,1,1,1,1]],[25,"image",12,[[-47,[19,18,-48]],1,4],[0,"efYY+lslBC65iEhrQQzR9f",1],[5,195,270]],[13,"bottomView",1,[2],[[22,45,0.5,false,-49]],[0,"340YyMkrBIRL7bkgNtEEXO",1],[5,720,640],[0,-320,0,0,0,0,1,1,1,1]],[6,"Background",512,6,[[2,1,0,-50,[2],3],[5,40,300,-51]],[0,"7aGEzCjU5Om54NziVV9TCj",1],[5,297.87,20]],[6,"Background",512,8,[[2,1,0,-52,[8],9],[5,40,300,-53]],[0,"d5W0m3LyhGIK+ckXF4dLdB",1],[5,297.87,20]],[6,"Background",512,10,[[2,1,0,-54,[14],15],[5,40,300,-55]],[0,"353TBmukpLvaK2mIoRPEhP",1],[5,297.87,20]],[26,2,false,13,[0]],[1,"name",3,[-56],[0,"60bOuWEzdDWInsYxtQDN6L",1],[5,106.7,50.4],[-207.85999999999999,0,0,0,0,0,1,1,1,1]],[11,"XLevel",false,1,2,19,[1]],[9,1.1,true,3,7,[4,4294967295],[4,4294967295],7],[12,6,21],[1,"value",3,[-57],[0,"92tb6DlrFECpkc6hCTtu45",1],[5,77.85,50.4],[222.28500000000003,0,0,0,0,0,1,1,1,1]],[8,"1.00",1,1,23,[6]],[10,3,20,22,24],[1,"name",4,[-58],[0,"57+lSlKThLApbC3kBqg+8V",1],[5,106.7,50.4],[-207.85999999999999,0,0,0,0,0,1,1,1,1]],[11,"YLevel",false,1,2,26,[7]],[9,1.1,true,3,9,[4,4294967295],[4,4294967295],9],[12,8,28],[1,"value",4,[-59],[0,"f06cVhJvlD7Ka928XYFXrp",1],[5,77.85,50.4],[222.28500000000003,0,0,0,0,0,1,1,1,1]],[8,"1.00",1,1,30,[12]],[10,4,27,29,31],[1,"name",5,[-60],[0,"9f+OYjiRBBXLvA6e++g/Nq",1],[5,106.7,50.4],[-207.85999999999999,0,0,0,0,0,1,1,1,1]],[11,"X&Y",false,1,2,33,[13]],[9,1.1,true,3,11,[4,4294967295],[4,4294967295],11],[12,10,35],[1,"value",5,[-61],[0,"d6qPv0nF5MUKRdkNC1L8nb",1],[5,77.85,50.4],[222.28500000000003,0,0,0,0,0,1,1,1,1]],[8,"1.00",1,1,37,[18]],[10,5,34,36,38]],0,[0,8,1,0,0,1,0,29,39,0,30,32,0,31,25,0,12,18,0,0,1,0,-1,12,0,-2,14,0,0,2,0,0,2,0,-1,3,0,-2,4,0,-3,5,0,-1,25,0,0,3,0,-1,19,0,-2,6,0,-3,23,0,-1,32,0,0,4,0,-1,26,0,-2,8,0,-3,30,0,-1,39,0,0,5,0,-1,33,0,-2,10,0,-3,37,0,-1,22,0,-1,15,0,-2,7,0,0,7,0,-2,21,0,-1,29,0,-1,16,0,-2,9,0,0,9,0,-2,28,0,-1,36,0,-1,17,0,-2,11,0,0,11,0,-2,35,0,0,12,0,-1,13,0,-1,18,0,0,13,0,0,14,0,0,15,0,0,15,0,0,16,0,0,16,0,0,17,0,0,17,0,-1,20,0,-1,24,0,-1,27,0,-1,31,0,-1,34,0,-1,38,0,9,1,2,7,14,61],[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,18,21,21,21,21,21,28,28,28,28,28,35,35,35,35,35],[-1,-1,-1,1,-1,1,-1,-1,-1,1,-1,1,-1,-1,-1,1,-1,1,-1,1,2,3,4,5,6,2,3,4,5,6,2,3,4,5,6],[13,0,0,3,0,1,0,0,0,3,0,1,0,0,0,3,0,1,0,5,0,1,1,1,2,0,1,1,1,2,0,1,1,1,2]],[[[27,"wave_mask",{"0":{"defines":{"USE_TEXTURE":true,"USE_WAVE_MASK":true},"props":{"frequency":10,"offset":0.5,"angularVelocity":5,"amplitude":0.1}}}]],0,0,[0],[10],[14]],[[[23,"uv_scroll",[{"hash":1980711826,"record":null,"name":"uv_scroll|vs|fs","glsl3":{"vert":"\nprecision highp float;\nuniform CCGlobal {\n  mat4 cc_matView;\n  mat4 cc_matViewInv;\n  mat4 cc_matProj;\n  mat4 cc_matProjInv;\n  mat4 cc_matViewProj;\n  mat4 cc_matViewProjInv;\n  vec4 cc_cameraPos;\n  vec4 cc_time;\n  mediump vec4 cc_screenSize;\n  mediump vec4 cc_screenScale;\n};\nuniform CCLocal {\n  mat4 cc_matWorld;\n  mat4 cc_matWorldIT;\n};\nin vec3 a_position;\nin vec4 a_color;\nout vec4 v_color;\n#if USE_TEXTURE\nin vec2 a_uv0;\nout vec2 v_uv0;\n#endif\nvoid main () {\n  vec4 pos = vec4(a_position, 1);\n  #if CC_USE_MODEL\n  pos = cc_matViewProj * cc_matWorld * pos;\n  #else\n  pos = cc_matViewProj * pos;\n  #endif\n  #if USE_TEXTURE\n  v_uv0 = a_uv0;\n  #endif\n  v_color = a_color;\n  gl_Position = pos;\n}","frag":"\nprecision highp float;\n#if USE_ALPHA_TEST\n  uniform ALPHA_TEST {\n    float alphaThreshold;\n  };\n#endif\nvoid ALPHA_TEST (in vec4 color) {\n  #if USE_ALPHA_TEST\n      if (color.a < alphaThreshold) discard;\n  #endif\n}\nvoid ALPHA_TEST (in float alpha) {\n  #if USE_ALPHA_TEST\n      if (alpha < alphaThreshold) discard;\n  #endif\n}\nuniform CCGlobal {\n  mat4 cc_matView;\n  mat4 cc_matViewInv;\n  mat4 cc_matProj;\n  mat4 cc_matProjInv;\n  mat4 cc_matViewProj;\n  mat4 cc_matViewProjInv;\n  vec4 cc_cameraPos;\n  vec4 cc_time;\n  mediump vec4 cc_screenSize;\n  mediump vec4 cc_screenScale;\n};\nuniform CCLocal {\n  mat4 cc_matWorld;\n  mat4 cc_matWorldIT;\n};\nin vec4 v_color;\n#if USE_TEXTURE\nin vec2 v_uv0;\nuniform sampler2D texture;\n#endif\n#if USE_UV_SCROLL\nuniform UVScroll {\n  float speed;\n};\nvec4 getColor(){\n  vec2 uv = v_uv0.xy;\n  uv.x += cc_time.x * speed;\n  uv.x = fract(uv.x);\n  vec4 color = texture2D(texture, uv);\n  return color;\n}\n#endif\nvoid main () {\n  vec4 o = vec4(1, 1, 1, 1);\n  #if USE_TEXTURE\n  vec4 texture_tmp = texture(texture, v_uv0);\n  #if CC_USE_ALPHA_ATLAS_texture\n      texture_tmp.a *= texture(texture, v_uv0 + vec2(0, 0.5)).r;\n  #endif\n  #if INPUT_IS_GAMMA\n    o.rgb *= (texture_tmp.rgb * texture_tmp.rgb);\n    o.a *= texture_tmp.a;\n  #else\n    o *= texture_tmp;\n  #endif\n  #endif\n  o *= v_color;\n  ALPHA_TEST(o);\n  gl_FragColor = o;\n  #if USE_UV_SCROLL\n  gl_FragColor = getColor();\n  #endif\n}"},"glsl1":{"vert":"\nprecision highp float;\nuniform mat4 cc_matViewProj;\nuniform mat4 cc_matWorld;\nattribute vec3 a_position;\nattribute vec4 a_color;\nvarying vec4 v_color;\n#if USE_TEXTURE\nattribute vec2 a_uv0;\nvarying vec2 v_uv0;\n#endif\nvoid main () {\n  vec4 pos = vec4(a_position, 1);\n  #if CC_USE_MODEL\n  pos = cc_matViewProj * cc_matWorld * pos;\n  #else\n  pos = cc_matViewProj * pos;\n  #endif\n  #if USE_TEXTURE\n  v_uv0 = a_uv0;\n  #endif\n  v_color = a_color;\n  gl_Position = pos;\n}","frag":"\nprecision highp float;\n#if USE_ALPHA_TEST\n  uniform float alphaThreshold;\n#endif\nvoid ALPHA_TEST (in vec4 color) {\n  #if USE_ALPHA_TEST\n      if (color.a < alphaThreshold) discard;\n  #endif\n}\nvoid ALPHA_TEST (in float alpha) {\n  #if USE_ALPHA_TEST\n      if (alpha < alphaThreshold) discard;\n  #endif\n}\nuniform vec4 cc_time;\nvarying vec4 v_color;\n#if USE_TEXTURE\nvarying vec2 v_uv0;\nuniform sampler2D texture;\n#endif\n#if USE_UV_SCROLL\nuniform float speed;\nvec4 getColor(){\n  vec2 uv = v_uv0.xy;\n  uv.x += cc_time.x * speed;\n  uv.x = fract(uv.x);\n  vec4 color = texture2D(texture, uv);\n  return color;\n}\n#endif\nvoid main () {\n  vec4 o = vec4(1, 1, 1, 1);\n  #if USE_TEXTURE\n  vec4 texture_tmp = texture2D(texture, v_uv0);\n  #if CC_USE_ALPHA_ATLAS_texture\n      texture_tmp.a *= texture2D(texture, v_uv0 + vec2(0, 0.5)).r;\n  #endif\n  #if INPUT_IS_GAMMA\n    o.rgb *= (texture_tmp.rgb * texture_tmp.rgb);\n    o.a *= texture_tmp.a;\n  #else\n    o *= texture_tmp;\n  #endif\n  #endif\n  o *= v_color;\n  ALPHA_TEST(o);\n  gl_FragColor = o;\n  #if USE_UV_SCROLL\n  gl_FragColor = getColor();\n  #endif\n}"},"builtins":{"globals":{"blocks":[{"name":"CCGlobal","defines":[]}],"samplers":[]},"locals":{"blocks":[{"name":"CCLocal","defines":[]}],"samplers":[]}},"defines":[{"name":"USE_TEXTURE","type":"boolean","defines":[]},{"name":"CC_USE_MODEL","type":"boolean","defines":[]},{"name":"USE_ALPHA_TEST","type":"boolean","defines":[]},{"name":"USE_UV_SCROLL","type":"boolean","defines":[]},{"name":"CC_USE_ALPHA_ATLAS_texture","type":"boolean","defines":["USE_TEXTURE"]},{"name":"INPUT_IS_GAMMA","type":"boolean","defines":["USE_TEXTURE"]}],"blocks":[{"name":"ALPHA_TEST","binding":0,"members":[{"name":"alphaThreshold","type":13,"count":1}],"defines":["USE_ALPHA_TEST"]},{"name":"UVScroll","binding":1,"members":[{"name":"speed","type":13,"count":1}],"defines":["USE_UV_SCROLL"]}],"samplers":[{"name":"texture","type":29,"count":1,"binding":30,"defines":["USE_TEXTURE"]}]}],[{"passes":[{"program":"uv_scroll|vs|fs","blendState":{"targets":[{"blend":true}]},"rasterizerState":{"cullMode":0},"properties":{"texture":{"value":"white","type":29},"alphaThreshold":{"type":13,"value":[0.5]},"speed":{"type":13,"value":[0.002]}}}]}]]],0,0,[],[],[]],[[{"name":"laser","rect":[0,0,128,26],"offset":[0,0],"originalSize":[128,26],"capInsets":[0,0,0,0]}],[1],0,[0],[11],[15]],[[[23,"gaussian_blur",[{"hash":860637086,"record":null,"name":"gaussian_blur|vs|fs","glsl3":{"vert":"\nprecision highp float;\nuniform CCGlobal {\n  mat4 cc_matView;\n  mat4 cc_matViewInv;\n  mat4 cc_matProj;\n  mat4 cc_matProjInv;\n  mat4 cc_matViewProj;\n  mat4 cc_matViewProjInv;\n  vec4 cc_cameraPos;\n  vec4 cc_time;\n  mediump vec4 cc_screenSize;\n  mediump vec4 cc_screenScale;\n};\nuniform CCLocal {\n  mat4 cc_matWorld;\n  mat4 cc_matWorldIT;\n};\nin vec3 a_position;\nin vec4 a_color;\nout vec4 v_color;\n#if USE_TEXTURE\nin vec2 a_uv0;\nout vec2 v_uv0;\n#endif\nvoid main () {\n  vec4 pos = vec4(a_position, 1);\n  #if CC_USE_MODEL\n  pos = cc_matViewProj * cc_matWorld * pos;\n  #else\n  pos = cc_matViewProj * pos;\n  #endif\n  #if USE_TEXTURE\n  v_uv0 = a_uv0;\n  #endif\n  v_color = a_color;\n  gl_Position = pos;\n}","frag":"\nprecision highp float;\n#if USE_ALPHA_TEST\n  uniform ALPHA_TEST {\n    float alphaThreshold;\n  };\n#endif\nvoid ALPHA_TEST (in vec4 color) {\n  #if USE_ALPHA_TEST\n      if (color.a < alphaThreshold) discard;\n  #endif\n}\nvoid ALPHA_TEST (in float alpha) {\n  #if USE_ALPHA_TEST\n      if (alpha < alphaThreshold) discard;\n  #endif\n}\nin vec4 v_color;\n#if USE_TEXTURE\nin vec2 v_uv0;\nuniform sampler2D texture;\n#endif\n#if ENABLE_GAUSSIAN_BLUR\nuniform GaussianBlur {\n  vec2 textureSize;\n  float level;\n};\nfloat getWeight(float x, float y) {\n  return (1.0 / (2.0 * 3.141592653589793 * pow(4.0, 2.0))) * pow(1.0 / 2.718281828459045, (pow(x, 2.0) + pow(y, 2.0)) / (2.0 * pow(4.0, 2.0)));\n}\nvec4 getColor(){\n  const float size = floor(4.0 * 6.0 + 1.0);\n  const float halfSize = floor(size / 2.0);\n    float totalWeight = getWeight(0.0, 0.0);\n    for(float x = 1.0; x <= halfSize; x++) {\n        totalWeight += getWeight(x, 0.0) * 2.0;\n    }\n    for(float y = 1.0; y <= halfSize; y++) {\n        totalWeight += getWeight(0.0, y) * 2.0;\n    }\n    for(float x = 1.0; x <= halfSize; x++) {\n      for (float y = 1.0; y<= halfSize; y++) {\n        totalWeight += getWeight(x, y) * 4.0;\n      }\n    }\n    vec4 finalColor = vec4(0.0, 0.0, 0.0, 0.0);\n    for(float x = -halfSize; x<= halfSize; x++) {\n      for (float y = -halfSize; y<= halfSize; y++) {\n        float weight = getWeight(x, y) / totalWeight;\n        finalColor += texture(texture, v_uv0 + vec2(level * x * 0.025, level * y * 0.025)) * weight;\n      }\n    }\n    return finalColor;\n}\n#endif\nvoid main () {\n  vec4 o = vec4(1, 1, 1, 1);\n  #if USE_TEXTURE\n  vec4 texture_tmp = texture(texture, v_uv0);\n  #if CC_USE_ALPHA_ATLAS_texture\n      texture_tmp.a *= texture(texture, v_uv0 + vec2(0, 0.5)).r;\n  #endif\n  #if INPUT_IS_GAMMA\n    o.rgb *= (texture_tmp.rgb * texture_tmp.rgb);\n    o.a *= texture_tmp.a;\n  #else\n    o *= texture_tmp;\n  #endif\n  #endif\n  o *= v_color;\n  ALPHA_TEST(o);\n  gl_FragColor = o;\n  #if ENABLE_GAUSSIAN_BLUR\n    gl_FragColor = getColor();\n  #endif\n}"},"glsl1":{"vert":"\nprecision highp float;\nuniform mat4 cc_matViewProj;\nuniform mat4 cc_matWorld;\nattribute vec3 a_position;\nattribute vec4 a_color;\nvarying vec4 v_color;\n#if USE_TEXTURE\nattribute vec2 a_uv0;\nvarying vec2 v_uv0;\n#endif\nvoid main () {\n  vec4 pos = vec4(a_position, 1);\n  #if CC_USE_MODEL\n  pos = cc_matViewProj * cc_matWorld * pos;\n  #else\n  pos = cc_matViewProj * pos;\n  #endif\n  #if USE_TEXTURE\n  v_uv0 = a_uv0;\n  #endif\n  v_color = a_color;\n  gl_Position = pos;\n}","frag":"\nprecision highp float;\n#if USE_ALPHA_TEST\n  uniform float alphaThreshold;\n#endif\nvoid ALPHA_TEST (in vec4 color) {\n  #if USE_ALPHA_TEST\n      if (color.a < alphaThreshold) discard;\n  #endif\n}\nvoid ALPHA_TEST (in float alpha) {\n  #if USE_ALPHA_TEST\n      if (alpha < alphaThreshold) discard;\n  #endif\n}\nvarying vec4 v_color;\n#if USE_TEXTURE\nvarying vec2 v_uv0;\nuniform sampler2D texture;\n#endif\n#if ENABLE_GAUSSIAN_BLUR\nuniform float level;\nfloat getWeight(float x, float y) {\n  return (1.0 / (2.0 * 3.141592653589793 * pow(4.0, 2.0))) * pow(1.0 / 2.718281828459045, (pow(x, 2.0) + pow(y, 2.0)) / (2.0 * pow(4.0, 2.0)));\n}\nvec4 getColor(){\n  const float size = floor(4.0 * 6.0 + 1.0);\n  const float halfSize = floor(size / 2.0);\n    float totalWeight = getWeight(0.0, 0.0);\n    for(float x = 1.0; x <= halfSize; x++) {\n        totalWeight += getWeight(x, 0.0) * 2.0;\n    }\n    for(float y = 1.0; y <= halfSize; y++) {\n        totalWeight += getWeight(0.0, y) * 2.0;\n    }\n    for(float x = 1.0; x <= halfSize; x++) {\n      for (float y = 1.0; y<= halfSize; y++) {\n        totalWeight += getWeight(x, y) * 4.0;\n      }\n    }\n    vec4 finalColor = vec4(0.0, 0.0, 0.0, 0.0);\n    for(float x = -halfSize; x<= halfSize; x++) {\n      for (float y = -halfSize; y<= halfSize; y++) {\n        float weight = getWeight(x, y) / totalWeight;\n        finalColor += texture2D(texture, v_uv0 + vec2(level * x * 0.025, level * y * 0.025)) * weight;\n      }\n    }\n    return finalColor;\n}\n#endif\nvoid main () {\n  vec4 o = vec4(1, 1, 1, 1);\n  #if USE_TEXTURE\n  vec4 texture_tmp = texture2D(texture, v_uv0);\n  #if CC_USE_ALPHA_ATLAS_texture\n      texture_tmp.a *= texture2D(texture, v_uv0 + vec2(0, 0.5)).r;\n  #endif\n  #if INPUT_IS_GAMMA\n    o.rgb *= (texture_tmp.rgb * texture_tmp.rgb);\n    o.a *= texture_tmp.a;\n  #else\n    o *= texture_tmp;\n  #endif\n  #endif\n  o *= v_color;\n  ALPHA_TEST(o);\n  gl_FragColor = o;\n  #if ENABLE_GAUSSIAN_BLUR\n    gl_FragColor = getColor();\n  #endif\n}"},"builtins":{"globals":{"blocks":[{"name":"CCGlobal","defines":[]}],"samplers":[]},"locals":{"blocks":[{"name":"CCLocal","defines":[]}],"samplers":[]}},"defines":[{"name":"USE_TEXTURE","type":"boolean","defines":[]},{"name":"CC_USE_MODEL","type":"boolean","defines":[]},{"name":"USE_ALPHA_TEST","type":"boolean","defines":[]},{"name":"ENABLE_GAUSSIAN_BLUR","type":"boolean","defines":[]},{"name":"CC_USE_ALPHA_ATLAS_texture","type":"boolean","defines":["USE_TEXTURE"]},{"name":"INPUT_IS_GAMMA","type":"boolean","defines":["USE_TEXTURE"]}],"blocks":[{"name":"ALPHA_TEST","binding":0,"members":[{"name":"alphaThreshold","type":13,"count":1}],"defines":["USE_ALPHA_TEST"]},{"name":"GaussianBlur","binding":1,"members":[{"name":"textureSize","type":14,"count":1},{"name":"level","type":13,"count":1}],"defines":["ENABLE_GAUSSIAN_BLUR"]}],"samplers":[{"name":"texture","type":29,"count":1,"binding":30,"defines":["USE_TEXTURE"]}]}],[{"passes":[{"program":"gaussian_blur|vs|fs","blendState":{"targets":[{"blend":true}]},"rasterizerState":{"cullMode":0},"properties":{"texture":{"value":"white","type":29},"alphaThreshold":{"type":13,"value":[0.5]},"level":{"type":13,"value":[0.5]}}}]}]]],0,0,[],[],[]],[[[27,"uv_scroll",{"0":{"defines":{"USE_TEXTURE":true,"USE_UV_SCROLL":true},"props":{"speed":-2}}}]],0,0,[0],[10],[16]],[[{"name":"default_btn_disabled","rect":[0,0,40,40],"offset":[0,0],"originalSize":[40,40],"capInsets":[12,12,12,12]}],[1],0,[0],[11],[17]],[[[23,"water_ring",[{"hash":2636139704,"record":null,"name":"water_ring|vs|fs","glsl3":{"vert":"\nprecision highp float;\nuniform CCGlobal {\n  mat4 cc_matView;\n  mat4 cc_matViewInv;\n  mat4 cc_matProj;\n  mat4 cc_matProjInv;\n  mat4 cc_matViewProj;\n  mat4 cc_matViewProjInv;\n  vec4 cc_cameraPos;\n  vec4 cc_time;\n  mediump vec4 cc_screenSize;\n  mediump vec4 cc_screenScale;\n};\nuniform CCLocal {\n  mat4 cc_matWorld;\n  mat4 cc_matWorldIT;\n};\nin vec3 a_position;\nin vec4 a_color;\nout vec4 v_color;\n#if USE_TEXTURE\nin vec2 a_uv0;\nout vec2 v_uv0;\n#endif\nvoid main () {\n  vec4 pos = vec4(a_position, 1);\n  #if CC_USE_MODEL\n  pos = cc_matViewProj * cc_matWorld * pos;\n  #else\n  pos = cc_matViewProj * pos;\n  #endif\n  #if USE_TEXTURE\n  v_uv0 = a_uv0;\n  #endif\n  v_color = a_color;\n  gl_Position = pos;\n}","frag":"\nprecision highp float;\n#if USE_ALPHA_TEST\n  uniform ALPHA_TEST {\n    float alphaThreshold;\n  };\n#endif\nvoid ALPHA_TEST (in vec4 color) {\n  #if USE_ALPHA_TEST\n      if (color.a < alphaThreshold) discard;\n  #endif\n}\nvoid ALPHA_TEST (in float alpha) {\n  #if USE_ALPHA_TEST\n      if (alpha < alphaThreshold) discard;\n  #endif\n}\nuniform CCGlobal {\n  mat4 cc_matView;\n  mat4 cc_matViewInv;\n  mat4 cc_matProj;\n  mat4 cc_matProjInv;\n  mat4 cc_matViewProj;\n  mat4 cc_matViewProjInv;\n  vec4 cc_cameraPos;\n  vec4 cc_time;\n  mediump vec4 cc_screenSize;\n  mediump vec4 cc_screenScale;\n};\nin vec4 v_color;\n#if USE_TEXTURE\nin vec2 v_uv0;\nuniform sampler2D texture;\n#endif\n#if USE_WATER_RING\nuniform WaterRing{\n  vec2 center;\n  float radius;\n  float offset;\n};\nvec4 getColor(){\n  vec2 _distance_vec = center - v_uv0;\n  float _distance = sqrt(_distance_vec.x * _distance_vec.x + _distance_vec.y * _distance_vec.y);\n  float _sin_factor = sin(_distance * 100.0 + cc_time.x) * 0.05;\n  float _discard_factor = clamp(radius - abs(offset - _distance), 0.0, 1.0);\n  vec2 _offset = normalize(_distance_vec) * _sin_factor * _discard_factor;\n  vec2 _uv = _offset + v_uv0;\n  vec4 _color = vec4(1, 1, 1, 1);\n  vec4 texture_tmp = texture(texture, _uv);\n  #if CC_USE_ALPHA_ATLAS_texture\n      texture_tmp.a *= texture(texture, _uv + vec2(0, 0.5)).r;\n  #endif\n  #if INPUT_IS_GAMMA\n    _color.rgb *= (texture_tmp.rgb * texture_tmp.rgb);\n    _color.a *= texture_tmp.a;\n  #else\n    _color *= texture_tmp;\n  #endif\n  return _color;\n}\n#endif\nvoid main () {\n  vec4 o = vec4(1, 1, 1, 1);\n  #if USE_TEXTURE\n  vec4 texture_tmp = texture(texture, v_uv0);\n  #if CC_USE_ALPHA_ATLAS_texture\n      texture_tmp.a *= texture(texture, v_uv0 + vec2(0, 0.5)).r;\n  #endif\n  #if INPUT_IS_GAMMA\n    o.rgb *= (texture_tmp.rgb * texture_tmp.rgb);\n    o.a *= texture_tmp.a;\n  #else\n    o *= texture_tmp;\n  #endif\n  #endif\n  #if USE_WATER_RING\n   o = getColor();\n  #endif\n  o *= v_color;\n  ALPHA_TEST(o);\n  gl_FragColor = o;\n}"},"glsl1":{"vert":"\nprecision highp float;\nuniform mat4 cc_matViewProj;\nuniform mat4 cc_matWorld;\nattribute vec3 a_position;\nattribute vec4 a_color;\nvarying vec4 v_color;\n#if USE_TEXTURE\nattribute vec2 a_uv0;\nvarying vec2 v_uv0;\n#endif\nvoid main () {\n  vec4 pos = vec4(a_position, 1);\n  #if CC_USE_MODEL\n  pos = cc_matViewProj * cc_matWorld * pos;\n  #else\n  pos = cc_matViewProj * pos;\n  #endif\n  #if USE_TEXTURE\n  v_uv0 = a_uv0;\n  #endif\n  v_color = a_color;\n  gl_Position = pos;\n}","frag":"\nprecision highp float;\n#if USE_ALPHA_TEST\n  uniform float alphaThreshold;\n#endif\nvoid ALPHA_TEST (in vec4 color) {\n  #if USE_ALPHA_TEST\n      if (color.a < alphaThreshold) discard;\n  #endif\n}\nvoid ALPHA_TEST (in float alpha) {\n  #if USE_ALPHA_TEST\n      if (alpha < alphaThreshold) discard;\n  #endif\n}\nuniform vec4 cc_time;\nvarying vec4 v_color;\n#if USE_TEXTURE\nvarying vec2 v_uv0;\nuniform sampler2D texture;\n#endif\n#if USE_WATER_RING\nuniform vec2 center;\nuniform float radius;\nuniform float offset;\nvec4 getColor(){\n  vec2 _distance_vec = center - v_uv0;\n  float _distance = sqrt(_distance_vec.x * _distance_vec.x + _distance_vec.y * _distance_vec.y);\n  float _sin_factor = sin(_distance * 100.0 + cc_time.x) * 0.05;\n  float _discard_factor = clamp(radius - abs(offset - _distance), 0.0, 1.0);\n  vec2 _offset = normalize(_distance_vec) * _sin_factor * _discard_factor;\n  vec2 _uv = _offset + v_uv0;\n  vec4 _color = vec4(1, 1, 1, 1);\n  vec4 texture_tmp = texture2D(texture, _uv);\n  #if CC_USE_ALPHA_ATLAS_texture\n      texture_tmp.a *= texture2D(texture, _uv + vec2(0, 0.5)).r;\n  #endif\n  #if INPUT_IS_GAMMA\n    _color.rgb *= (texture_tmp.rgb * texture_tmp.rgb);\n    _color.a *= texture_tmp.a;\n  #else\n    _color *= texture_tmp;\n  #endif\n  return _color;\n}\n#endif\nvoid main () {\n  vec4 o = vec4(1, 1, 1, 1);\n  #if USE_TEXTURE\n  vec4 texture_tmp = texture2D(texture, v_uv0);\n  #if CC_USE_ALPHA_ATLAS_texture\n      texture_tmp.a *= texture2D(texture, v_uv0 + vec2(0, 0.5)).r;\n  #endif\n  #if INPUT_IS_GAMMA\n    o.rgb *= (texture_tmp.rgb * texture_tmp.rgb);\n    o.a *= texture_tmp.a;\n  #else\n    o *= texture_tmp;\n  #endif\n  #endif\n  #if USE_WATER_RING\n   o = getColor();\n  #endif\n  o *= v_color;\n  ALPHA_TEST(o);\n  gl_FragColor = o;\n}"},"builtins":{"globals":{"blocks":[{"name":"CCGlobal","defines":[]}],"samplers":[]},"locals":{"blocks":[{"name":"CCLocal","defines":[]}],"samplers":[]}},"defines":[{"name":"USE_TEXTURE","type":"boolean","defines":[]},{"name":"CC_USE_MODEL","type":"boolean","defines":[]},{"name":"USE_ALPHA_TEST","type":"boolean","defines":[]},{"name":"USE_WATER_RING","type":"boolean","defines":[]},{"name":"CC_USE_ALPHA_ATLAS_texture","type":"boolean","defines":["USE_WATER_RING"]},{"name":"INPUT_IS_GAMMA","type":"boolean","defines":["USE_WATER_RING"]}],"blocks":[{"name":"ALPHA_TEST","binding":0,"members":[{"name":"alphaThreshold","type":13,"count":1}],"defines":["USE_ALPHA_TEST"]},{"name":"WaterRing","binding":1,"members":[{"name":"center","type":14,"count":1},{"name":"radius","type":13,"count":1},{"name":"offset","type":13,"count":1}],"defines":["USE_WATER_RING"]}],"samplers":[{"name":"texture","type":29,"count":1,"binding":30,"defines":["USE_TEXTURE"]}]}],[{"passes":[{"program":"water_ring|vs|fs","blendState":{"targets":[{"blend":true}]},"rasterizerState":{"cullMode":0},"properties":{"texture":{"value":"white","type":29},"alphaThreshold":{"type":13,"value":[0.5]},"center":{"type":14,"value":[0.5,0.5]},"radius":{"type":13,"value":[0.1]},"offset":{"type":13,"value":[2]}}}]}]]],0,0,[],[],[]],[[{"name":"default_scrollbar","rect":[0,0,30,15],"offset":[0,0],"originalSize":[30,15],"capInsets":[10,4,10,4]}],[1],0,[0],[11],[18]],[[[17,"uv_scroll"],[20,"uv_scroll",[-3,-4],[[16,0,45,200,150,-2]],[40,-1],[4,4286218881],[5,720,1280],[360,640,0,0,0,0,1,1,1,1]],[15,"density",[-10,-11,-12],[[10,-8,-7,-6,-5],[4,1,1,20,-9,[5,522.42,50]]],[0,"daee7ZQS9GV4L/nCkd6kTk",1],[5,522.42,50],[0,25,0,0,0,0,1,1,1,1]],[15,"frequency",[-18,-19,-20],[[10,-16,-15,-14,-13],[4,1,1,20,-17,[5,522.42,50]]],[0,"56IEhrl09F9ZENflzUpHDN",1],[5,522.42,50],[0,-25,0,0,0,0,1,1,1,1]],[15,"sliders",[2,3],[[32,1,2,-21,[5,720,100]],[24,41,-25,300,-22]],[0,"31tV8AQ1BB96WHxS1Pyu2q",1],[5,720,100],[0,295,0,0,0,0,1,1,1,1]],[3,"slider",2,[-24,-25],[-23],[0,"5clF3XbtpJLaGof5ZqTnhE",1],[5,297.87,20],[14.425000000000011,0,0,0,0,0,1,1,1,1]],[7,"Handle",512,5,[[[2,1,2,-26,[5],6],-27],4,1],[0,"df+G2iAJBBPb7Sr+UA63lm",1],[5,32,32],[148.935,0,0,0,0,0,1,1,1,0]],[3,"slider",3,[-29,-30],[-28],[0,"1avA5FGp1CzIpYqTcbOSq4",1],[5,297.87,20],[14.425000000000011,0,0,0,0,0,1,1,1,1]],[7,"Handle",512,7,[[[2,1,2,-31,[11],12],-32],4,1],[0,"bbj3MawLhGQrbHaJ9I2MmV",1],[5,32,32],[148.935,0,0,0,0,0,1,1,1,0]],[13,"topView",1,[-34],[[21,45,0.5,false,-33]],[0,"bdFX8j0cZKOoWuxz22Pcvu",1],[5,720,640],[0,320,0,0,0,0,1,1,1,1]],[47,"image",9,[[2,2,0,-35,[0],1],[19,18,-36]],[0,"b77LrM3VxNrZYU9stsHbEE",1],[5,500,26]],[13,"bottomView",1,[4],[[22,45,0.5,false,-37]],[0,"79u5wAkqpHap95nZwuB7aW",1],[5,720,640],[0,-320,0,0,0,0,1,1,1,1]],[6,"Background",512,5,[[2,1,0,-38,[3],4],[5,40,300,-39]],[0,"6eWFT1+EVJHJE9hDGHcryW",1],[5,297.87,20]],[6,"Background",512,7,[[2,1,0,-40,[9],10],[5,40,300,-41]],[0,"3bkC5FeUlK67yo/wzbjtDT",1],[5,297.87,20]],[1,"name",2,[-42],[0,"8aoPHnRzxMVJmkOADgxqm0",1],[5,106.7,50.4],[-207.85999999999999,0,0,0,0,0,1,1,1,1]],[11,"Density",false,1,2,14,[2]],[9,1.1,true,3,6,[4,4294967295],[4,4294967295],6],[18,1,5,16],[1,"value",2,[-43],[0,"67YF171gBDAqSctuTMXggg",1],[5,77.85,50.4],[222.28500000000003,0,0,0,0,0,1,1,1,1]],[8,"1.00",1,1,18,[7]],[1,"name",3,[-44],[0,"b4xU5MBmpOCZpzSCrZSgvW",1],[5,106.7,50.4],[-207.85999999999999,0,0,0,0,0,1,1,1,1]],[11,"Frequency",false,1,2,20,[8]],[9,1.1,true,3,8,[4,4294967295],[4,4294967295],8],[18,1,7,22],[1,"value",3,[-45],[0,"6682uk/FVKo5xIOjsSEXZo",1],[5,77.85,50.4],[222.28500000000003,0,0,0,0,0,1,1,1,1]],[8,"1.00",1,1,24,[13]]],0,[0,8,1,0,0,1,0,-1,9,0,-2,11,0,16,19,0,13,17,0,14,15,0,0,2,0,0,2,0,-1,14,0,-2,5,0,-3,18,0,16,25,0,13,23,0,14,21,0,0,3,0,0,3,0,-1,20,0,-2,7,0,-3,24,0,0,4,0,0,4,0,-1,17,0,-1,12,0,-2,6,0,0,6,0,-2,16,0,-1,23,0,-1,13,0,-2,8,0,0,8,0,-2,22,0,0,9,0,-1,10,0,0,10,0,0,10,0,0,11,0,0,12,0,0,12,0,0,13,0,0,13,0,-1,15,0,-1,19,0,-1,21,0,-1,25,0,9,1,2,7,4,3,7,4,4,7,11,45],[0,0,0,0,0,0,0,0,0,0,0,0,0,0,16,16,16,16,16,22,22,22,22,22],[-1,1,-1,-1,1,-1,1,-1,-1,-1,1,-1,1,-1,2,3,4,5,6,2,3,4,5,6],[19,20,0,0,3,0,1,0,0,0,3,0,1,0,0,1,1,1,2,0,1,1,1,2]],[[{"name":"background","rect":[0,0,843,434],"offset":[0,0],"originalSize":[843,434],"capInsets":[0,0,0,0]}],[1],0,[0],[11],[21]],[[[37,"flash_light",[{},"0",11,[{"defines":{"USE_TEXTURE":true,"USE_FLASH_LIGHT":true}},"props",11,[{"angle":45,"width":0.33,"enableFog":true},"centerPoint",8,[0,0.5,0.5],"lightColor",8,[4,4294967295]]]]]],0,0,[0],[10],[22]],[[[17,"old_photo"],[20,"old_photo",[-6,-7],[[16,0,45,200,150,-2],[57,-5,-4,-3]],[0,"ebQrhbnqhODaA0TvDfqIf5",-1],[4,4286218881],[5,720,1280],[360,640,0,0,0,0,1,1,1,1]],[49,"level",[-10,-11,-12],[[-8,[4,1,1,20,-9,[5,522.42,50]]],1,4],[0,"daee7ZQS9GV4L/nCkd6kTk",1],[5,522.42,50]],[15,"sliders",[2],[[32,1,2,-13,[5,720,50]],[5,41,300,-14]],[0,"31tV8AQ1BB96WHxS1Pyu2q",1],[5,720,50],[0,295,0,0,0,0,1,1,1,1]],[3,"slider",2,[-16,-17],[-15],[0,"5clF3XbtpJLaGof5ZqTnhE",1],[5,297.87,20],[14.425000000000011,0,0,0,0,0,1,1,1,1]],[7,"Handle",512,4,[[[2,1,2,-18,[4],5],-19],4,1],[0,"df+G2iAJBBPb7Sr+UA63lm",1],[5,32,32],[148.935,0,0,0,0,0,1,1,1,0]],[13,"topView",1,[-21],[[21,45,0.5,false,-20]],[0,"bdFX8j0cZKOoWuxz22Pcvu",1],[5,720,640],[0,320,0,0,0,0,1,1,1,1]],[25,"image",6,[[-22,[19,18,-23]],1,4],[0,"b77LrM3VxNrZYU9stsHbEE",1],[5,435,224]],[13,"bottomView",1,[3],[[22,45,0.5,false,-24]],[0,"79u5wAkqpHap95nZwuB7aW",1],[5,720,640],[0,-320,0,0,0,0,1,1,1,1]],[6,"Background",512,4,[[2,1,0,-25,[2],3],[5,40,300,-26]],[0,"6eWFT1+EVJHJE9hDGHcryW",1],[5,297.87,20]],[33,7,[0]],[1,"name",2,[-27],[0,"8aoPHnRzxMVJmkOADgxqm0",1],[5,106.7,50.4],[-207.85999999999999,0,0,0,0,0,1,1,1,1]],[11,"Level",false,1,2,11,[1]],[9,1.1,true,3,5,[4,4294967295],[4,4294967295],5],[18,1,4,13],[1,"value",2,[-28],[0,"67YF171gBDAqSctuTMXggg",1],[5,77.85,50.4],[222.28500000000003,0,0,0,0,0,1,1,1,1]],[8,"1.00",1,1,15,[6]],[10,2,12,14,16]],0,[0,8,1,0,0,1,0,13,17,0,12,10,0,0,1,0,-1,6,0,-2,8,0,-1,17,0,0,2,0,-1,11,0,-2,4,0,-3,15,0,0,3,0,0,3,0,-1,14,0,-1,9,0,-2,5,0,0,5,0,-2,13,0,0,6,0,-1,7,0,-1,10,0,0,7,0,0,8,0,0,9,0,0,9,0,-1,12,0,-1,16,0,9,1,2,7,3,3,7,8,28],[0,0,0,0,0,0,0,10,13,13,13,13,13],[-1,-1,-1,1,-1,1,-1,1,2,3,4,5,6],[23,0,0,3,0,1,0,24,0,1,1,1,2]],[[[23,"flash_light",[{"hash":4131595211,"record":null,"name":"flash_light|vs|fs","glsl3":{"vert":"\nprecision highp float;\nuniform CCGlobal {\n  mat4 cc_matView;\n  mat4 cc_matViewInv;\n  mat4 cc_matProj;\n  mat4 cc_matProjInv;\n  mat4 cc_matViewProj;\n  mat4 cc_matViewProjInv;\n  vec4 cc_cameraPos;\n  vec4 cc_time;\n  mediump vec4 cc_screenSize;\n  mediump vec4 cc_screenScale;\n};\nuniform CCLocal {\n  mat4 cc_matWorld;\n  mat4 cc_matWorldIT;\n};\nin vec3 a_position;\nin vec4 a_color;\nout vec4 v_color;\n#if USE_TEXTURE\nin vec2 a_uv0;\nout vec2 v_uv0;\n#endif\nvoid main () {\n  vec4 pos = vec4(a_position, 1);\n  #if CC_USE_MODEL\n  pos = cc_matViewProj * cc_matWorld * pos;\n  #else\n  pos = cc_matViewProj * pos;\n  #endif\n  #if USE_TEXTURE\n  v_uv0 = a_uv0;\n  #endif\n  v_color = a_color;\n  gl_Position = pos;\n}","frag":"\nprecision highp float;\n#if USE_ALPHA_TEST\n  uniform ALPHA_TEST {\n    float alphaThreshold;\n  };\n#endif\nvoid ALPHA_TEST (in vec4 color) {\n  #if USE_ALPHA_TEST\n      if (color.a < alphaThreshold) discard;\n  #endif\n}\nvoid ALPHA_TEST (in float alpha) {\n  #if USE_ALPHA_TEST\n      if (alpha < alphaThreshold) discard;\n  #endif\n}\nin vec4 v_color;\n#if USE_TEXTURE\nin vec2 v_uv0;\nuniform sampler2D texture;\n#endif\n#if USE_FLASH_LIGHT\n  uniform Light {\n    vec4 lightColor;\n    vec2 centerPoint;\n    float angle;\n    float width;\n    bool gradient;\n    bool cropAlpha;\n    bool enableFog;\n  };\n  vec4 addLightColor(vec4 textureColor) {\n    if (width <= 0.0) {\n      return textureColor;\n    }\n    float angleInRadians = radians(angle);\n    float dis = 0.0;\n    if (mod(angle, 180.0) != 0.0) {\n      float lightOffsetX = centerPoint.x - ((1.0 - centerPoint.y) / tan(angleInRadians));\n      float dx = lightOffsetX + (1.0 - v_uv0.y) / tan(angleInRadians);\n      float offsetDis = abs(v_uv0.x - dx);\n      dis = sin(angleInRadians) * offsetDis;\n    } else {\n      dis = abs(v_uv0.y - centerPoint.y);\n    }\n    float a = 1.0 ;\n    if (cropAlpha) {\n      a *= step(0.01, textureColor.a);\n    }\n    if (!enableFog) {\n      a *= step(dis, width * 0.5);\n    }\n    if (gradient) {\n      a *= 1.0 - dis / (width * 0.5);\n    }\n    vec4 finalLightColor = lightColor * a;\n    return textureColor * textureColor.a + finalLightColor;\n  }\n#endif\nvoid main () {\n  vec4 o = vec4(1, 1, 1, 1);\n  #if USE_TEXTURE\n  vec4 texture_tmp = texture(texture, v_uv0);\n  #if CC_USE_ALPHA_ATLAS_texture\n      texture_tmp.a *= texture(texture, v_uv0 + vec2(0, 0.5)).r;\n  #endif\n  #if INPUT_IS_GAMMA\n    o.rgb *= (texture_tmp.rgb * texture_tmp.rgb);\n    o.a *= texture_tmp.a;\n  #else\n    o *= texture_tmp;\n  #endif\n  #endif\n  o *= v_color;\n  ALPHA_TEST(o);\n  #if USE_FLASH_LIGHT\n  o = addLightColor(o);\n  #endif\n  gl_FragColor = o;\n}"},"glsl1":{"vert":"\nprecision highp float;\nuniform mat4 cc_matViewProj;\nuniform mat4 cc_matWorld;\nattribute vec3 a_position;\nattribute vec4 a_color;\nvarying vec4 v_color;\n#if USE_TEXTURE\nattribute vec2 a_uv0;\nvarying vec2 v_uv0;\n#endif\nvoid main () {\n  vec4 pos = vec4(a_position, 1);\n  #if CC_USE_MODEL\n  pos = cc_matViewProj * cc_matWorld * pos;\n  #else\n  pos = cc_matViewProj * pos;\n  #endif\n  #if USE_TEXTURE\n  v_uv0 = a_uv0;\n  #endif\n  v_color = a_color;\n  gl_Position = pos;\n}","frag":"\nprecision highp float;\n#if USE_ALPHA_TEST\n  uniform float alphaThreshold;\n#endif\nvoid ALPHA_TEST (in vec4 color) {\n  #if USE_ALPHA_TEST\n      if (color.a < alphaThreshold) discard;\n  #endif\n}\nvoid ALPHA_TEST (in float alpha) {\n  #if USE_ALPHA_TEST\n      if (alpha < alphaThreshold) discard;\n  #endif\n}\nvarying vec4 v_color;\n#if USE_TEXTURE\nvarying vec2 v_uv0;\nuniform sampler2D texture;\n#endif\n#if USE_FLASH_LIGHT\n  uniform vec4 lightColor;\nuniform vec2 centerPoint;\nuniform float angle;\nuniform float width;\nuniform bool gradient;\nuniform bool cropAlpha;\nuniform bool enableFog;\n  vec4 addLightColor(vec4 textureColor) {\n    if (width <= 0.0) {\n      return textureColor;\n    }\n    float angleInRadians = radians(angle);\n    float dis = 0.0;\n    if (mod(angle, 180.0) != 0.0) {\n      float lightOffsetX = centerPoint.x - ((1.0 - centerPoint.y) / tan(angleInRadians));\n      float dx = lightOffsetX + (1.0 - v_uv0.y) / tan(angleInRadians);\n      float offsetDis = abs(v_uv0.x - dx);\n      dis = sin(angleInRadians) * offsetDis;\n    } else {\n      dis = abs(v_uv0.y - centerPoint.y);\n    }\n    float a = 1.0 ;\n    if (cropAlpha) {\n      a *= step(0.01, textureColor.a);\n    }\n    if (!enableFog) {\n      a *= step(dis, width * 0.5);\n    }\n    if (gradient) {\n      a *= 1.0 - dis / (width * 0.5);\n    }\n    vec4 finalLightColor = lightColor * a;\n    return textureColor * textureColor.a + finalLightColor;\n  }\n#endif\nvoid main () {\n  vec4 o = vec4(1, 1, 1, 1);\n  #if USE_TEXTURE\n  vec4 texture_tmp = texture2D(texture, v_uv0);\n  #if CC_USE_ALPHA_ATLAS_texture\n      texture_tmp.a *= texture2D(texture, v_uv0 + vec2(0, 0.5)).r;\n  #endif\n  #if INPUT_IS_GAMMA\n    o.rgb *= (texture_tmp.rgb * texture_tmp.rgb);\n    o.a *= texture_tmp.a;\n  #else\n    o *= texture_tmp;\n  #endif\n  #endif\n  o *= v_color;\n  ALPHA_TEST(o);\n  #if USE_FLASH_LIGHT\n  o = addLightColor(o);\n  #endif\n  gl_FragColor = o;\n}"},"builtins":{"globals":{"blocks":[{"name":"CCGlobal","defines":[]}],"samplers":[]},"locals":{"blocks":[{"name":"CCLocal","defines":[]}],"samplers":[]}},"defines":[{"name":"USE_TEXTURE","type":"boolean","defines":[]},{"name":"CC_USE_MODEL","type":"boolean","defines":[]},{"name":"USE_ALPHA_TEST","type":"boolean","defines":[]},{"name":"USE_FLASH_LIGHT","type":"boolean","defines":[]},{"name":"CC_USE_ALPHA_ATLAS_texture","type":"boolean","defines":["USE_TEXTURE"]},{"name":"INPUT_IS_GAMMA","type":"boolean","defines":["USE_TEXTURE"]}],"blocks":[{"name":"ALPHA_TEST","binding":0,"members":[{"name":"alphaThreshold","type":13,"count":1}],"defines":["USE_ALPHA_TEST"]},{"name":"Light","binding":1,"members":[{"name":"lightColor","type":16,"count":1},{"name":"centerPoint","type":14,"count":1},{"name":"angle","type":13,"count":1},{"name":"width","type":13,"count":1},{"name":"gradient","type":1,"count":1},{"name":"cropAlpha","type":1,"count":1},{"name":"enableFog","type":1,"count":1}],"defines":["USE_FLASH_LIGHT"]}],"samplers":[{"name":"texture","type":29,"count":1,"binding":30,"defines":["USE_TEXTURE"]}]}],[{"passes":[{"program":"flash_light|vs|fs","blendState":{"targets":[{"blend":true}]},"rasterizerState":{"cullMode":0},"properties":{"texture":{"value":"white","type":29},"alphaThreshold":{"type":13,"value":[0.5]},"lightColor":{"type":16,"value":[1,1,0,1],"editor":{"type":"color","tooltip":"光束颜色"}},"centerPoint":{"type":14,"value":[0.2,0.2],"editor":{"tooltip":"光束中心点坐标"}},"angle":{"type":13,"value":[45],"editor":{"tooltip":"光束倾斜角度","range":[0,180]}},"width":{"type":13,"value":[0.2],"editor":{"tooltip":"光束宽度"}},"gradient":{"type":1,"value":[true],"editor":{"type":"boolean","tooltip":"是否启用光束渐变。0：不启用，非0：启用"}},"cropAlpha":{"type":1,"value":[true],"editor":{"type":"boolean","tooltip":"是否裁剪透明区域上的光。0：不启用，非0：启用"}},"enableFog":{"type":1,"value":[false],"editor":{"type":"boolean","tooltip":"是否启用迷雾效果。0：不启用，非0：启用"}}}}]}]]],0,0,[],[],[]],[[[17,"water_ring"],[20,"wave_ring",[-7,-8],[[16,0,45,200,150,-2],[58,-6,-5,-4,-3]],[40,-1],[4,4286218881],[5,720,1280],[360,640,0,0,0,0,1,1,1,1]],[41,"radius",[-11,-12,-13],[[-9,[4,1,1,20,-10,[5,522.42,50]]],1,4],[0,"56IEhrl09F9ZENflzUpHDN",1],[5,522.42,50],[0,25,0,0,0,0,1,1,1,1]],[41,"offset",[-16,-17,-18],[[-14,[4,1,1,20,-15,[5,522.42,50]]],1,4],[0,"8bwPMKFrpPC6gfRUIfljTX",1],[5,522.42,50],[0,-25,0,0,0,0,1,1,1,1]],[15,"sliders",[2,3],[[32,1,2,-19,[5,720,100]],[24,41,-25,300,-20]],[0,"31tV8AQ1BB96WHxS1Pyu2q",1],[5,720,100],[0,295,0,0,0,0,1,1,1,1]],[3,"slider",2,[-22,-23],[-21],[0,"1avA5FGp1CzIpYqTcbOSq4",1],[5,297.87,20],[14.425000000000011,0,0,0,0,0,1,1,1,1]],[7,"Handle",512,5,[[[2,1,2,-24,[4],5],-25],4,1],[0,"bbj3MawLhGQrbHaJ9I2MmV",1],[5,32,32],[148.935,0,0,0,0,0,1,1,1,0]],[3,"slider",3,[-27,-28],[-26],[0,"f3Ylg5rblJRpRM3KCdrWcK",1],[5,297.87,20],[14.425000000000011,0,0,0,0,0,1,1,1,1]],[7,"Handle",512,7,[[[2,1,2,-29,[10],11],-30],4,1],[0,"e8u+Kb8uJGtq5oTX/XDPmI",1],[5,32,32],[148.935,0,0,0,0,0,1,1,1,0]],[13,"topView",1,[-32],[[21,45,0.5,false,-31]],[0,"bdFX8j0cZKOoWuxz22Pcvu",1],[5,720,640],[0,320,0,0,0,0,1,1,1,1]],[25,"image",9,[[-33,[19,18,-34]],1,4],[0,"b77LrM3VxNrZYU9stsHbEE",1],[5,843,434]],[13,"bottomView",1,[4],[[22,45,0.5,false,-35]],[0,"79u5wAkqpHap95nZwuB7aW",1],[5,720,640],[0,-320,0,0,0,0,1,1,1,1]],[6,"Background",512,5,[[2,1,0,-36,[2],3],[5,40,300,-37]],[0,"3bkC5FeUlK67yo/wzbjtDT",1],[5,297.87,20]],[6,"Background",512,7,[[2,1,0,-38,[8],9],[5,40,300,-39]],[0,"24eW+j1FxG+ot6Uk1WCyVW",1],[5,297.87,20]],[33,10,[0]],[1,"name",2,[-40],[0,"b4xU5MBmpOCZpzSCrZSgvW",1],[5,106.7,50.4],[-207.85999999999999,0,0,0,0,0,1,1,1,1]],[11,"Radius",false,1,2,15,[1]],[9,1.1,true,3,6,[4,4294967295],[4,4294967295],6],[18,1,5,17],[1,"value",2,[-41],[0,"6682uk/FVKo5xIOjsSEXZo",1],[5,77.85,50.4],[222.28500000000003,0,0,0,0,0,1,1,1,1]],[8,"1.00",1,1,19,[6]],[10,2,16,18,20],[1,"name",3,[-42],[0,"50I0GIutFDUJy1cw0HklDk",1],[5,106.7,50.4],[-207.85999999999999,0,0,0,0,0,1,1,1,1]],[11,"Offset",false,1,2,22,[7]],[9,1.1,true,3,8,[4,4294967295],[4,4294967295],8],[18,1,7,24],[1,"value",3,[-43],[0,"01toxsnmlDHKOrEmSazOJ5",1],[5,77.85,50.4],[222.28500000000003,0,0,0,0,0,1,1,1,1]],[8,"1.00",1,1,26,[12]],[10,3,23,25,27]],0,[0,8,1,0,0,1,0,22,28,0,23,21,0,12,14,0,0,1,0,-1,9,0,-2,11,0,-1,21,0,0,2,0,-1,15,0,-2,5,0,-3,19,0,-1,28,0,0,3,0,-1,22,0,-2,7,0,-3,26,0,0,4,0,0,4,0,-1,18,0,-1,12,0,-2,6,0,0,6,0,-2,17,0,-1,25,0,-1,13,0,-2,8,0,0,8,0,-2,24,0,0,9,0,-1,10,0,-1,14,0,0,10,0,0,11,0,0,12,0,0,12,0,0,13,0,0,13,0,-1,16,0,-1,20,0,-1,23,0,-1,27,0,9,1,2,7,4,3,7,4,4,7,11,43],[0,0,0,0,0,0,0,0,0,0,0,0,0,14,17,17,17,17,17,24,24,24,24,24],[-1,-1,-1,1,-1,1,-1,-1,-1,1,-1,1,-1,1,2,3,4,5,6,2,3,4,5,6],[25,0,0,3,0,1,0,0,0,3,0,1,0,26,0,1,1,1,2,0,1,1,1,2]],[[[17,"out_line"],[20,"out_line",[-3,-4],[[16,0,45,200,150,-2]],[40,-1],[4,4286218881],[5,720,1280],[360,640,0,0,0,0,1,1,1,1]],[15,"density",[-10,-11,-12],[[10,-8,-7,-6,-5],[4,1,1,20,-9,[5,522.42,50]]],[0,"daee7ZQS9GV4L/nCkd6kTk",1],[5,522.42,50],[0,25,0,0,0,0,1,1,1,1]],[15,"frequency",[-18,-19,-20],[[10,-16,-15,-14,-13],[4,1,1,20,-17,[5,522.42,50]]],[0,"56IEhrl09F9ZENflzUpHDN",1],[5,522.42,50],[0,-25,0,0,0,0,1,1,1,1]],[15,"sliders",[2,3],[[32,1,2,-21,[5,720,100]],[24,41,-25,300,-22]],[0,"31tV8AQ1BB96WHxS1Pyu2q",1],[5,720,100],[0,295,0,0,0,0,1,1,1,1]],[3,"slider",2,[-24,-25],[-23],[0,"5clF3XbtpJLaGof5ZqTnhE",1],[5,297.87,20],[14.425000000000011,0,0,0,0,0,1,1,1,1]],[7,"Handle",512,5,[[[2,1,2,-26,[5],6],-27],4,1],[0,"df+G2iAJBBPb7Sr+UA63lm",1],[5,32,32],[148.935,0,0,0,0,0,1,1,1,0]],[3,"slider",3,[-29,-30],[-28],[0,"1avA5FGp1CzIpYqTcbOSq4",1],[5,297.87,20],[14.425000000000011,0,0,0,0,0,1,1,1,1]],[7,"Handle",512,7,[[[2,1,2,-31,[11],12],-32],4,1],[0,"bbj3MawLhGQrbHaJ9I2MmV",1],[5,32,32],[148.935,0,0,0,0,0,1,1,1,0]],[13,"topView",1,[-34],[[21,45,0.5,false,-33]],[0,"bdFX8j0cZKOoWuxz22Pcvu",1],[5,720,640],[0,320,0,0,0,0,1,1,1,1]],[47,"image",9,[[28,-35,[0],1],[19,18,-36]],[0,"b77LrM3VxNrZYU9stsHbEE",1],[5,221,219]],[13,"bottomView",1,[4],[[22,45,0.5,false,-37]],[0,"79u5wAkqpHap95nZwuB7aW",1],[5,720,640],[0,-320,0,0,0,0,1,1,1,1]],[6,"Background",512,5,[[2,1,0,-38,[3],4],[5,40,300,-39]],[0,"6eWFT1+EVJHJE9hDGHcryW",1],[5,297.87,20]],[6,"Background",512,7,[[2,1,0,-40,[9],10],[5,40,300,-41]],[0,"3bkC5FeUlK67yo/wzbjtDT",1],[5,297.87,20]],[1,"name",2,[-42],[0,"8aoPHnRzxMVJmkOADgxqm0",1],[5,106.7,50.4],[-207.85999999999999,0,0,0,0,0,1,1,1,1]],[11,"Density",false,1,2,14,[2]],[9,1.1,true,3,6,[4,4294967295],[4,4294967295],6],[18,1,5,16],[1,"value",2,[-43],[0,"67YF171gBDAqSctuTMXggg",1],[5,77.85,50.4],[222.28500000000003,0,0,0,0,0,1,1,1,1]],[8,"1.00",1,1,18,[7]],[1,"name",3,[-44],[0,"b4xU5MBmpOCZpzSCrZSgvW",1],[5,106.7,50.4],[-207.85999999999999,0,0,0,0,0,1,1,1,1]],[11,"Frequency",false,1,2,20,[8]],[9,1.1,true,3,8,[4,4294967295],[4,4294967295],8],[18,1,7,22],[1,"value",3,[-45],[0,"6682uk/FVKo5xIOjsSEXZo",1],[5,77.85,50.4],[222.28500000000003,0,0,0,0,0,1,1,1,1]],[8,"1.00",1,1,24,[13]]],0,[0,8,1,0,0,1,0,-1,9,0,-2,11,0,16,19,0,13,17,0,14,15,0,0,2,0,0,2,0,-1,14,0,-2,5,0,-3,18,0,16,25,0,13,23,0,14,21,0,0,3,0,0,3,0,-1,20,0,-2,7,0,-3,24,0,0,4,0,0,4,0,-1,17,0,-1,12,0,-2,6,0,0,6,0,-2,16,0,-1,23,0,-1,13,0,-2,8,0,0,8,0,-2,22,0,0,9,0,-1,10,0,0,10,0,0,10,0,0,11,0,0,12,0,0,12,0,0,13,0,0,13,0,-1,15,0,-1,19,0,-1,21,0,-1,25,0,9,1,2,7,4,3,7,4,4,7,11,45],[0,0,0,0,0,0,0,0,0,0,0,0,0,0,16,16,16,16,16,22,22,22,22,22],[-1,1,-1,-1,1,-1,1,-1,-1,-1,1,-1,1,-1,2,3,4,5,6,2,3,4,5,6],[27,10,0,0,3,0,1,0,0,0,3,0,1,0,0,1,1,1,2,0,1,1,1,2]],[[[23,"point_light",[{"hash":1281888121,"record":null,"name":"point_light|vs|fs","glsl3":{"vert":"\nprecision highp float;\nuniform CCGlobal {\n  mat4 cc_matView;\n  mat4 cc_matViewInv;\n  mat4 cc_matProj;\n  mat4 cc_matProjInv;\n  mat4 cc_matViewProj;\n  mat4 cc_matViewProjInv;\n  vec4 cc_cameraPos;\n  vec4 cc_time;\n  mediump vec4 cc_screenSize;\n  mediump vec4 cc_screenScale;\n};\nuniform CCLocal {\n  mat4 cc_matWorld;\n  mat4 cc_matWorldIT;\n};\nin vec3 a_position;\nin vec4 a_color;\nout vec4 v_color;\n#if USE_TEXTURE\nin vec2 a_uv0;\nout vec2 v_uv0;\n#endif\nvoid main () {\n  vec4 pos = vec4(a_position, 1);\n  #if CC_USE_MODEL\n  pos = cc_matViewProj * cc_matWorld * pos;\n  #else\n  pos = cc_matViewProj * pos;\n  #endif\n  #if USE_TEXTURE\n  v_uv0 = a_uv0;\n  #endif\n  v_color = a_color;\n  gl_Position = pos;\n}","frag":"\nprecision highp float;\n#if USE_ALPHA_TEST\n  uniform ALPHA_TEST {\n    float alphaThreshold;\n  };\n#endif\nvoid ALPHA_TEST (in vec4 color) {\n  #if USE_ALPHA_TEST\n      if (color.a < alphaThreshold) discard;\n  #endif\n}\nvoid ALPHA_TEST (in float alpha) {\n  #if USE_ALPHA_TEST\n      if (alpha < alphaThreshold) discard;\n  #endif\n}\nin vec4 v_color;\n#if USE_TEXTURE\nin vec2 v_uv0;\nuniform sampler2D texture;\n#endif\n#if USE_POINT_LIGHT\nuniform PointLight{\n  vec4 centerColor;\n  vec2 centerPoint;\n  float radius;\n  bool cropAlpha;\n  bool enableFog;\n};\nvec4 megerWithLight(vec4 sourceColor){\n  float dis = distance(v_uv0, centerPoint);\n  float alpha = 1.0;\n  if(cropAlpha){\n    alpha *= step(0.01, sourceColor.a);\n  }\n  if(!enableFog){\n    alpha *= step(dis, radius);\n  }\n  alpha *= 1.0 - (dis / radius);\n  return sourceColor * sourceColor.a + centerColor * alpha;\n}\n#endif\nvoid main () {\n  vec4 o = vec4(1, 1, 1, 1);\n  #if USE_TEXTURE\n  vec4 texture_tmp = texture(texture, v_uv0);\n  #if CC_USE_ALPHA_ATLAS_texture\n      texture_tmp.a *= texture(texture, v_uv0 + vec2(0, 0.5)).r;\n  #endif\n  #if INPUT_IS_GAMMA\n    o.rgb *= (texture_tmp.rgb * texture_tmp.rgb);\n    o.a *= texture_tmp.a;\n  #else\n    o *= texture_tmp;\n  #endif\n  #endif\n  o *= v_color;\n  ALPHA_TEST(o);\n  gl_FragColor = o;\n  #if USE_POINT_LIGHT\n    gl_FragColor = megerWithLight(gl_FragColor);\n  #endif\n}"},"glsl1":{"vert":"\nprecision highp float;\nuniform mat4 cc_matViewProj;\nuniform mat4 cc_matWorld;\nattribute vec3 a_position;\nattribute vec4 a_color;\nvarying vec4 v_color;\n#if USE_TEXTURE\nattribute vec2 a_uv0;\nvarying vec2 v_uv0;\n#endif\nvoid main () {\n  vec4 pos = vec4(a_position, 1);\n  #if CC_USE_MODEL\n  pos = cc_matViewProj * cc_matWorld * pos;\n  #else\n  pos = cc_matViewProj * pos;\n  #endif\n  #if USE_TEXTURE\n  v_uv0 = a_uv0;\n  #endif\n  v_color = a_color;\n  gl_Position = pos;\n}","frag":"\nprecision highp float;\n#if USE_ALPHA_TEST\n  uniform float alphaThreshold;\n#endif\nvoid ALPHA_TEST (in vec4 color) {\n  #if USE_ALPHA_TEST\n      if (color.a < alphaThreshold) discard;\n  #endif\n}\nvoid ALPHA_TEST (in float alpha) {\n  #if USE_ALPHA_TEST\n      if (alpha < alphaThreshold) discard;\n  #endif\n}\nvarying vec4 v_color;\n#if USE_TEXTURE\nvarying vec2 v_uv0;\nuniform sampler2D texture;\n#endif\n#if USE_POINT_LIGHT\nuniform vec4 centerColor;\nuniform vec2 centerPoint;\nuniform float radius;\nuniform bool cropAlpha;\nuniform bool enableFog;\nvec4 megerWithLight(vec4 sourceColor){\n  float dis = distance(v_uv0, centerPoint);\n  float alpha = 1.0;\n  if(cropAlpha){\n    alpha *= step(0.01, sourceColor.a);\n  }\n  if(!enableFog){\n    alpha *= step(dis, radius);\n  }\n  alpha *= 1.0 - (dis / radius);\n  return sourceColor * sourceColor.a + centerColor * alpha;\n}\n#endif\nvoid main () {\n  vec4 o = vec4(1, 1, 1, 1);\n  #if USE_TEXTURE\n  vec4 texture_tmp = texture2D(texture, v_uv0);\n  #if CC_USE_ALPHA_ATLAS_texture\n      texture_tmp.a *= texture2D(texture, v_uv0 + vec2(0, 0.5)).r;\n  #endif\n  #if INPUT_IS_GAMMA\n    o.rgb *= (texture_tmp.rgb * texture_tmp.rgb);\n    o.a *= texture_tmp.a;\n  #else\n    o *= texture_tmp;\n  #endif\n  #endif\n  o *= v_color;\n  ALPHA_TEST(o);\n  gl_FragColor = o;\n  #if USE_POINT_LIGHT\n    gl_FragColor = megerWithLight(gl_FragColor);\n  #endif\n}"},"builtins":{"globals":{"blocks":[{"name":"CCGlobal","defines":[]}],"samplers":[]},"locals":{"blocks":[{"name":"CCLocal","defines":[]}],"samplers":[]}},"defines":[{"name":"USE_TEXTURE","type":"boolean","defines":[]},{"name":"CC_USE_MODEL","type":"boolean","defines":[]},{"name":"USE_ALPHA_TEST","type":"boolean","defines":[]},{"name":"USE_POINT_LIGHT","type":"boolean","defines":[]},{"name":"CC_USE_ALPHA_ATLAS_texture","type":"boolean","defines":["USE_TEXTURE"]},{"name":"INPUT_IS_GAMMA","type":"boolean","defines":["USE_TEXTURE"]}],"blocks":[{"name":"ALPHA_TEST","binding":0,"members":[{"name":"alphaThreshold","type":13,"count":1}],"defines":["USE_ALPHA_TEST"]},{"name":"PointLight","binding":1,"members":[{"name":"centerColor","type":16,"count":1},{"name":"centerPoint","type":14,"count":1},{"name":"radius","type":13,"count":1},{"name":"cropAlpha","type":1,"count":1},{"name":"enableFog","type":1,"count":1}],"defines":["USE_POINT_LIGHT"]}],"samplers":[{"name":"texture","type":29,"count":1,"binding":30,"defines":["USE_TEXTURE"]}]}],[{"passes":[{"program":"point_light|vs|fs","blendState":{"targets":[{"blend":true}]},"rasterizerState":{"cullMode":0},"properties":{"texture":{"value":"white","type":29},"alphaThreshold":{"type":13,"value":[0.5]},"centerColor":{"type":16,"value":[1,1,1,1],"inspector":{"type":"color","tooltip":"灯光颜色"}},"centerPoint":{"type":14,"value":[0.5,0.5],"inspector":{"tooltip":"灯光位置"}},"radius":{"type":13,"value":[0.5],"inspector":{"tooltip":"灯光半径","range":[0,1]}},"cropAlpha":{"type":1,"value":[false],"inspector":{"type":"boolean","tooltip":"裁剪透明区域"}},"enableFog":{"type":1,"value":[false],"inspector":{"type":"boolean","tooltip":""}}}}]}]]],0,0,[],[],[]],[[[59,"ShaderScene",null],[51,"background",[-3,-4,-5,-6],[[16,0,45,200,150,-1],[2,1,0,-2,[21],22]],[4,4280948995],[5,720,1280]],[52,"Canvas","a5esZu+45LA5mBpvttspPD",[-14,1],[[60,true,false,-7,[5,720,1280]],[19,45,-8],[61,-13,-12,-11,-10,-9,[23,24,25,26,27,28,29,30,31,32,33]]],[5,720,1280],[360,640,0,0,0,0,1,1,1,1]],[42,"previous",1,[-18],[[46,2,-16,[4,4293322470],[4,4291348680],[4,3363338360],-15,3,4,5,6],[53,12,10,10,-17]],[5,200,80],[-250,-590,0,0,0,0,1,1,1,1]],[43,"Background",512,3,[-21],[[2,1,0,-19,[1],2],[16,0,45,100,40,-20]],[5,200,80]],[42,"next",1,[-25],[[46,2,-23,[4,4293322470],[4,4291348680],[4,3363338360],-22,10,11,12,13],[50,36,10,10,-24]],[5,200,80],[250,-590,0,0,0,0,1,1,1,1]],[43,"Background",512,5,[-28],[[2,1,0,-26,[8],9],[16,0,45,100,40,-27]],[5,200,80]],[42,"quit",1,[-32],[[46,2,-30,[4,4293322470],[4,4291348680],[4,3363338360],-29,17,18,19,20],[50,20,10,10,-31]],[5,200,80],[0,-590,0,0,0,0,1,1,1,1]],[43,"Background",512,7,[-35],[[2,1,0,-33,[15],16],[16,0,45,100,40,-34]],[5,200,80]],[48,"layerContainer",1,[[54,45,150,-36]],[5,720,1130],[0,75,0,0,0,0,1,1,1,1]],[62,"New Node",false,true,[2],[0,0,0],[0,0,0,0,0,0,1,1,1,1]],[48,"Main Camera",2,[[63,7,-1,-37]],[5,960,640],[0,0,535.2036995387831,0,0,0,1,1,1,1]],[44,"Label",512,4,[[45,"Previous",false,1,1,1,-38,[0]]],[4,4278190080],[5,155.63,50.4]],[44,"Label",512,6,[[45,"Next",false,1,1,1,-39,[7]]],[4,4278190080],[5,82.25,50.4]],[44,"Label",512,8,[[45,"Quit",false,1,1,1,-40,[14]]],[4,4278190080],[5,73.36,50.4]]],0,[0,0,1,0,0,1,0,-1,9,0,-2,3,0,-3,5,0,-4,7,0,0,2,0,0,2,0,32,5,0,33,7,0,34,3,0,35,9,0,0,2,0,-1,11,0,20,4,0,0,3,0,0,3,0,-1,4,0,0,4,0,0,4,0,-1,12,0,20,6,0,0,5,0,0,5,0,-1,6,0,0,6,0,0,6,0,-1,13,0,20,8,0,0,7,0,0,7,0,-1,8,0,0,8,0,0,8,0,-1,14,0,0,9,0,0,11,0,0,12,0,0,13,0,0,14,0,36,10,1,7,2,2,7,10,40],[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],[-1,-1,1,3,4,5,6,-1,-1,1,3,4,5,6,-1,-1,1,3,4,5,6,-1,1,-1,-2,-3,-4,-5,-6,-7,-8,-9,-10,-11],[0,0,4,4,9,4,2,0,0,4,4,9,4,2,0,0,4,4,9,4,2,0,28,29,30,31,32,33,34,35,36,37,38,39]],[[[23,"out_line",[{"hash":1646541108,"record":null,"name":"out_line|vs|fs","glsl3":{"vert":"\nprecision highp float;\nuniform CCGlobal {\n  mat4 cc_matView;\n  mat4 cc_matViewInv;\n  mat4 cc_matProj;\n  mat4 cc_matProjInv;\n  mat4 cc_matViewProj;\n  mat4 cc_matViewProjInv;\n  vec4 cc_cameraPos;\n  vec4 cc_time;\n  mediump vec4 cc_screenSize;\n  mediump vec4 cc_screenScale;\n};\nuniform CCLocal {\n  mat4 cc_matWorld;\n  mat4 cc_matWorldIT;\n};\nin vec3 a_position;\nin vec4 a_color;\nout vec4 v_color;\n#if USE_TEXTURE\nin vec2 a_uv0;\nout vec2 v_uv0;\n#endif\nvoid main () {\n  vec4 pos = vec4(a_position, 1);\n  #if CC_USE_MODEL\n  pos = cc_matViewProj * cc_matWorld * pos;\n  #else\n  pos = cc_matViewProj * pos;\n  #endif\n  #if USE_TEXTURE\n  v_uv0 = a_uv0;\n  #endif\n  v_color = a_color;\n  gl_Position = pos;\n}","frag":"\nprecision highp float;\n#if USE_ALPHA_TEST\n  uniform ALPHA_TEST {\n    float alphaThreshold;\n  };\n#endif\nvoid ALPHA_TEST (in vec4 color) {\n  #if USE_ALPHA_TEST\n      if (color.a < alphaThreshold) discard;\n  #endif\n}\nvoid ALPHA_TEST (in float alpha) {\n  #if USE_ALPHA_TEST\n      if (alpha < alphaThreshold) discard;\n  #endif\n}\nin vec4 v_color;\n#if USE_TEXTURE\nin vec2 v_uv0;\nuniform sampler2D texture;\n#endif\n#if USE_OUT_LINE\nuniform Outline {\n  vec4 outlineColor;\n  float outlineWidth;\n};\nfloat getBgAlpha() {\n  vec4 color_up = texture(texture, v_uv0 + vec2(0, outlineWidth));\n  vec4 color_down = texture(texture, v_uv0 - vec2(0, outlineWidth));\n  vec4 color_left = texture(texture, v_uv0 - vec2(outlineWidth, 0));\n  vec4 color_right = texture(texture, v_uv0 + vec2(outlineWidth, 0));\n  vec4 color_up_left = texture(texture, v_uv0 + vec2(outlineWidth, -outlineWidth));\n  vec4 color_up_right = texture(texture, v_uv0 + vec2(outlineWidth, outlineWidth));\n  vec4 color_down_left = texture(texture, v_uv0 + vec2(-outlineWidth, -outlineWidth));\n  vec4 color_down_right = texture(texture, v_uv0 + vec2(-outlineWidth, outlineWidth));\n  float total = color_right.a + color_left.a + color_down.a + color_up.a + color_up_left.a + color_up_right.a + color_down_left.a + color_down_right.a;\n  return clamp(total, 0.0, 1.0);\n}\n#endif\nvoid main () {\n  vec4 o = vec4(1, 1, 1, 1);\n  #if USE_TEXTURE\n  vec4 texture_tmp = texture(texture, v_uv0);\n  #if CC_USE_ALPHA_ATLAS_texture\n      texture_tmp.a *= texture(texture, v_uv0 + vec2(0, 0.5)).r;\n  #endif\n  #if INPUT_IS_GAMMA\n    o.rgb *= (texture_tmp.rgb * texture_tmp.rgb);\n    o.a *= texture_tmp.a;\n  #else\n    o *= texture_tmp;\n  #endif\n  #endif\n  o *= v_color;\n  ALPHA_TEST(o);\n  gl_FragColor = o;\n  #if USE_OUT_LINE\n    if (outlineWidth == 0.0) {\n      return;\n    }\n    vec4 color_dest = outlineColor * getBgAlpha();\n    vec4 color_src = o;\n    gl_FragColor = color_src * color_src.a + color_dest * (1.0 - color_src.a);\n  #endif\n}"},"glsl1":{"vert":"\nprecision highp float;\nuniform mat4 cc_matViewProj;\nuniform mat4 cc_matWorld;\nattribute vec3 a_position;\nattribute vec4 a_color;\nvarying vec4 v_color;\n#if USE_TEXTURE\nattribute vec2 a_uv0;\nvarying vec2 v_uv0;\n#endif\nvoid main () {\n  vec4 pos = vec4(a_position, 1);\n  #if CC_USE_MODEL\n  pos = cc_matViewProj * cc_matWorld * pos;\n  #else\n  pos = cc_matViewProj * pos;\n  #endif\n  #if USE_TEXTURE\n  v_uv0 = a_uv0;\n  #endif\n  v_color = a_color;\n  gl_Position = pos;\n}","frag":"\nprecision highp float;\n#if USE_ALPHA_TEST\n  uniform float alphaThreshold;\n#endif\nvoid ALPHA_TEST (in vec4 color) {\n  #if USE_ALPHA_TEST\n      if (color.a < alphaThreshold) discard;\n  #endif\n}\nvoid ALPHA_TEST (in float alpha) {\n  #if USE_ALPHA_TEST\n      if (alpha < alphaThreshold) discard;\n  #endif\n}\nvarying vec4 v_color;\n#if USE_TEXTURE\nvarying vec2 v_uv0;\nuniform sampler2D texture;\n#endif\n#if USE_OUT_LINE\nuniform vec4 outlineColor;\nuniform float outlineWidth;\nfloat getBgAlpha() {\n  vec4 color_up = texture2D(texture, v_uv0 + vec2(0, outlineWidth));\n  vec4 color_down = texture2D(texture, v_uv0 - vec2(0, outlineWidth));\n  vec4 color_left = texture2D(texture, v_uv0 - vec2(outlineWidth, 0));\n  vec4 color_right = texture2D(texture, v_uv0 + vec2(outlineWidth, 0));\n  vec4 color_up_left = texture2D(texture, v_uv0 + vec2(outlineWidth, -outlineWidth));\n  vec4 color_up_right = texture2D(texture, v_uv0 + vec2(outlineWidth, outlineWidth));\n  vec4 color_down_left = texture2D(texture, v_uv0 + vec2(-outlineWidth, -outlineWidth));\n  vec4 color_down_right = texture2D(texture, v_uv0 + vec2(-outlineWidth, outlineWidth));\n  float total = color_right.a + color_left.a + color_down.a + color_up.a + color_up_left.a + color_up_right.a + color_down_left.a + color_down_right.a;\n  return clamp(total, 0.0, 1.0);\n}\n#endif\nvoid main () {\n  vec4 o = vec4(1, 1, 1, 1);\n  #if USE_TEXTURE\n  vec4 texture_tmp = texture2D(texture, v_uv0);\n  #if CC_USE_ALPHA_ATLAS_texture\n      texture_tmp.a *= texture2D(texture, v_uv0 + vec2(0, 0.5)).r;\n  #endif\n  #if INPUT_IS_GAMMA\n    o.rgb *= (texture_tmp.rgb * texture_tmp.rgb);\n    o.a *= texture_tmp.a;\n  #else\n    o *= texture_tmp;\n  #endif\n  #endif\n  o *= v_color;\n  ALPHA_TEST(o);\n  gl_FragColor = o;\n  #if USE_OUT_LINE\n    if (outlineWidth == 0.0) {\n      return;\n    }\n    vec4 color_dest = outlineColor * getBgAlpha();\n    vec4 color_src = o;\n    gl_FragColor = color_src * color_src.a + color_dest * (1.0 - color_src.a);\n  #endif\n}"},"builtins":{"globals":{"blocks":[{"name":"CCGlobal","defines":[]}],"samplers":[]},"locals":{"blocks":[{"name":"CCLocal","defines":[]}],"samplers":[]}},"defines":[{"name":"USE_TEXTURE","type":"boolean","defines":[]},{"name":"CC_USE_MODEL","type":"boolean","defines":[]},{"name":"USE_ALPHA_TEST","type":"boolean","defines":[]},{"name":"USE_OUT_LINE","type":"boolean","defines":[]},{"name":"CC_USE_ALPHA_ATLAS_texture","type":"boolean","defines":["USE_TEXTURE"]},{"name":"INPUT_IS_GAMMA","type":"boolean","defines":["USE_TEXTURE"]}],"blocks":[{"name":"ALPHA_TEST","binding":0,"members":[{"name":"alphaThreshold","type":13,"count":1}],"defines":["USE_ALPHA_TEST"]},{"name":"Outline","binding":1,"members":[{"name":"outlineColor","type":16,"count":1},{"name":"outlineWidth","type":13,"count":1}],"defines":["USE_OUT_LINE"]}],"samplers":[{"name":"texture","type":29,"count":1,"binding":30,"defines":["USE_TEXTURE"]}]}],[{"passes":[{"program":"out_line|vs|fs","blendState":{"targets":[{"blend":true}]},"rasterizerState":{"cullMode":0},"properties":{"texture":{"value":"white","type":29},"alphaThreshold":{"type":13,"value":[0.5]},"outlineColor":{"type":16,"value":[1,0,0,1],"editor":{"type":"color","tooltip":"描边颜色"}},"outlineWidth":{"type":13,"value":[0.002],"editor":{"tooltip":"描边宽度","range":[0,1]}}}}]}]]],0,0,[],[],[]],[[[37,"out_line",[{},"0",11,[{"defines":{"USE_TEXTURE":true,"USE_OUT_LINE":true}},"props",11,[{"outlineWidth":0.01},"outlineColor",8,[4,4294967295]]]]]],0,0,[0],[10],[40]],[[[17,"sliderWithValue"],[15,"sliderWithValue",[-7,-8,-9],[[10,-5,-4,-3,-2],[4,1,1,20,-6,[5,522.42,50]]],[0,"18uPmTFYtB+Y6+vZ6+3020",-1],[5,522.42,50],[0,-249.876,0,0,0,0,1,1,1,1]],[3,"slider",1,[-11,-12],[-10],[0,"128lsk4lRORYjdBXOe6Oj5",1],[5,297.87,20],[14.425000000000011,0,0,0,0,0,1,1,1,1]],[7,"Handle",512,2,[[[2,1,2,-13,[3],4],-14],4,1],[0,"33baLP3NJNGKNm2VMuF6uG",1],[5,32,32],[148.935,0,0,0,0,0,1,1,1,0]],[6,"Background",512,2,[[2,1,0,-15,[1],2],[5,40,300,-16]],[0,"e0aLAFjLNJ84OOUSY2A0r/",1],[5,297.87,20]],[1,"name",1,[-17],[0,"9fo949GUxMV5Bln0AmpI1Q",1],[5,106.7,50.4],[-207.85999999999999,0,0,0,0,0,1,1,1,1]],[56,"Name",false,1,1,2,5,[0]],[9,1.1,true,3,3,[4,4294967295],[4,4294967295],3],[18,1,2,7],[1,"value",1,[-18],[0,"72zjn5nNpOtJJAi7YU35QZ",1],[5,77.85,50.4],[222.28500000000003,0,0,0,0,0,1,1,1,1]],[8,"1.00",1,1,9,[5]]],0,[0,8,1,0,16,10,0,13,8,0,14,6,0,0,1,0,0,1,0,-1,5,0,-2,2,0,-3,9,0,-1,8,0,-1,4,0,-2,3,0,0,3,0,-2,7,0,0,4,0,0,4,0,-1,6,0,-1,10,0,9,1,18],[0,0,0,0,0,0,7,7,7,7,7],[-1,-1,1,-1,1,-1,2,3,4,5,6],[0,0,3,0,1,0,0,1,1,1,2]],[[[17,"inner_glow"],[20,"inner_glow",[-10,-11],[[16,0,45,200,150,-2],[64,-9,-8,-7,-6,-5,-4,-3]],[0,"ebQrhbnqhODaA0TvDfqIf5",-1],[4,4286218881],[5,720,1280],[360,640,0,0,0,0,1,1,1,1]],[15,"sliders",[-14,-15,-16,-17,-18],[[31,1,2,20,-12,[5,720,330]],[24,41,-105,300,-13]],[0,"4bHQAPzT5Kj4+xk4tl5gv2",1],[5,720,330],[0,260,0,0,0,0,1,1,1,1]],[14,"red",2,[-21,-22,-23],[[-19,[4,1,1,20,-20,[5,522.42,50]]],1,4],[0,"320Jzbsx5MgbC/C1mgEEQ2",1],[5,522.42,50],[0,140,0,0,0,0,1,1,1,1]],[14,"green",2,[-26,-27,-28],[[-24,[4,1,1,20,-25,[5,522.42,50]]],1,4],[0,"9bA9iYYEJH3oy06sTiiXdf",1],[5,522.42,50],[0,70,0,0,0,0,1,1,1,1]],[38,"blue",2,[-31,-32,-33],[[-29,[4,1,1,20,-30,[5,522.42,50]]],1,4],[0,"4fppjuaixByaWArtx0y/X9",1],[5,522.42,50]],[14,"level",2,[-36,-37,-38],[[-34,[4,1,1,20,-35,[5,522.42,50]]],1,4],[0,"a3tabegYlHbp4vpENHhP8S",1],[5,522.42,50],[0,-70,0,0,0,0,1,1,1,1]],[14,"threshold",2,[-41,-42,-43],[[-39,[4,1,1,20,-40,[5,522.42,50]]],1,4],[0,"9cvwVRlNVFobGdg6LMRwJp",1],[5,522.42,50],[0,-140,0,0,0,0,1,1,1,1]],[3,"slider",3,[-45,-46],[-44],[0,"b5N0jEIqNGsYmMcy2LIpwy",1],[5,297.87,20],[14.425000000000011,0,0,0,0,0,1,1,1,1]],[7,"Handle",512,8,[[[2,1,2,-47,[4],5],-48],4,1],[0,"8boJaJ5ytB54ggbPoqDr3k",1],[5,32,32],[0,0,0,0,0,0,1,1,1,0]],[3,"slider",4,[-50,-51],[-49],[0,"12mNA8S69KBY/xollvqGnn",1],[5,297.87,20],[14.425000000000011,0,0,0,0,0,1,1,1,1]],[7,"Handle",512,10,[[[2,1,2,-52,[10],11],-53],4,1],[0,"b6xxtp8XlCfrSoIMH0JuOl",1],[5,32,32],[0,0,0,0,0,0,1,1,1,0]],[3,"slider",5,[-55,-56],[-54],[0,"fdoNAyPbVNA4nyRjlyiuxA",1],[5,297.87,20],[14.425000000000011,0,0,0,0,0,1,1,1,1]],[7,"Handle",512,12,[[[2,1,2,-57,[16],17],-58],4,1],[0,"94kIvP3vBCiZC0+c+cr5Q3",1],[5,32,32],[0,0,0,0,0,0,1,1,1,0]],[3,"slider",6,[-60,-61],[-59],[0,"92uktfhp1OF4Gv0XsYBCiT",1],[5,297.87,20],[14.425000000000011,0,0,0,0,0,1,1,1,1]],[7,"Handle",512,14,[[[2,1,2,-62,[22],23],-63],4,1],[0,"87mhW+u+NECrytUus4Hr3m",1],[5,32,32],[0,0,0,0,0,0,1,1,1,0]],[3,"slider",7,[-65,-66],[-64],[0,"90ulvkrVxD6aSPWP0pmiH6",1],[5,297.87,20],[14.425000000000011,0,0,0,0,0,1,1,1,1]],[7,"Handle",512,16,[[[2,1,2,-67,[28],29],-68],4,1],[0,"cej1ShzwBAQa4tIJjoCMoL",1],[5,32,32],[0,0,0,0,0,0,1,1,1,0]],[13,"topView",1,[-70],[[21,45,0.5,false,-69]],[0,"5852LtF7FI6ppmgCt1CzX9",1],[5,720,640],[0,320,0,0,0,0,1,1,1,1]],[25,"image",18,[[-71,[19,18,-72]],1,4],[0,"efYY+lslBC65iEhrQQzR9f",1],[5,195,270]],[13,"bottomView",1,[2],[[22,45,0.5,false,-73]],[0,"340YyMkrBIRL7bkgNtEEXO",1],[5,720,640],[0,-320,0,0,0,0,1,1,1,1]],[6,"Background",512,8,[[2,1,0,-74,[2],3],[5,40,300,-75]],[0,"7aGEzCjU5Om54NziVV9TCj",1],[5,297.87,20]],[6,"Background",512,10,[[2,1,0,-76,[8],9],[5,40,300,-77]],[0,"d5W0m3LyhGIK+ckXF4dLdB",1],[5,297.87,20]],[6,"Background",512,12,[[2,1,0,-78,[14],15],[5,40,300,-79]],[0,"353TBmukpLvaK2mIoRPEhP",1],[5,297.87,20]],[6,"Background",512,14,[[2,1,0,-80,[20],21],[5,40,300,-81]],[0,"f12Lirr5xEQbzKCsXxOV7Y",1],[5,297.87,20]],[6,"Background",512,16,[[2,1,0,-82,[26],27],[5,40,300,-83]],[0,"dcwVGlzolKIo7Rz+IzMtSG",1],[5,297.87,20]],[26,2,false,19,[0]],[1,"name",3,[-84],[0,"60bOuWEzdDWInsYxtQDN6L",1],[5,106.7,50.4],[-207.85999999999999,0,0,0,0,0,1,1,1,1]],[11,"Red",false,1,2,27,[1]],[9,1.1,true,3,9,[4,4294967295],[4,4294967295],9],[12,8,29],[1,"value",3,[-85],[0,"92tb6DlrFECpkc6hCTtu45",1],[5,77.85,50.4],[222.28500000000003,0,0,0,0,0,1,1,1,1]],[8,"1.00",1,1,31,[6]],[10,3,28,30,32],[1,"name",4,[-86],[0,"57+lSlKThLApbC3kBqg+8V",1],[5,106.7,50.4],[-207.85999999999999,0,0,0,0,0,1,1,1,1]],[11,"Green",false,1,2,34,[7]],[9,1.1,true,3,11,[4,4294967295],[4,4294967295],11],[12,10,36],[1,"value",4,[-87],[0,"f06cVhJvlD7Ka928XYFXrp",1],[5,77.85,50.4],[222.28500000000003,0,0,0,0,0,1,1,1,1]],[8,"1.00",1,1,38,[12]],[10,4,35,37,39],[1,"name",5,[-88],[0,"9f+OYjiRBBXLvA6e++g/Nq",1],[5,106.7,50.4],[-207.85999999999999,0,0,0,0,0,1,1,1,1]],[11,"Blue",false,1,2,41,[13]],[9,1.1,true,3,13,[4,4294967295],[4,4294967295],13],[12,12,43],[1,"value",5,[-89],[0,"d6qPv0nF5MUKRdkNC1L8nb",1],[5,77.85,50.4],[222.28500000000003,0,0,0,0,0,1,1,1,1]],[8,"1.00",1,1,45,[18]],[10,5,42,44,46],[1,"name",6,[-90],[0,"29NT6tHZZD9avd622mVyxa",1],[5,106.7,50.4],[-207.85999999999999,0,0,0,0,0,1,1,1,1]],[11,"Level",false,1,2,48,[19]],[9,1.1,true,3,15,[4,4294967295],[4,4294967295],15],[12,14,50],[1,"value",6,[-91],[0,"1fk5k5pzNFf7tmHM+JcEwh",1],[5,77.85,50.4],[222.28500000000003,0,0,0,0,0,1,1,1,1]],[8,"1.00",1,1,52,[24]],[10,6,49,51,53],[1,"name",7,[-92],[0,"32+rL6NjJKurrq5vqd2pwk",1],[5,106.7,50.4],[-207.85999999999999,0,0,0,0,0,1,1,1,1]],[11,"Threshold",false,1,2,55,[25]],[9,1.1,true,3,17,[4,4294967295],[4,4294967295],17],[12,16,57],[1,"value",7,[-93],[0,"c78UZWyZ5NJo9z9UoHeO9+",1],[5,77.85,50.4],[222.28500000000003,0,0,0,0,0,1,1,1,1]],[8,"1.00",1,1,59,[30]],[10,7,56,58,60]],0,[0,8,1,0,0,1,0,24,61,0,25,54,0,17,47,0,18,40,0,19,33,0,12,26,0,0,1,0,-1,18,0,-2,20,0,0,2,0,0,2,0,-1,3,0,-2,4,0,-3,5,0,-4,6,0,-5,7,0,-1,33,0,0,3,0,-1,27,0,-2,8,0,-3,31,0,-1,40,0,0,4,0,-1,34,0,-2,10,0,-3,38,0,-1,47,0,0,5,0,-1,41,0,-2,12,0,-3,45,0,-1,54,0,0,6,0,-1,48,0,-2,14,0,-3,52,0,-1,61,0,0,7,0,-1,55,0,-2,16,0,-3,59,0,-1,30,0,-1,21,0,-2,9,0,0,9,0,-2,29,0,-1,37,0,-1,22,0,-2,11,0,0,11,0,-2,36,0,-1,44,0,-1,23,0,-2,13,0,0,13,0,-2,43,0,-1,51,0,-1,24,0,-2,15,0,0,15,0,-2,50,0,-1,58,0,-1,25,0,-2,17,0,0,17,0,-2,57,0,0,18,0,-1,19,0,-1,26,0,0,19,0,0,20,0,0,21,0,0,21,0,0,22,0,0,22,0,0,23,0,0,23,0,0,24,0,0,24,0,0,25,0,0,25,0,-1,28,0,-1,32,0,-1,35,0,-1,39,0,-1,42,0,-1,46,0,-1,49,0,-1,53,0,-1,56,0,-1,60,0,9,1,2,7,20,93],[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,26,29,29,29,29,29,36,36,36,36,36,43,43,43,43,43,50,50,50,50,50,57,57,57,57,57],[-1,-1,-1,1,-1,1,-1,-1,-1,1,-1,1,-1,-1,-1,1,-1,1,-1,-1,-1,1,-1,1,-1,-1,-1,1,-1,1,-1,1,2,3,4,5,6,2,3,4,5,6,2,3,4,5,6,2,3,4,5,6,2,3,4,5,6],[41,0,0,3,0,1,0,0,0,3,0,1,0,0,0,3,0,1,0,0,0,3,0,1,0,0,0,3,0,1,0,5,0,1,1,1,2,0,1,1,1,2,0,1,1,1,2,0,1,1,1,2,0,1,1,1,2]],[["0,9729,9729,33071,33071,0,0,1",-1],[0],0,[],[],[]],[["0,9729,9729,33071,33071,0,0,0",-1],[0],0,[],[],[]],[[{"name":"default_toggle_normal","rect":[0,0,28,28],"offset":[0,0],"originalSize":[28,28],"capInsets":[0,0,0,0]}],[1],0,[0],[11],[42]],[[[17,"gaussian_blur"],[20,"gaussian_blur",[-6,-7],[[16,0,45,200,150,-2],[65,-5,-4,-3]],[40,-1],[4,4286218881],[5,720,1280],[360,640,0,0,0,0,1,1,1,1]],[49,"level",[-10,-11,-12],[[-8,[4,1,1,20,-9,[5,522.42,50]]],1,4],[0,"320Jzbsx5MgbC/C1mgEEQ2",1],[5,522.42,50]],[15,"sliders",[2],[[31,1,2,20,-13,[5,720,50]],[24,41,35,300,-14]],[0,"4bHQAPzT5Kj4+xk4tl5gv2",1],[5,720,50],[0,260,0,0,0,0,1,1,1,1]],[3,"slider",2,[-16,-17],[-15],[0,"b5N0jEIqNGsYmMcy2LIpwy",1],[5,297.87,20],[14.425000000000011,0,0,0,0,0,1,1,1,1]],[7,"Handle",512,4,[[[2,1,2,-18,[4],5],-19],4,1],[0,"8boJaJ5ytB54ggbPoqDr3k",1],[5,32,32],[0,0,0,0,0,0,1,1,1,0]],[13,"topView",1,[-21],[[21,45,0.5,false,-20]],[0,"5852LtF7FI6ppmgCt1CzX9",1],[5,720,640],[0,320,0,0,0,0,1,1,1,1]],[25,"image",6,[[-22,[19,18,-23]],1,4],[0,"efYY+lslBC65iEhrQQzR9f",1],[5,195,270]],[13,"bottomView",1,[3],[[22,45,0.5,false,-24]],[0,"340YyMkrBIRL7bkgNtEEXO",1],[5,720,640],[0,-320,0,0,0,0,1,1,1,1]],[6,"Background",512,4,[[2,1,0,-25,[2],3],[5,40,300,-26]],[0,"7aGEzCjU5Om54NziVV9TCj",1],[5,297.87,20]],[26,2,false,7,[0]],[1,"name",2,[-27],[0,"60bOuWEzdDWInsYxtQDN6L",1],[5,106.7,50.4],[-207.85999999999999,0,0,0,0,0,1,1,1,1]],[11,"Level",false,1,2,11,[1]],[9,1.1,true,3,5,[4,4294967295],[4,4294967295],5],[12,4,13],[1,"value",2,[-28],[0,"92tb6DlrFECpkc6hCTtu45",1],[5,77.85,50.4],[222.28500000000003,0,0,0,0,0,1,1,1,1]],[8,"1.00",1,1,15,[6]],[10,2,12,14,16]],0,[0,8,1,0,0,1,0,25,17,0,12,10,0,0,1,0,-1,6,0,-2,8,0,-1,17,0,0,2,0,-1,11,0,-2,4,0,-3,15,0,0,3,0,0,3,0,-1,14,0,-1,9,0,-2,5,0,0,5,0,-2,13,0,0,6,0,-1,7,0,-1,10,0,0,7,0,0,8,0,0,9,0,0,9,0,-1,12,0,-1,16,0,9,1,2,7,3,3,7,8,28],[0,0,0,0,0,0,0,10,13,13,13,13,13],[-1,-1,-1,1,-1,1,-1,1,2,3,4,5,6],[43,0,0,3,0,1,0,5,0,1,1,1,2]],[[[17,"point_light"],[20,"point_light",[-12,-13],[[16,0,45,200,150,-2],[66,-11,-10,-9,-8,-7,-6,-5,-4,-3]],[0,"ebQrhbnqhODaA0TvDfqIf5",-1],[4,4286218881],[5,720,1280],[360,640,0,0,0,0,1,1,1,1]],[15,"sliders",[-16,-17,-18,-19,-20,-21,-22],[[31,1,2,20,-14,[5,720,470]],[24,41,-70,300,-15]],[0,"e0c78Gq6xDs6SYnrSaMso9",1],[5,720,470],[0,155,0,0,0,0,1,1,1,1]],[14,"red",2,[-25,-26,-27],[[-23,[4,1,1,20,-24,[5,522.42,50]]],1,4],[0,"f43FQsIiJNd4SZeKJkZT3N",1],[5,522.42,50],[0,210,0,0,0,0,1,1,1,1]],[14,"green",2,[-30,-31,-32],[[-28,[4,1,1,20,-29,[5,522.42,50]]],1,4],[0,"46tk3Cp4BMYon6nh3AZx8b",1],[5,522.42,50],[0,140,0,0,0,0,1,1,1,1]],[14,"blue",2,[-35,-36,-37],[[-33,[4,1,1,20,-34,[5,522.42,50]]],1,4],[0,"d5CYHNmfNMvromhLyyJNBF",1],[5,522.42,50],[0,70,0,0,0,0,1,1,1,1]],[38,"alpha",2,[-40,-41,-42],[[-38,[4,1,1,20,-39,[5,522.42,50]]],1,4],[0,"d4hpfyr+9Jy6jmjxq/y+MM",1],[5,522.42,50]],[14,"radius",2,[-45,-46,-47],[[-43,[4,1,1,20,-44,[5,522.42,50]]],1,4],[0,"e4JoSLAH1EaoPeunhdL8mW",1],[5,522.42,50],[0,-70,0,0,0,0,1,1,1,1]],[39,"cropAlpha",512,2,[-50,-51],[[[4,1,1,20,-48,[5,248.12,50]],-49],4,1],[0,"beN0ECiwVNCYtA7h5JIYRK",1],[5,248.12,50],[0,-140,0,0,0,0,1,1,1,1]],[39,"enbleFrog",512,2,[-54,-55],[[[4,1,1,20,-52,[5,243.66,50]],-53],4,1],[0,"c0XQF+Yw9HSrqWr/k+UWFe",1],[5,243.66,50],[0,-210,0,0,0,0,1,1,1,1]],[3,"slider",3,[-57,-58],[-56],[0,"38irvdNEFIM6q5cLz97i/S",1],[5,297.87,20],[14.425000000000011,0,0,0,0,0,1,1,1,1]],[7,"Handle",512,10,[[[2,1,2,-59,[4],5],-60],4,1],[0,"67sMqObq5E2KA20e0oR1Od",1],[5,32,32],[0,0,0,0,0,0,1,1,1,0]],[3,"slider",4,[-62,-63],[-61],[0,"576dMB8PNGtIXLnYwR4vky",1],[5,297.87,20],[14.425000000000011,0,0,0,0,0,1,1,1,1]],[7,"Handle",512,12,[[[2,1,2,-64,[10],11],-65],4,1],[0,"9elfW30g1Li4aSqQXHytUU",1],[5,32,32],[0,0,0,0,0,0,1,1,1,0]],[3,"slider",5,[-67,-68],[-66],[0,"6eFRp4qzxHa5aBkyo4B6O8",1],[5,297.87,20],[14.425000000000011,0,0,0,0,0,1,1,1,1]],[7,"Handle",512,14,[[[2,1,2,-69,[16],17],-70],4,1],[0,"bdScKAS45L94VoFIRWCPl1",1],[5,32,32],[0,0,0,0,0,0,1,1,1,0]],[3,"slider",6,[-72,-73],[-71],[0,"c9U/9hX0BEmomdLMJVX5/l",1],[5,297.87,20],[14.425000000000011,0,0,0,0,0,1,1,1,1]],[7,"Handle",512,16,[[[2,1,2,-74,[22],23],-75],4,1],[0,"42I+iHV7VNnYf5BxGBPknI",1],[5,32,32],[0,0,0,0,0,0,1,1,1,0]],[3,"slider",7,[-77,-78],[-76],[0,"a6CSoaWkNLCb3Kx6xcLox+",1],[5,297.87,20],[14.425000000000011,0,0,0,0,0,1,1,1,1]],[7,"Handle",512,18,[[[2,1,2,-79,[28],29],-80],4,1],[0,"90iUWLQPZEhq50RMT3huiR",1],[5,32,32],[0,0,0,0,0,0,1,1,1,0]],[3,"toggle",8,[-82,-83],[-81],[0,"bfvBiZAJNEBbsNfbsMK2xr",1],[5,28,28],[110.06,0,0,0,0,0,1,1,1,1]],[3,"toggle",9,[-85,-86],[-84],[0,"5efqzFngNMvadGcDIChH41",1],[5,28,28],[107.83000000000001,0,0,0,0,0,1,1,1,1]],[13,"topView",1,[-88],[[21,45,0.5,false,-87]],[0,"bdFX8j0cZKOoWuxz22Pcvu",1],[5,720,640],[0,320,0,0,0,0,1,1,1,1]],[25,"image",22,[[-89,[19,18,-90]],1,4],[0,"b77LrM3VxNrZYU9stsHbEE",1],[5,195,270]],[13,"bottomView",1,[2],[[22,45,0.5,false,-91]],[0,"79u5wAkqpHap95nZwuB7aW",1],[5,720,640],[0,-320,0,0,0,0,1,1,1,1]],[6,"Background",512,10,[[2,1,0,-92,[2],3],[5,40,300,-93]],[0,"40lhFcsuBF2457lg1bbx4P",1],[5,297.87,20]],[6,"Background",512,12,[[2,1,0,-94,[8],9],[5,40,300,-95]],[0,"95jaB/AbBPD7RC9eRSO1/a",1],[5,297.87,20]],[6,"Background",512,14,[[2,1,0,-96,[14],15],[5,40,300,-97]],[0,"6braKqw35FUrDCFf4IbzMF",1],[5,297.87,20]],[6,"Background",512,16,[[2,1,0,-98,[20],21],[5,40,300,-99]],[0,"2eN4QqoSVDfpqz7aw+3fle",1],[5,297.87,20]],[6,"Background",512,18,[[2,1,0,-100,[26],27],[5,40,300,-101]],[0,"25kWMDsQ9BcIKvhHQdbrXC",1],[5,297.87,20]],[29,"Background",512,20,[[28,-102,[32],33]],[0,"6aUbBHCoNDXbIxZNzPUGg7",1],[5,28,28],[0,0,0,0,0,0,1,1,1,0]],[29,"Background",512,21,[[28,-103,[36],37]],[0,"443u01iepPL6xb/iQJInjA",1],[5,28,28],[0,0,0,0,0,0,1,1,1,0]],[33,23,[0]],[1,"name",3,[-104],[0,"e3f0t4pGBNbo2ip5snAhp9",1],[5,106.7,50.4],[-207.85999999999999,0,0,0,0,0,1,1,1,1]],[11,"Red",false,1,2,33,[1]],[9,1.1,true,3,11,[4,4294967295],[4,4294967295],11],[12,10,35],[1,"value",3,[-105],[0,"0dsY1x/aNK4p1G62Pdfe4c",1],[5,77.85,50.4],[222.28500000000003,0,0,0,0,0,1,1,1,1]],[8,"1.00",1,1,37,[6]],[10,3,34,36,38],[1,"name",4,[-106],[0,"a4YbXSE3pMqrlQh3DJWS0L",1],[5,106.7,50.4],[-207.85999999999999,0,0,0,0,0,1,1,1,1]],[11,"Green",false,1,2,40,[7]],[9,1.1,true,3,13,[4,4294967295],[4,4294967295],13],[12,12,42],[1,"value",4,[-107],[0,"8631XI4O1F14jqiyTq7TX7",1],[5,77.85,50.4],[222.28500000000003,0,0,0,0,0,1,1,1,1]],[8,"1.00",1,1,44,[12]],[10,4,41,43,45],[1,"name",5,[-108],[0,"d6cnrkexhJNLJfyK+k7jFn",1],[5,106.7,50.4],[-207.85999999999999,0,0,0,0,0,1,1,1,1]],[11,"Blue",false,1,2,47,[13]],[9,1.1,true,3,15,[4,4294967295],[4,4294967295],15],[12,14,49],[1,"value",5,[-109],[0,"c5C48RPn5FVKglHq2n8I6f",1],[5,77.85,50.4],[222.28500000000003,0,0,0,0,0,1,1,1,1]],[8,"1.00",1,1,51,[18]],[10,5,48,50,52],[1,"name",6,[-110],[0,"6eZSZV9W9EJLxDbgDOSP+c",1],[5,106.7,50.4],[-207.85999999999999,0,0,0,0,0,1,1,1,1]],[11,"Alpha",false,1,2,54,[19]],[9,1.1,true,3,17,[4,4294967295],[4,4294967295],17],[12,16,56],[1,"value",6,[-111],[0,"1dy80QL2NBEKygSvP7Q9xn",1],[5,77.85,50.4],[222.28500000000003,0,0,0,0,0,1,1,1,1]],[8,"1.00",1,1,58,[24]],[10,6,55,57,59],[1,"name",7,[-112],[0,"e4QE3+h1tG0bdFokZ2qc0V",1],[5,106.7,50.4],[-207.85999999999999,0,0,0,0,0,1,1,1,1]],[11,"Radius",false,1,2,61,[25]],[9,1.1,true,3,19,[4,4294967295],[4,4294967295],19],[12,18,63],[1,"value",7,[-113],[0,"3384RXRMxIq7Pzz2DUdmoY",1],[5,77.85,50.4],[222.28500000000003,0,0,0,0,0,1,1,1,1]],[8,"1.00",1,1,65,[30]],[10,7,62,64,66],[1,"name",8,[-114],[0,"db3UPJJ4NAd5gCQ+XRPazO",1],[5,200.12,50.4],[-24,0,0,0,0,0,1,1,1,1]],[34,"Crop Alpha",false,1,1,68,[31]],[30,"checkmark",512,20,[-115],[0,"afqj3Bz95Gx4oFOeYDUhor",1],[5,28,28]],[26,2,false,70,[34]],[35,0.9,3,20,[4,4292269782],30,71],[36,8,69,72],[1,"name",9,[-116],[0,"0fXuD1K1tI+7TxPYf6VHkP",1],[5,195.66,50.4],[-23.999999999999986,0,0,0,0,0,1,1,1,1]],[34,"Enble Frog",false,1,1,74,[35]],[30,"checkmark",512,21,[-117],[0,"8dBmXyxjBICI/+0/zDnzN8",1],[5,28,28]],[26,2,false,76,[38]],[35,0.9,3,21,[4,4292269782],31,77],[36,9,75,78]],0,[0,8,1,0,0,1,0,26,79,0,27,73,0,23,67,0,21,60,0,17,53,0,18,46,0,19,39,0,12,32,0,0,1,0,-1,22,0,-2,24,0,0,2,0,0,2,0,-1,3,0,-2,4,0,-3,5,0,-4,6,0,-5,7,0,-6,8,0,-7,9,0,-1,39,0,0,3,0,-1,33,0,-2,10,0,-3,37,0,-1,46,0,0,4,0,-1,40,0,-2,12,0,-3,44,0,-1,53,0,0,5,0,-1,47,0,-2,14,0,-3,51,0,-1,60,0,0,6,0,-1,54,0,-2,16,0,-3,58,0,-1,67,0,0,7,0,-1,61,0,-2,18,0,-3,65,0,0,8,0,-2,73,0,-1,68,0,-2,20,0,0,9,0,-2,79,0,-1,74,0,-2,21,0,-1,36,0,-1,25,0,-2,11,0,0,11,0,-2,35,0,-1,43,0,-1,26,0,-2,13,0,0,13,0,-2,42,0,-1,50,0,-1,27,0,-2,15,0,0,15,0,-2,49,0,-1,57,0,-1,28,0,-2,17,0,0,17,0,-2,56,0,-1,64,0,-1,29,0,-2,19,0,0,19,0,-2,63,0,-1,72,0,-1,30,0,-2,70,0,-1,78,0,-1,31,0,-2,76,0,0,22,0,-1,23,0,-1,32,0,0,23,0,0,24,0,0,25,0,0,25,0,0,26,0,0,26,0,0,27,0,0,27,0,0,28,0,0,28,0,0,29,0,0,29,0,0,30,0,0,31,0,-1,34,0,-1,38,0,-1,41,0,-1,45,0,-1,48,0,-1,52,0,-1,55,0,-1,59,0,-1,62,0,-1,66,0,-1,69,0,-1,71,0,-1,75,0,-1,77,0,9,1,2,7,24,117],[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,32,35,35,35,35,35,42,42,42,42,42,49,49,49,49,49,56,56,56,56,56,63,63,63,63,63,71,72,72,77,78,78],[-1,-1,-1,1,-1,1,-1,-1,-1,1,-1,1,-1,-1,-1,1,-1,1,-1,-1,-1,1,-1,1,-1,-1,-1,1,-1,1,-1,-1,-1,1,-1,-1,-1,1,-1,1,2,3,4,5,6,2,3,4,5,6,2,3,4,5,6,2,3,4,5,6,2,3,4,5,6,1,2,15,1,2,15],[44,0,0,3,0,1,0,0,0,3,0,1,0,0,0,3,0,1,0,0,0,3,0,1,0,0,0,3,0,1,0,0,0,6,0,0,0,6,0,5,0,1,1,1,2,0,1,1,1,2,0,1,1,1,2,0,1,1,1,2,0,1,1,1,2,7,0,8,7,0,8]],[["0,9729,9729,33071,33071,0,0,0",-1],[0],0,[],[],[]],[[[37,"lighting",[{},"0",11,[{"defines":{"USE_TEXTURE":true,"USE_BLEND":true}},"props",11,[{"blendThreshold":0.5},"blendColor",8,[4,1979711487]]]]]],0,0,[0],[10],[45]],[["0,9729,9729,33071,33071,0,0,1",-1],[0],0,[],[],[]],[["0,9729,9729,33071,33071,0,0,1",-1],[0],0,[],[],[]],[[[27,"old_photo",{"0":{"defines":{"USE_TEXTURE":true,"USE_OLD_PHOTO":true},"props":{"oldLevel":1}}}]],0,0,[0],[10],[46]],[[[27,"gaussian_blur",{"0":{"defines":{"USE_TEXTURE":true,"ENABLE_GAUSSIAN_BLUR":true}}}]],0,0,[0],[10],[47]],[[[23,"old_photo",[{"hash":1393753574,"record":null,"name":"old_photo|vs|fs","glsl3":{"vert":"\nprecision highp float;\nuniform CCGlobal {\n  mat4 cc_matView;\n  mat4 cc_matViewInv;\n  mat4 cc_matProj;\n  mat4 cc_matProjInv;\n  mat4 cc_matViewProj;\n  mat4 cc_matViewProjInv;\n  vec4 cc_cameraPos;\n  vec4 cc_time;\n  mediump vec4 cc_screenSize;\n  mediump vec4 cc_screenScale;\n};\nuniform CCLocal {\n  mat4 cc_matWorld;\n  mat4 cc_matWorldIT;\n};\nin vec3 a_position;\nin vec4 a_color;\nout vec4 v_color;\n#if USE_TEXTURE\nin vec2 a_uv0;\nout vec2 v_uv0;\n#endif\nvoid main () {\n  vec4 pos = vec4(a_position, 1);\n  #if CC_USE_MODEL\n  pos = cc_matViewProj * cc_matWorld * pos;\n  #else\n  pos = cc_matViewProj * pos;\n  #endif\n  #if USE_TEXTURE\n  v_uv0 = a_uv0;\n  #endif\n  v_color = a_color;\n  gl_Position = pos;\n}","frag":"\nprecision highp float;\n#if USE_ALPHA_TEST\n  uniform ALPHA_TEST {\n    float alphaThreshold;\n  };\n#endif\nvoid ALPHA_TEST (in vec4 color) {\n  #if USE_ALPHA_TEST\n      if (color.a < alphaThreshold) discard;\n  #endif\n}\nvoid ALPHA_TEST (in float alpha) {\n  #if USE_ALPHA_TEST\n      if (alpha < alphaThreshold) discard;\n  #endif\n}\nin vec4 v_color;\n#if USE_TEXTURE\nin vec2 v_uv0;\nuniform sampler2D texture;\n#endif\n#if USE_OLD_PHOTO\nuniform OldPhoto{\n  float oldLevel;\n};\nvec4 getOldPhotoColor(vec4 color){\n  float r = 0.393 * color.r + 0.769 * color.g + 0.189 * color.b;\n  float g = 0.349 * color.r + 0.686 * color.g + 0.168 * color.b;\n  float b = 0.272 * color.r + 0.534 * color.g + 0.131 * color.b;\n  return vec4(r, g, b, color.a);\n}\n#endif\nvoid main () {\n  vec4 o = vec4(1, 1, 1, 1);\n  #if USE_TEXTURE\n  vec4 texture_tmp = texture(texture, v_uv0);\n  #if CC_USE_ALPHA_ATLAS_texture\n      texture_tmp.a *= texture(texture, v_uv0 + vec2(0, 0.5)).r;\n  #endif\n  #if INPUT_IS_GAMMA\n    o.rgb *= (texture_tmp.rgb * texture_tmp.rgb);\n    o.a *= texture_tmp.a;\n  #else\n    o *= texture_tmp;\n  #endif\n  #endif\n  o *= v_color;\n  ALPHA_TEST(o);\n  #if USE_OLD_PHOTO\n  vec4 srcColor = o;\n  vec4 oldColor = getOldPhotoColor(srcColor);\n  o = srcColor + (oldColor - srcColor) * oldLevel;\n  #endif\n  gl_FragColor = o;\n}"},"glsl1":{"vert":"\nprecision highp float;\nuniform mat4 cc_matViewProj;\nuniform mat4 cc_matWorld;\nattribute vec3 a_position;\nattribute vec4 a_color;\nvarying vec4 v_color;\n#if USE_TEXTURE\nattribute vec2 a_uv0;\nvarying vec2 v_uv0;\n#endif\nvoid main () {\n  vec4 pos = vec4(a_position, 1);\n  #if CC_USE_MODEL\n  pos = cc_matViewProj * cc_matWorld * pos;\n  #else\n  pos = cc_matViewProj * pos;\n  #endif\n  #if USE_TEXTURE\n  v_uv0 = a_uv0;\n  #endif\n  v_color = a_color;\n  gl_Position = pos;\n}","frag":"\nprecision highp float;\n#if USE_ALPHA_TEST\n  uniform float alphaThreshold;\n#endif\nvoid ALPHA_TEST (in vec4 color) {\n  #if USE_ALPHA_TEST\n      if (color.a < alphaThreshold) discard;\n  #endif\n}\nvoid ALPHA_TEST (in float alpha) {\n  #if USE_ALPHA_TEST\n      if (alpha < alphaThreshold) discard;\n  #endif\n}\nvarying vec4 v_color;\n#if USE_TEXTURE\nvarying vec2 v_uv0;\nuniform sampler2D texture;\n#endif\n#if USE_OLD_PHOTO\nuniform float oldLevel;\nvec4 getOldPhotoColor(vec4 color){\n  float r = 0.393 * color.r + 0.769 * color.g + 0.189 * color.b;\n  float g = 0.349 * color.r + 0.686 * color.g + 0.168 * color.b;\n  float b = 0.272 * color.r + 0.534 * color.g + 0.131 * color.b;\n  return vec4(r, g, b, color.a);\n}\n#endif\nvoid main () {\n  vec4 o = vec4(1, 1, 1, 1);\n  #if USE_TEXTURE\n  vec4 texture_tmp = texture2D(texture, v_uv0);\n  #if CC_USE_ALPHA_ATLAS_texture\n      texture_tmp.a *= texture2D(texture, v_uv0 + vec2(0, 0.5)).r;\n  #endif\n  #if INPUT_IS_GAMMA\n    o.rgb *= (texture_tmp.rgb * texture_tmp.rgb);\n    o.a *= texture_tmp.a;\n  #else\n    o *= texture_tmp;\n  #endif\n  #endif\n  o *= v_color;\n  ALPHA_TEST(o);\n  #if USE_OLD_PHOTO\n  vec4 srcColor = o;\n  vec4 oldColor = getOldPhotoColor(srcColor);\n  o = srcColor + (oldColor - srcColor) * oldLevel;\n  #endif\n  gl_FragColor = o;\n}"},"builtins":{"globals":{"blocks":[{"name":"CCGlobal","defines":[]}],"samplers":[]},"locals":{"blocks":[{"name":"CCLocal","defines":[]}],"samplers":[]}},"defines":[{"name":"USE_TEXTURE","type":"boolean","defines":[]},{"name":"CC_USE_MODEL","type":"boolean","defines":[]},{"name":"USE_ALPHA_TEST","type":"boolean","defines":[]},{"name":"USE_OLD_PHOTO","type":"boolean","defines":[]},{"name":"CC_USE_ALPHA_ATLAS_texture","type":"boolean","defines":["USE_TEXTURE"]},{"name":"INPUT_IS_GAMMA","type":"boolean","defines":["USE_TEXTURE"]}],"blocks":[{"name":"ALPHA_TEST","binding":0,"members":[{"name":"alphaThreshold","type":13,"count":1}],"defines":["USE_ALPHA_TEST"]},{"name":"OldPhoto","binding":1,"members":[{"name":"oldLevel","type":13,"count":1}],"defines":["USE_OLD_PHOTO"]}],"samplers":[{"name":"texture","type":29,"count":1,"binding":30,"defines":["USE_TEXTURE"]}]}],[{"passes":[{"program":"old_photo|vs|fs","blendState":{"targets":[{"blend":true}]},"rasterizerState":{"cullMode":0},"properties":{"texture":{"value":"white","type":29},"alphaThreshold":{"type":13,"value":[0.5]},"oldLevel":{"type":13,"value":[1],"inspector":{"tooltip":"程度","range":[0,1]}}}}]}]]],0,0,[],[],[]],[[{"name":"default_toggle_checkmark","rect":[4,5,20,18],"offset":[0,0],"originalSize":[28,28],"capInsets":[0,0,0,0]}],[1],0,[0],[11],[48]],[["0,9729,9729,33071,33071,0,0,0",-1],[0],0,[],[],[]],[[[17,"wave_mask"],[20,"wave_mask",[-9,-10],[[16,0,45,200,150,-2],[67,-8,-7,-6,-5,-4,-3]],[0,"ebQrhbnqhODaA0TvDfqIf5",-1],[4,4286218881],[5,720,1280],[360,640,0,0,0,0,1,1,1,1]],[15,"sliders",[-13,-14,-15,-16],[[32,1,2,-11,[5,720,200]],[24,41,-75,300,-12]],[0,"31tV8AQ1BB96WHxS1Pyu2q",1],[5,720,200],[0,295,0,0,0,0,1,1,1,1]],[14,"amplitude",2,[-19,-20,-21],[[-17,[4,1,1,20,-18,[5,522.42,50]]],1,4],[0,"daee7ZQS9GV4L/nCkd6kTk",1],[5,522.42,50],[0,75,0,0,0,0,1,1,1,1]],[14,"angularVelocity",2,[-24,-25,-26],[[-22,[4,1,1,20,-23,[5,522.42,50]]],1,4],[0,"e3t6ocbQ1Hk5YkptFkMEBN",1],[5,522.42,50],[0,25,0,0,0,0,1,1,1,1]],[14,"frequency",2,[-29,-30,-31],[[-27,[4,1,1,20,-28,[5,522.42,50]]],1,4],[0,"56IEhrl09F9ZENflzUpHDN",1],[5,522.42,50],[0,-25,0,0,0,0,1,1,1,1]],[14,"offset",2,[-34,-35,-36],[[-32,[4,1,1,20,-33,[5,522.42,50]]],1,4],[0,"8bwPMKFrpPC6gfRUIfljTX",1],[5,522.42,50],[0,-75,0,0,0,0,1,1,1,1]],[3,"slider",3,[-38,-39],[-37],[0,"5clF3XbtpJLaGof5ZqTnhE",1],[5,297.87,20],[14.425000000000011,0,0,0,0,0,1,1,1,1]],[7,"Handle",512,7,[[[2,1,2,-40,[4],5],-41],4,1],[0,"df+G2iAJBBPb7Sr+UA63lm",1],[5,32,32],[148.935,0,0,0,0,0,1,1,1,0]],[3,"slider",4,[-43,-44],[-42],[0,"75kyVk5q1Dh40wPsUNwJtn",1],[5,297.87,20],[14.425000000000011,0,0,0,0,0,1,1,1,1]],[7,"Handle",512,9,[[[2,1,2,-45,[10],11],-46],4,1],[0,"558AY6t6JDBrsOm4XLwP2z",1],[5,32,32],[148.935,0,0,0,0,0,1,1,1,0]],[3,"slider",5,[-48,-49],[-47],[0,"1avA5FGp1CzIpYqTcbOSq4",1],[5,297.87,20],[14.425000000000011,0,0,0,0,0,1,1,1,1]],[7,"Handle",512,11,[[[2,1,2,-50,[16],17],-51],4,1],[0,"bbj3MawLhGQrbHaJ9I2MmV",1],[5,32,32],[148.935,0,0,0,0,0,1,1,1,0]],[3,"slider",6,[-53,-54],[-52],[0,"f3Ylg5rblJRpRM3KCdrWcK",1],[5,297.87,20],[14.425000000000011,0,0,0,0,0,1,1,1,1]],[7,"Handle",512,13,[[[2,1,2,-55,[22],23],-56],4,1],[0,"e8u+Kb8uJGtq5oTX/XDPmI",1],[5,32,32],[148.935,0,0,0,0,0,1,1,1,0]],[13,"topView",1,[-58],[[21,45,0.5,false,-57]],[0,"bdFX8j0cZKOoWuxz22Pcvu",1],[5,720,640],[0,320,0,0,0,0,1,1,1,1]],[25,"image",15,[[-59,[19,18,-60]],1,4],[0,"b77LrM3VxNrZYU9stsHbEE",1],[5,195,270]],[13,"bottomView",1,[2],[[22,45,0.5,false,-61]],[0,"79u5wAkqpHap95nZwuB7aW",1],[5,720,640],[0,-320,0,0,0,0,1,1,1,1]],[6,"Background",512,7,[[2,1,0,-62,[2],3],[5,40,300,-63]],[0,"6eWFT1+EVJHJE9hDGHcryW",1],[5,297.87,20]],[6,"Background",512,9,[[2,1,0,-64,[8],9],[5,40,300,-65]],[0,"68ExkXQ+JLrZOdc/OShWB7",1],[5,297.87,20]],[6,"Background",512,11,[[2,1,0,-66,[14],15],[5,40,300,-67]],[0,"3bkC5FeUlK67yo/wzbjtDT",1],[5,297.87,20]],[6,"Background",512,13,[[2,1,0,-68,[20],21],[5,40,300,-69]],[0,"24eW+j1FxG+ot6Uk1WCyVW",1],[5,297.87,20]],[33,16,[0]],[1,"name",3,[-70],[0,"8aoPHnRzxMVJmkOADgxqm0",1],[5,106.7,50.4],[-207.85999999999999,0,0,0,0,0,1,1,1,1]],[11,"Amplitude",false,1,2,23,[1]],[9,1.1,true,3,8,[4,4294967295],[4,4294967295],8],[18,1,7,25],[1,"value",3,[-71],[0,"67YF171gBDAqSctuTMXggg",1],[5,77.85,50.4],[222.28500000000003,0,0,0,0,0,1,1,1,1]],[8,"1.00",1,1,27,[6]],[10,3,24,26,28],[1,"name",4,[-72],[0,"f49KyMYMZFYat8gC8bEcxV",1],[5,106.7,50.4],[-207.85999999999999,0,0,0,0,0,1,1,1,1]],[11,"AngularVelocity",false,1,2,30,[7]],[9,1.1,true,3,10,[4,4294967295],[4,4294967295],10],[18,1,9,32],[1,"value",4,[-73],[0,"e4+SZcIx5I5KrHtAhWdlr1",1],[5,77.85,50.4],[222.28500000000003,0,0,0,0,0,1,1,1,1]],[8,"1.00",1,1,34,[12]],[10,4,31,33,35],[1,"name",5,[-74],[0,"b4xU5MBmpOCZpzSCrZSgvW",1],[5,106.7,50.4],[-207.85999999999999,0,0,0,0,0,1,1,1,1]],[11,"Frequency",false,1,2,37,[13]],[9,1.1,true,3,12,[4,4294967295],[4,4294967295],12],[18,1,11,39],[1,"value",5,[-75],[0,"6682uk/FVKo5xIOjsSEXZo",1],[5,77.85,50.4],[222.28500000000003,0,0,0,0,0,1,1,1,1]],[8,"1.00",1,1,41,[18]],[10,5,38,40,42],[1,"name",6,[-76],[0,"50I0GIutFDUJy1cw0HklDk",1],[5,106.7,50.4],[-207.85999999999999,0,0,0,0,0,1,1,1,1]],[11,"Offset",false,1,2,44,[19]],[9,1.1,true,3,14,[4,4294967295],[4,4294967295],14],[18,1,13,46],[1,"value",6,[-77],[0,"01toxsnmlDHKOrEmSazOJ5",1],[5,77.85,50.4],[222.28500000000003,0,0,0,0,0,1,1,1,1]],[8,"1.00",1,1,48,[24]],[10,6,45,47,49]],0,[0,8,1,0,0,1,0,22,50,0,28,43,0,37,36,0,38,29,0,12,22,0,0,1,0,-1,15,0,-2,17,0,0,2,0,0,2,0,-1,3,0,-2,4,0,-3,5,0,-4,6,0,-1,29,0,0,3,0,-1,23,0,-2,7,0,-3,27,0,-1,36,0,0,4,0,-1,30,0,-2,9,0,-3,34,0,-1,43,0,0,5,0,-1,37,0,-2,11,0,-3,41,0,-1,50,0,0,6,0,-1,44,0,-2,13,0,-3,48,0,-1,26,0,-1,18,0,-2,8,0,0,8,0,-2,25,0,-1,33,0,-1,19,0,-2,10,0,0,10,0,-2,32,0,-1,40,0,-1,20,0,-2,12,0,0,12,0,-2,39,0,-1,47,0,-1,21,0,-2,14,0,0,14,0,-2,46,0,0,15,0,-1,16,0,-1,22,0,0,16,0,0,17,0,0,18,0,0,18,0,0,19,0,0,19,0,0,20,0,0,20,0,0,21,0,0,21,0,-1,24,0,-1,28,0,-1,31,0,-1,35,0,-1,38,0,-1,42,0,-1,45,0,-1,49,0,9,1,2,7,17,77],[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,22,25,25,25,25,25,32,32,32,32,32,39,39,39,39,39,46,46,46,46,46],[-1,-1,-1,1,-1,1,-1,-1,-1,1,-1,1,-1,-1,-1,1,-1,1,-1,-1,-1,1,-1,1,-1,1,2,3,4,5,6,2,3,4,5,6,2,3,4,5,6,2,3,4,5,6],[49,0,0,3,0,1,0,0,0,3,0,1,0,0,0,3,0,1,0,0,0,3,0,1,0,5,0,1,1,1,2,0,1,1,1,2,0,1,1,1,2,0,1,1,1,2]],[[[37,"point_light",[{},"0",11,[{"defines":{"USE_TEXTURE":true,"USE_POINT_LIGHT":true}},"props",11,[{"radius":0.5,"cropAlpha":true,"enableFog":true},"centerColor",8,[4,4294967295],"centerPoint",8,[0,0.2,0.2]]]]]],0,0,[0],[10],[50]],[[[23,"wave_mask",[{"hash":3544024895,"record":null,"name":"wave_mask|vs|fs","glsl3":{"vert":"\nprecision highp float;\nuniform CCGlobal {\n  mat4 cc_matView;\n  mat4 cc_matViewInv;\n  mat4 cc_matProj;\n  mat4 cc_matProjInv;\n  mat4 cc_matViewProj;\n  mat4 cc_matViewProjInv;\n  vec4 cc_cameraPos;\n  vec4 cc_time;\n  mediump vec4 cc_screenSize;\n  mediump vec4 cc_screenScale;\n};\nuniform CCLocal {\n  mat4 cc_matWorld;\n  mat4 cc_matWorldIT;\n};\nin vec3 a_position;\nin vec4 a_color;\nout vec4 v_color;\n#if USE_TEXTURE\nin vec2 a_uv0;\nout vec2 v_uv0;\n#endif\nvoid main () {\n  vec4 pos = vec4(a_position, 1);\n  #if CC_USE_MODEL\n  pos = cc_matViewProj * cc_matWorld * pos;\n  #else\n  pos = cc_matViewProj * pos;\n  #endif\n  #if USE_TEXTURE\n  v_uv0 = a_uv0;\n  #endif\n  v_color = a_color;\n  gl_Position = pos;\n}","frag":"\nprecision highp float;\n#if USE_ALPHA_TEST\n  uniform ALPHA_TEST {\n    float alphaThreshold;\n  };\n#endif\nvoid ALPHA_TEST (in vec4 color) {\n  #if USE_ALPHA_TEST\n      if (color.a < alphaThreshold) discard;\n  #endif\n}\nvoid ALPHA_TEST (in float alpha) {\n  #if USE_ALPHA_TEST\n      if (alpha < alphaThreshold) discard;\n  #endif\n}\nuniform CCGlobal {\n  mat4 cc_matView;\n  mat4 cc_matViewInv;\n  mat4 cc_matProj;\n  mat4 cc_matProjInv;\n  mat4 cc_matViewProj;\n  mat4 cc_matViewProjInv;\n  vec4 cc_cameraPos;\n  vec4 cc_time;\n  mediump vec4 cc_screenSize;\n  mediump vec4 cc_screenScale;\n};\nuniform CCLocal {\n  mat4 cc_matWorld;\n  mat4 cc_matWorldIT;\n};\nin vec4 v_color;\n#if USE_TEXTURE\nin vec2 v_uv0;\nuniform sampler2D texture;\n#endif\n#if USE_WAVE_MASK\nuniform WaveMask{\n  float amplitude;\n  float angularVelocity;\n  float frequency;\n  float offset;\n};\nvec4 getWaveMaskColor(vec4 color){\n  if(color.a == 0.0){\n    discard;\n  }\n  float initiaPhase = frequency * cc_time.x;\n  float y = amplitude * sin(angularVelocity * v_uv0.x + initiaPhase) + offset;\n  if(v_uv0.y < y) {\n    discard;\n  }\n  return color;\n}\n#endif\nvoid main () {\n  vec4 o = vec4(1, 1, 1, 1);\n  #if USE_TEXTURE\n  vec4 texture_tmp = texture(texture, v_uv0);\n  #if CC_USE_ALPHA_ATLAS_texture\n      texture_tmp.a *= texture(texture, v_uv0 + vec2(0, 0.5)).r;\n  #endif\n  #if INPUT_IS_GAMMA\n    o.rgb *= (texture_tmp.rgb * texture_tmp.rgb);\n    o.a *= texture_tmp.a;\n  #else\n    o *= texture_tmp;\n  #endif\n  #endif\n  o *= v_color;\n  ALPHA_TEST(o);\n  #if USE_WAVE_MASK\n    o = getWaveMaskColor(o);\n  #endif\n  gl_FragColor = o;\n}"},"glsl1":{"vert":"\nprecision highp float;\nuniform mat4 cc_matViewProj;\nuniform mat4 cc_matWorld;\nattribute vec3 a_position;\nattribute vec4 a_color;\nvarying vec4 v_color;\n#if USE_TEXTURE\nattribute vec2 a_uv0;\nvarying vec2 v_uv0;\n#endif\nvoid main () {\n  vec4 pos = vec4(a_position, 1);\n  #if CC_USE_MODEL\n  pos = cc_matViewProj * cc_matWorld * pos;\n  #else\n  pos = cc_matViewProj * pos;\n  #endif\n  #if USE_TEXTURE\n  v_uv0 = a_uv0;\n  #endif\n  v_color = a_color;\n  gl_Position = pos;\n}","frag":"\nprecision highp float;\n#if USE_ALPHA_TEST\n  uniform float alphaThreshold;\n#endif\nvoid ALPHA_TEST (in vec4 color) {\n  #if USE_ALPHA_TEST\n      if (color.a < alphaThreshold) discard;\n  #endif\n}\nvoid ALPHA_TEST (in float alpha) {\n  #if USE_ALPHA_TEST\n      if (alpha < alphaThreshold) discard;\n  #endif\n}\nuniform vec4 cc_time;\nvarying vec4 v_color;\n#if USE_TEXTURE\nvarying vec2 v_uv0;\nuniform sampler2D texture;\n#endif\n#if USE_WAVE_MASK\nuniform float amplitude;\nuniform float angularVelocity;\nuniform float frequency;\nuniform float offset;\nvec4 getWaveMaskColor(vec4 color){\n  if(color.a == 0.0){\n    discard;\n  }\n  float initiaPhase = frequency * cc_time.x;\n  float y = amplitude * sin(angularVelocity * v_uv0.x + initiaPhase) + offset;\n  if(v_uv0.y < y) {\n    discard;\n  }\n  return color;\n}\n#endif\nvoid main () {\n  vec4 o = vec4(1, 1, 1, 1);\n  #if USE_TEXTURE\n  vec4 texture_tmp = texture2D(texture, v_uv0);\n  #if CC_USE_ALPHA_ATLAS_texture\n      texture_tmp.a *= texture2D(texture, v_uv0 + vec2(0, 0.5)).r;\n  #endif\n  #if INPUT_IS_GAMMA\n    o.rgb *= (texture_tmp.rgb * texture_tmp.rgb);\n    o.a *= texture_tmp.a;\n  #else\n    o *= texture_tmp;\n  #endif\n  #endif\n  o *= v_color;\n  ALPHA_TEST(o);\n  #if USE_WAVE_MASK\n    o = getWaveMaskColor(o);\n  #endif\n  gl_FragColor = o;\n}"},"builtins":{"globals":{"blocks":[{"name":"CCGlobal","defines":[]}],"samplers":[]},"locals":{"blocks":[{"name":"CCLocal","defines":[]}],"samplers":[]}},"defines":[{"name":"USE_TEXTURE","type":"boolean","defines":[]},{"name":"CC_USE_MODEL","type":"boolean","defines":[]},{"name":"USE_ALPHA_TEST","type":"boolean","defines":[]},{"name":"USE_WAVE_MASK","type":"boolean","defines":[]},{"name":"CC_USE_ALPHA_ATLAS_texture","type":"boolean","defines":["USE_TEXTURE"]},{"name":"INPUT_IS_GAMMA","type":"boolean","defines":["USE_TEXTURE"]}],"blocks":[{"name":"ALPHA_TEST","binding":0,"members":[{"name":"alphaThreshold","type":13,"count":1}],"defines":["USE_ALPHA_TEST"]},{"name":"WaveMask","binding":1,"members":[{"name":"amplitude","type":13,"count":1},{"name":"angularVelocity","type":13,"count":1},{"name":"frequency","type":13,"count":1},{"name":"offset","type":13,"count":1}],"defines":["USE_WAVE_MASK"]}],"samplers":[{"name":"texture","type":29,"count":1,"binding":30,"defines":["USE_TEXTURE"]}]}],[{"passes":[{"program":"wave_mask|vs|fs","blendState":{"targets":[{"blend":true}]},"rasterizerState":{"cullMode":0},"properties":{"texture":{"value":"white","type":29},"alphaThreshold":{"type":13,"value":[0.5]},"amplitude":{"type":13,"value":[0.05],"inspector":{"tooltip":"振幅"}},"angularVelocity":{"type":13,"value":[10],"inspector":{"tooltip":"角速度"}},"frequency":{"type":13,"value":[10],"inspector":{"tooltip":"角速度"}},"offset":{"type":13,"value":[0.5],"inspector":{"tooltip":"偏距"}}}}]}]]],0,0,[],[],[]],[[[23,"lighting",[{"hash":3614145420,"record":null,"name":"lighting|vs|fs","glsl3":{"vert":"\nprecision highp float;\nuniform CCGlobal {\n  mat4 cc_matView;\n  mat4 cc_matViewInv;\n  mat4 cc_matProj;\n  mat4 cc_matProjInv;\n  mat4 cc_matViewProj;\n  mat4 cc_matViewProjInv;\n  vec4 cc_cameraPos;\n  vec4 cc_time;\n  mediump vec4 cc_screenSize;\n  mediump vec4 cc_screenScale;\n};\nuniform CCLocal {\n  mat4 cc_matWorld;\n  mat4 cc_matWorldIT;\n};\nin vec3 a_position;\nin vec4 a_color;\nout vec4 v_color;\n#if USE_TEXTURE\nin vec2 a_uv0;\nout vec2 v_uv0;\n#endif\nvoid main () {\n  vec4 pos = vec4(a_position, 1);\n  #if CC_USE_MODEL\n  pos = cc_matViewProj * cc_matWorld * pos;\n  #else\n  pos = cc_matViewProj * pos;\n  #endif\n  #if USE_TEXTURE\n  v_uv0 = a_uv0;\n  #endif\n  v_color = a_color;\n  gl_Position = pos;\n}","frag":"\nprecision highp float;\n#if USE_ALPHA_TEST\n  uniform ALPHA_TEST {\n    float alphaThreshold;\n  };\n#endif\nvoid ALPHA_TEST (in vec4 color) {\n  #if USE_ALPHA_TEST\n      if (color.a < alphaThreshold) discard;\n  #endif\n}\nvoid ALPHA_TEST (in float alpha) {\n  #if USE_ALPHA_TEST\n      if (alpha < alphaThreshold) discard;\n  #endif\n}\nin vec4 v_color;\n#if USE_TEXTURE\nin vec2 v_uv0;\nuniform sampler2D texture;\n#endif\n#if USE_BLEND\nuniform Blend{\n  vec4 blendColor;\n  float blendThreshold;\n};\nvec4 getTextureColor(sampler2D texture, vec2 v_uv0) {\n  if (v_uv0.x > 1.0 || v_uv0.x < 0.0 || v_uv0.y > 1.0 || v_uv0.y < 0.0) {\n    return vec4(0.0, 0.0, 0.0, 0.0);\n  }\n  return texture(texture, v_uv0);\n}\n#endif\nvoid main () {\n  vec4 o = vec4(1, 1, 1, 1);\n  #if USE_TEXTURE\n  vec4 texture_tmp = texture(texture, v_uv0);\n  #if CC_USE_ALPHA_ATLAS_texture\n      texture_tmp.a *= texture(texture, v_uv0 + vec2(0, 0.5)).r;\n  #endif\n  #if INPUT_IS_GAMMA\n    o.rgb *= (texture_tmp.rgb * texture_tmp.rgb);\n    o.a *= texture_tmp.a;\n  #else\n    o *= texture_tmp;\n  #endif\n  #endif\n  o *= v_color;\n  ALPHA_TEST(o);\n  #if USE_BLEND\n  vec4 srcColor = getTextureColor(texture, v_uv0);\n  if (srcColor.a >= blendThreshold) {\n    vec4 color_dest = o;\n    vec4 color_src = vec4(blendColor.r * blendColor.a, blendColor.g * blendColor.a, blendColor.b * blendColor.a, blendColor.a);\n    o = color_src + color_dest;\n  }\n  #endif\n  gl_FragColor = o;\n}"},"glsl1":{"vert":"\nprecision highp float;\nuniform mat4 cc_matViewProj;\nuniform mat4 cc_matWorld;\nattribute vec3 a_position;\nattribute vec4 a_color;\nvarying vec4 v_color;\n#if USE_TEXTURE\nattribute vec2 a_uv0;\nvarying vec2 v_uv0;\n#endif\nvoid main () {\n  vec4 pos = vec4(a_position, 1);\n  #if CC_USE_MODEL\n  pos = cc_matViewProj * cc_matWorld * pos;\n  #else\n  pos = cc_matViewProj * pos;\n  #endif\n  #if USE_TEXTURE\n  v_uv0 = a_uv0;\n  #endif\n  v_color = a_color;\n  gl_Position = pos;\n}","frag":"\nprecision highp float;\n#if USE_ALPHA_TEST\n  uniform float alphaThreshold;\n#endif\nvoid ALPHA_TEST (in vec4 color) {\n  #if USE_ALPHA_TEST\n      if (color.a < alphaThreshold) discard;\n  #endif\n}\nvoid ALPHA_TEST (in float alpha) {\n  #if USE_ALPHA_TEST\n      if (alpha < alphaThreshold) discard;\n  #endif\n}\nvarying vec4 v_color;\n#if USE_TEXTURE\nvarying vec2 v_uv0;\nuniform sampler2D texture;\n#endif\n#if USE_BLEND\nuniform vec4 blendColor;\nuniform float blendThreshold;\nvec4 getTextureColor(sampler2D texture, vec2 v_uv0) {\n  if (v_uv0.x > 1.0 || v_uv0.x < 0.0 || v_uv0.y > 1.0 || v_uv0.y < 0.0) {\n    return vec4(0.0, 0.0, 0.0, 0.0);\n  }\n  return texture2D(texture, v_uv0);\n}\n#endif\nvoid main () {\n  vec4 o = vec4(1, 1, 1, 1);\n  #if USE_TEXTURE\n  vec4 texture_tmp = texture2D(texture, v_uv0);\n  #if CC_USE_ALPHA_ATLAS_texture\n      texture_tmp.a *= texture2D(texture, v_uv0 + vec2(0, 0.5)).r;\n  #endif\n  #if INPUT_IS_GAMMA\n    o.rgb *= (texture_tmp.rgb * texture_tmp.rgb);\n    o.a *= texture_tmp.a;\n  #else\n    o *= texture_tmp;\n  #endif\n  #endif\n  o *= v_color;\n  ALPHA_TEST(o);\n  #if USE_BLEND\n  vec4 srcColor = getTextureColor(texture, v_uv0);\n  if (srcColor.a >= blendThreshold) {\n    vec4 color_dest = o;\n    vec4 color_src = vec4(blendColor.r * blendColor.a, blendColor.g * blendColor.a, blendColor.b * blendColor.a, blendColor.a);\n    o = color_src + color_dest;\n  }\n  #endif\n  gl_FragColor = o;\n}"},"builtins":{"globals":{"blocks":[{"name":"CCGlobal","defines":[]}],"samplers":[]},"locals":{"blocks":[{"name":"CCLocal","defines":[]}],"samplers":[]}},"defines":[{"name":"USE_TEXTURE","type":"boolean","defines":[]},{"name":"CC_USE_MODEL","type":"boolean","defines":[]},{"name":"USE_ALPHA_TEST","type":"boolean","defines":[]},{"name":"USE_BLEND","type":"boolean","defines":[]},{"name":"CC_USE_ALPHA_ATLAS_texture","type":"boolean","defines":["USE_TEXTURE"]},{"name":"INPUT_IS_GAMMA","type":"boolean","defines":["USE_TEXTURE"]}],"blocks":[{"name":"ALPHA_TEST","binding":0,"members":[{"name":"alphaThreshold","type":13,"count":1}],"defines":["USE_ALPHA_TEST"]},{"name":"Blend","binding":1,"members":[{"name":"blendColor","type":16,"count":1},{"name":"blendThreshold","type":13,"count":1}],"defines":["USE_BLEND"]}],"samplers":[{"name":"texture","type":29,"count":1,"binding":30,"defines":["USE_TEXTURE"]}]}],[{"passes":[{"program":"lighting|vs|fs","blendState":{"targets":[{"blend":true}]},"rasterizerState":{"cullMode":0},"properties":{"texture":{"value":"white","type":29},"alphaThreshold":{"type":13,"value":[0.5]},"blendColor":{"type":16,"value":[1,0,0,1],"editor":{"type":"color","tooltip":"混合颜色"}},"blendThreshold":{"type":13,"value":[0],"inspector":{"tooltip":"Threshold","range":[0,1]}}}}]}]]],0,0,[],[],[]],[[[27,"flow_light",{"0":{"defines":{"USE_TEXTURE":true,"USE_FLOW_FLIGHT":true}}}]],0,0,[0],[10],[51]],[[[27,"mosaic",{"0":{"defines":{"USE_TEXTURE":true,"USE_MOSAIC":true,"USE_ALPHA_TEST":false,"INPUT_IS_GAMMA":false},"props":{"xLevel":0.2,"yLevel":0.2}}}]],0,0,[0],[10],[52]],[["0,9729,9729,33071,33071,0,0,1",-1],[0],0,[],[],[]],[[[17,"checkBox"],[15,"checkBox",[-6,-7],[[4,1,1,20,-2,[5,154.7,50]],[36,-5,-4,-3]],[0,"18uPmTFYtB+Y6+vZ6+3020",-1],[5,154.7,50],[0,-249.876,0,0,0,0,1,1,1,1]],[3,"toggle",1,[-9,-10],[-8],[0,"5121KG61hMR4K3KaH3Qv0E",1],[5,28,28],[63.35000000000001,0,0,0,0,0,1,1,1,1]],[29,"Background",512,2,[[28,-11,[1],2]],[0,"46uiUTvoxICp3HjNPIs1vU",1],[5,28,28],[0,0,0,0,0,0,1,1,1,0]],[1,"name",1,[-12],[0,"9fo949GUxMV5Bln0AmpI1Q",1],[5,106.7,50.4],[-23.999999999999993,0,0,0,0,0,1,1,1,1]],[34,"Name",false,1,1,4,[0]],[30,"checkmark",512,2,[-13],[0,"b3/ki/khtKp7jOjNgReOhP",1],[5,28,28]],[26,2,false,6,[3]],[35,0.9,3,2,[4,4292269782],3,7]],0,[0,8,1,0,0,1,0,39,8,0,14,5,0,0,1,0,-1,4,0,-2,2,0,-1,8,0,-1,3,0,-2,6,0,0,3,0,-1,5,0,-1,7,0,9,1,13],[0,0,0,0,7,8,8],[-1,-1,1,-1,1,2,15],[0,0,6,0,7,0,8]],[[{"name":"title","rect":[3,3,435,224],"offset":[0.5,0],"originalSize":[440,230],"capInsets":[0,0,0,0]}],[1],0,[0],[11],[53]],[["0,9729,9729,33071,33071,0,0,0",-1],[0],0,[],[],[]],[[[17,"lighting"],[20,"lighting",[-10,-11],[[16,0,45,200,150,-2],[68,-9,-8,-7,-6,-5,-4,-3]],[0,"ebQrhbnqhODaA0TvDfqIf5",-1],[4,4286218881],[5,720,1280],[360,640,0,0,0,0,1,1,1,1]],[15,"sliders",[-14,-15,-16,-17,-18],[[31,1,2,20,-12,[5,720,330]],[24,41,-105,300,-13]],[0,"4bHQAPzT5Kj4+xk4tl5gv2",1],[5,720,330],[0,260,0,0,0,0,1,1,1,1]],[14,"red",2,[-21,-22,-23],[[-19,[4,1,1,20,-20,[5,522.42,50]]],1,4],[0,"320Jzbsx5MgbC/C1mgEEQ2",1],[5,522.42,50],[0,140,0,0,0,0,1,1,1,1]],[14,"green",2,[-26,-27,-28],[[-24,[4,1,1,20,-25,[5,522.42,50]]],1,4],[0,"9bA9iYYEJH3oy06sTiiXdf",1],[5,522.42,50],[0,70,0,0,0,0,1,1,1,1]],[38,"blue",2,[-31,-32,-33],[[-29,[4,1,1,20,-30,[5,522.42,50]]],1,4],[0,"4fppjuaixByaWArtx0y/X9",1],[5,522.42,50]],[14,"alpha",2,[-36,-37,-38],[[-34,[4,1,1,20,-35,[5,522.42,50]]],1,4],[0,"a3tabegYlHbp4vpENHhP8S",1],[5,522.42,50],[0,-70,0,0,0,0,1,1,1,1]],[14,"threshold",2,[-41,-42,-43],[[-39,[4,1,1,20,-40,[5,522.42,50]]],1,4],[0,"f4QLS1allAPLpkrnAU71oj",1],[5,522.42,50],[0,-140,0,0,0,0,1,1,1,1]],[3,"slider",3,[-45,-46],[-44],[0,"b5N0jEIqNGsYmMcy2LIpwy",1],[5,297.87,20],[14.425000000000011,0,0,0,0,0,1,1,1,1]],[7,"Handle",512,8,[[[2,1,2,-47,[4],5],-48],4,1],[0,"8boJaJ5ytB54ggbPoqDr3k",1],[5,32,32],[0,0,0,0,0,0,1,1,1,0]],[3,"slider",4,[-50,-51],[-49],[0,"12mNA8S69KBY/xollvqGnn",1],[5,297.87,20],[14.425000000000011,0,0,0,0,0,1,1,1,1]],[7,"Handle",512,10,[[[2,1,2,-52,[10],11],-53],4,1],[0,"b6xxtp8XlCfrSoIMH0JuOl",1],[5,32,32],[0,0,0,0,0,0,1,1,1,0]],[3,"slider",5,[-55,-56],[-54],[0,"fdoNAyPbVNA4nyRjlyiuxA",1],[5,297.87,20],[14.425000000000011,0,0,0,0,0,1,1,1,1]],[7,"Handle",512,12,[[[2,1,2,-57,[16],17],-58],4,1],[0,"94kIvP3vBCiZC0+c+cr5Q3",1],[5,32,32],[0,0,0,0,0,0,1,1,1,0]],[3,"slider",6,[-60,-61],[-59],[0,"92uktfhp1OF4Gv0XsYBCiT",1],[5,297.87,20],[14.425000000000011,0,0,0,0,0,1,1,1,1]],[7,"Handle",512,14,[[[2,1,2,-62,[22],23],-63],4,1],[0,"87mhW+u+NECrytUus4Hr3m",1],[5,32,32],[0,0,0,0,0,0,1,1,1,0]],[3,"slider",7,[-65,-66],[-64],[0,"ca7vYNSkBGrpo14rkZ1tcR",1],[5,297.87,20],[14.425000000000011,0,0,0,0,0,1,1,1,1]],[7,"Handle",512,16,[[[2,1,2,-67,[28],29],-68],4,1],[0,"5bYAJepTVPg5TvSu2MzTsp",1],[5,32,32],[0,0,0,0,0,0,1,1,1,0]],[13,"topView",1,[-70],[[21,45,0.5,false,-69]],[0,"5852LtF7FI6ppmgCt1CzX9",1],[5,720,640],[0,320,0,0,0,0,1,1,1,1]],[25,"image",18,[[-71,[19,18,-72]],1,4],[0,"efYY+lslBC65iEhrQQzR9f",1],[5,195,270]],[13,"bottomView",1,[2],[[22,45,0.5,false,-73]],[0,"340YyMkrBIRL7bkgNtEEXO",1],[5,720,640],[0,-320,0,0,0,0,1,1,1,1]],[6,"Background",512,8,[[2,1,0,-74,[2],3],[5,40,300,-75]],[0,"7aGEzCjU5Om54NziVV9TCj",1],[5,297.87,20]],[6,"Background",512,10,[[2,1,0,-76,[8],9],[5,40,300,-77]],[0,"d5W0m3LyhGIK+ckXF4dLdB",1],[5,297.87,20]],[6,"Background",512,12,[[2,1,0,-78,[14],15],[5,40,300,-79]],[0,"353TBmukpLvaK2mIoRPEhP",1],[5,297.87,20]],[6,"Background",512,14,[[2,1,0,-80,[20],21],[5,40,300,-81]],[0,"f12Lirr5xEQbzKCsXxOV7Y",1],[5,297.87,20]],[6,"Background",512,16,[[2,1,0,-82,[26],27],[5,40,300,-83]],[0,"03e/mS/GNMkKV8gdY40WwN",1],[5,297.87,20]],[26,2,false,19,[0]],[1,"name",3,[-84],[0,"60bOuWEzdDWInsYxtQDN6L",1],[5,106.7,50.4],[-207.85999999999999,0,0,0,0,0,1,1,1,1]],[11,"Red",false,1,2,27,[1]],[9,1.1,true,3,9,[4,4294967295],[4,4294967295],9],[12,8,29],[1,"value",3,[-85],[0,"92tb6DlrFECpkc6hCTtu45",1],[5,77.85,50.4],[222.28500000000003,0,0,0,0,0,1,1,1,1]],[8,"1.00",1,1,31,[6]],[10,3,28,30,32],[1,"name",4,[-86],[0,"57+lSlKThLApbC3kBqg+8V",1],[5,106.7,50.4],[-207.85999999999999,0,0,0,0,0,1,1,1,1]],[11,"Green",false,1,2,34,[7]],[9,1.1,true,3,11,[4,4294967295],[4,4294967295],11],[12,10,36],[1,"value",4,[-87],[0,"f06cVhJvlD7Ka928XYFXrp",1],[5,77.85,50.4],[222.28500000000003,0,0,0,0,0,1,1,1,1]],[8,"1.00",1,1,38,[12]],[10,4,35,37,39],[1,"name",5,[-88],[0,"9f+OYjiRBBXLvA6e++g/Nq",1],[5,106.7,50.4],[-207.85999999999999,0,0,0,0,0,1,1,1,1]],[11,"Blue",false,1,2,41,[13]],[9,1.1,true,3,13,[4,4294967295],[4,4294967295],13],[12,12,43],[1,"value",5,[-89],[0,"d6qPv0nF5MUKRdkNC1L8nb",1],[5,77.85,50.4],[222.28500000000003,0,0,0,0,0,1,1,1,1]],[8,"1.00",1,1,45,[18]],[10,5,42,44,46],[1,"name",6,[-90],[0,"29NT6tHZZD9avd622mVyxa",1],[5,106.7,50.4],[-207.85999999999999,0,0,0,0,0,1,1,1,1]],[11,"Alpha",false,1,2,48,[19]],[9,1.1,true,3,15,[4,4294967295],[4,4294967295],15],[12,14,50],[1,"value",6,[-91],[0,"1fk5k5pzNFf7tmHM+JcEwh",1],[5,77.85,50.4],[222.28500000000003,0,0,0,0,0,1,1,1,1]],[8,"1.00",1,1,52,[24]],[10,6,49,51,53],[1,"name",7,[-92],[0,"f4RLccPP9BoL6WGrB1IVur",1],[5,106.7,50.4],[-207.85999999999999,0,0,0,0,0,1,1,1,1]],[11,"Threshold",false,1,2,55,[25]],[9,1.1,true,3,17,[4,4294967295],[4,4294967295],17],[12,16,57],[1,"value",7,[-93],[0,"b3IR8yb0FB1Y8MjxyhPbLd",1],[5,77.85,50.4],[222.28500000000003,0,0,0,0,0,1,1,1,1]],[8,"1.00",1,1,59,[30]],[10,7,56,58,60]],0,[0,8,1,0,0,1,0,24,61,0,21,54,0,17,47,0,18,40,0,19,33,0,12,26,0,0,1,0,-1,18,0,-2,20,0,0,2,0,0,2,0,-1,3,0,-2,4,0,-3,5,0,-4,6,0,-5,7,0,-1,33,0,0,3,0,-1,27,0,-2,8,0,-3,31,0,-1,40,0,0,4,0,-1,34,0,-2,10,0,-3,38,0,-1,47,0,0,5,0,-1,41,0,-2,12,0,-3,45,0,-1,54,0,0,6,0,-1,48,0,-2,14,0,-3,52,0,-1,61,0,0,7,0,-1,55,0,-2,16,0,-3,59,0,-1,30,0,-1,21,0,-2,9,0,0,9,0,-2,29,0,-1,37,0,-1,22,0,-2,11,0,0,11,0,-2,36,0,-1,44,0,-1,23,0,-2,13,0,0,13,0,-2,43,0,-1,51,0,-1,24,0,-2,15,0,0,15,0,-2,50,0,-1,58,0,-1,25,0,-2,17,0,0,17,0,-2,57,0,0,18,0,-1,19,0,-1,26,0,0,19,0,0,20,0,0,21,0,0,21,0,0,22,0,0,22,0,0,23,0,0,23,0,0,24,0,0,24,0,0,25,0,0,25,0,-1,28,0,-1,32,0,-1,35,0,-1,39,0,-1,42,0,-1,46,0,-1,49,0,-1,53,0,-1,56,0,-1,60,0,9,1,2,7,20,93],[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,26,29,29,29,29,29,36,36,36,36,36,43,43,43,43,43,50,50,50,50,50,57,57,57,57,57],[-1,-1,-1,1,-1,1,-1,-1,-1,1,-1,1,-1,-1,-1,1,-1,1,-1,-1,-1,1,-1,1,-1,-1,-1,1,-1,1,-1,1,2,3,4,5,6,2,3,4,5,6,2,3,4,5,6,2,3,4,5,6,2,3,4,5,6],[54,0,0,3,0,1,0,0,0,3,0,1,0,0,0,3,0,1,0,0,0,3,0,1,0,0,0,3,0,1,0,5,0,1,1,1,2,0,1,1,1,2,0,1,1,1,2,0,1,1,1,2,0,1,1,1,2]],[[[23,"inner_glow",[{"hash":3241988571,"record":null,"name":"inner_glow|vs|fs","glsl3":{"vert":"\nprecision highp float;\nuniform CCGlobal {\n  mat4 cc_matView;\n  mat4 cc_matViewInv;\n  mat4 cc_matProj;\n  mat4 cc_matProjInv;\n  mat4 cc_matViewProj;\n  mat4 cc_matViewProjInv;\n  vec4 cc_cameraPos;\n  vec4 cc_time;\n  mediump vec4 cc_screenSize;\n  mediump vec4 cc_screenScale;\n};\nuniform CCLocal {\n  mat4 cc_matWorld;\n  mat4 cc_matWorldIT;\n};\nin vec3 a_position;\nin vec4 a_color;\nout vec4 v_color;\n#if USE_TEXTURE\nin vec2 a_uv0;\nout vec2 v_uv0;\n#endif\nvoid main () {\n  vec4 pos = vec4(a_position, 1);\n  #if CC_USE_MODEL\n  pos = cc_matViewProj * cc_matWorld * pos;\n  #else\n  pos = cc_matViewProj * pos;\n  #endif\n  #if USE_TEXTURE\n  v_uv0 = a_uv0;\n  #endif\n  v_color = a_color;\n  gl_Position = pos;\n}","frag":"\nprecision highp float;\n#if USE_ALPHA_TEST\n  uniform ALPHA_TEST {\n    float alphaThreshold;\n  };\n#endif\nvoid ALPHA_TEST (in vec4 color) {\n  #if USE_ALPHA_TEST\n      if (color.a < alphaThreshold) discard;\n  #endif\n}\nvoid ALPHA_TEST (in float alpha) {\n  #if USE_ALPHA_TEST\n      if (alpha < alphaThreshold) discard;\n  #endif\n}\nin vec4 v_color;\n#if USE_TEXTURE\nin vec2 v_uv0;\nuniform sampler2D texture;\n#endif\n#if USE_INNER_GLOW\nuniform InnerGlow{\n  vec4 glowColor;\n  float glowLevel;\n  float glowThreshold;\n};\nvec4 getTextureColor(sampler2D texture, vec2 v_uv0) {\n  if (v_uv0.x > 1.0 || v_uv0.x < 0.0 || v_uv0.y > 1.0 || v_uv0.y < 0.0) {\n    return vec4(0.0, 0.0, 0.0, 0.0);\n  }\n  return texture(texture, v_uv0);\n}\nfloat getColorAlpha(float angle, float dist){\n  float radian = radians(angle);\n  vec2 offset = vec2(dist * cos(radian), dist * sin(radian));\n  vec4 color = getTextureColor(texture, v_uv0 + offset);\n  return color.a;\n}\nfloat getAverageAlpha(float dist){\n  float totalAlpha = 0.0;\n  totalAlpha += getColorAlpha(0.0, dist);\n  totalAlpha += getColorAlpha(22.5, dist);\n  totalAlpha += getColorAlpha(45.0, dist);\n  totalAlpha += getColorAlpha(67.5, dist);\n  totalAlpha += getColorAlpha(90.0, dist);\n  totalAlpha += getColorAlpha(112.5, dist);\n  totalAlpha += getColorAlpha(135.0, dist);\n  totalAlpha += getColorAlpha(157.5, dist);\n  totalAlpha += getColorAlpha(180.0, dist);\n  totalAlpha += getColorAlpha(202.5, dist);\n  totalAlpha += getColorAlpha(225.0, dist);\n  totalAlpha += getColorAlpha(247.5, dist);\n  totalAlpha += getColorAlpha(270.0, dist);\n  totalAlpha += getColorAlpha(292.5, dist);\n  totalAlpha += getColorAlpha(315.0, dist);\n  totalAlpha += getColorAlpha(337.5, dist);\n  return totalAlpha / 16.0;\n}\nfloat getGlowAlpha(){\n  if (glowLevel == 0.0) {\n    return 1.0;\n  }\n  float totalAlpha = 0.0;\n  totalAlpha += getAverageAlpha(glowLevel* 0.1);\n  totalAlpha += getAverageAlpha(glowLevel* 0.2);\n  totalAlpha += getAverageAlpha(glowLevel* 0.3);\n  totalAlpha += getAverageAlpha(glowLevel* 0.4);\n  totalAlpha += getAverageAlpha(glowLevel* 0.5);\n  totalAlpha += getAverageAlpha(glowLevel* 0.6);\n  totalAlpha += getAverageAlpha(glowLevel* 0.7);\n  totalAlpha += getAverageAlpha(glowLevel* 0.8);\n  totalAlpha += getAverageAlpha(glowLevel* 0.9);\n  totalAlpha += getAverageAlpha(glowLevel* 1.0);\n  return totalAlpha * 0.1;\n}\n#endif\nvoid main () {\n  vec4 o = vec4(1, 1, 1, 1);\n  #if USE_TEXTURE\n  vec4 texture_tmp = texture(texture, v_uv0);\n  #if CC_USE_ALPHA_ATLAS_texture\n      texture_tmp.a *= texture(texture, v_uv0 + vec2(0, 0.5)).r;\n  #endif\n  #if INPUT_IS_GAMMA\n    o.rgb *= (texture_tmp.rgb * texture_tmp.rgb);\n    o.a *= texture_tmp.a;\n  #else\n    o *= texture_tmp;\n  #endif\n  #endif\n  o *= v_color;\n  ALPHA_TEST(o);\n  gl_FragColor = o;\n  #if USE_INNER_GLOW\n  vec4 srcColor = getTextureColor(texture, v_uv0);\n  if (srcColor.a >= glowThreshold) {\n    vec4 color_src = vec4(glowColor.r, glowColor.g, glowColor.b, 0.0);\n    vec4 color_dest = o;\n    float averageAlpha = getGlowAlpha();\n    float alpha = 1.0 - averageAlpha * averageAlpha * averageAlpha * averageAlpha;\n    gl_FragColor = color_src * alpha + color_dest;\n  }\n  #endif\n}"},"glsl1":{"vert":"\nprecision highp float;\nuniform mat4 cc_matViewProj;\nuniform mat4 cc_matWorld;\nattribute vec3 a_position;\nattribute vec4 a_color;\nvarying vec4 v_color;\n#if USE_TEXTURE\nattribute vec2 a_uv0;\nvarying vec2 v_uv0;\n#endif\nvoid main () {\n  vec4 pos = vec4(a_position, 1);\n  #if CC_USE_MODEL\n  pos = cc_matViewProj * cc_matWorld * pos;\n  #else\n  pos = cc_matViewProj * pos;\n  #endif\n  #if USE_TEXTURE\n  v_uv0 = a_uv0;\n  #endif\n  v_color = a_color;\n  gl_Position = pos;\n}","frag":"\nprecision highp float;\n#if USE_ALPHA_TEST\n  uniform float alphaThreshold;\n#endif\nvoid ALPHA_TEST (in vec4 color) {\n  #if USE_ALPHA_TEST\n      if (color.a < alphaThreshold) discard;\n  #endif\n}\nvoid ALPHA_TEST (in float alpha) {\n  #if USE_ALPHA_TEST\n      if (alpha < alphaThreshold) discard;\n  #endif\n}\nvarying vec4 v_color;\n#if USE_TEXTURE\nvarying vec2 v_uv0;\nuniform sampler2D texture;\n#endif\n#if USE_INNER_GLOW\nuniform vec4 glowColor;\nuniform float glowLevel;\nuniform float glowThreshold;\nvec4 getTextureColor(sampler2D texture, vec2 v_uv0) {\n  if (v_uv0.x > 1.0 || v_uv0.x < 0.0 || v_uv0.y > 1.0 || v_uv0.y < 0.0) {\n    return vec4(0.0, 0.0, 0.0, 0.0);\n  }\n  return texture2D(texture, v_uv0);\n}\nfloat getColorAlpha(float angle, float dist){\n  float radian = radians(angle);\n  vec2 offset = vec2(dist * cos(radian), dist * sin(radian));\n  vec4 color = getTextureColor(texture, v_uv0 + offset);\n  return color.a;\n}\nfloat getAverageAlpha(float dist){\n  float totalAlpha = 0.0;\n  totalAlpha += getColorAlpha(0.0, dist);\n  totalAlpha += getColorAlpha(22.5, dist);\n  totalAlpha += getColorAlpha(45.0, dist);\n  totalAlpha += getColorAlpha(67.5, dist);\n  totalAlpha += getColorAlpha(90.0, dist);\n  totalAlpha += getColorAlpha(112.5, dist);\n  totalAlpha += getColorAlpha(135.0, dist);\n  totalAlpha += getColorAlpha(157.5, dist);\n  totalAlpha += getColorAlpha(180.0, dist);\n  totalAlpha += getColorAlpha(202.5, dist);\n  totalAlpha += getColorAlpha(225.0, dist);\n  totalAlpha += getColorAlpha(247.5, dist);\n  totalAlpha += getColorAlpha(270.0, dist);\n  totalAlpha += getColorAlpha(292.5, dist);\n  totalAlpha += getColorAlpha(315.0, dist);\n  totalAlpha += getColorAlpha(337.5, dist);\n  return totalAlpha / 16.0;\n}\nfloat getGlowAlpha(){\n  if (glowLevel == 0.0) {\n    return 1.0;\n  }\n  float totalAlpha = 0.0;\n  totalAlpha += getAverageAlpha(glowLevel* 0.1);\n  totalAlpha += getAverageAlpha(glowLevel* 0.2);\n  totalAlpha += getAverageAlpha(glowLevel* 0.3);\n  totalAlpha += getAverageAlpha(glowLevel* 0.4);\n  totalAlpha += getAverageAlpha(glowLevel* 0.5);\n  totalAlpha += getAverageAlpha(glowLevel* 0.6);\n  totalAlpha += getAverageAlpha(glowLevel* 0.7);\n  totalAlpha += getAverageAlpha(glowLevel* 0.8);\n  totalAlpha += getAverageAlpha(glowLevel* 0.9);\n  totalAlpha += getAverageAlpha(glowLevel* 1.0);\n  return totalAlpha * 0.1;\n}\n#endif\nvoid main () {\n  vec4 o = vec4(1, 1, 1, 1);\n  #if USE_TEXTURE\n  vec4 texture_tmp = texture2D(texture, v_uv0);\n  #if CC_USE_ALPHA_ATLAS_texture\n      texture_tmp.a *= texture2D(texture, v_uv0 + vec2(0, 0.5)).r;\n  #endif\n  #if INPUT_IS_GAMMA\n    o.rgb *= (texture_tmp.rgb * texture_tmp.rgb);\n    o.a *= texture_tmp.a;\n  #else\n    o *= texture_tmp;\n  #endif\n  #endif\n  o *= v_color;\n  ALPHA_TEST(o);\n  gl_FragColor = o;\n  #if USE_INNER_GLOW\n  vec4 srcColor = getTextureColor(texture, v_uv0);\n  if (srcColor.a >= glowThreshold) {\n    vec4 color_src = vec4(glowColor.r, glowColor.g, glowColor.b, 0.0);\n    vec4 color_dest = o;\n    float averageAlpha = getGlowAlpha();\n    float alpha = 1.0 - averageAlpha * averageAlpha * averageAlpha * averageAlpha;\n    gl_FragColor = color_src * alpha + color_dest;\n  }\n  #endif\n}"},"builtins":{"globals":{"blocks":[{"name":"CCGlobal","defines":[]}],"samplers":[]},"locals":{"blocks":[{"name":"CCLocal","defines":[]}],"samplers":[]}},"defines":[{"name":"USE_TEXTURE","type":"boolean","defines":[]},{"name":"CC_USE_MODEL","type":"boolean","defines":[]},{"name":"USE_ALPHA_TEST","type":"boolean","defines":[]},{"name":"USE_INNER_GLOW","type":"boolean","defines":[]},{"name":"CC_USE_ALPHA_ATLAS_texture","type":"boolean","defines":["USE_TEXTURE"]},{"name":"INPUT_IS_GAMMA","type":"boolean","defines":["USE_TEXTURE"]}],"blocks":[{"name":"ALPHA_TEST","binding":0,"members":[{"name":"alphaThreshold","type":13,"count":1}],"defines":["USE_ALPHA_TEST"]},{"name":"InnerGlow","binding":1,"members":[{"name":"glowColor","type":16,"count":1},{"name":"glowLevel","type":13,"count":1},{"name":"glowThreshold","type":13,"count":1}],"defines":["USE_INNER_GLOW"]}],"samplers":[{"name":"texture","type":29,"count":1,"binding":30,"defines":["USE_TEXTURE"]}]}],[{"passes":[{"program":"inner_glow|vs|fs","blendState":{"targets":[{"blend":true}]},"rasterizerState":{"cullMode":0},"properties":{"texture":{"value":"white","type":29},"alphaThreshold":{"type":13,"value":[0.5]},"glowColor":{"type":16,"value":[1,0,0,1],"editor":{"type":"color","tooltip":"发光颜色"}},"glowLevel":{"type":13,"value":[0.5],"inspector":{"tooltip":"GlowLevel","range":[0,1]}},"glowThreshold":{"type":13,"value":[0],"inspector":{"tooltip":"Threshold","range":[0,1]}}}}]}]]],0,0,[],[],[]],[[[23,"flow_light",[{"hash":4225415802,"record":null,"name":"flow_light|vs|fs","glsl3":{"vert":"\nprecision highp float;\nuniform CCGlobal {\n  mat4 cc_matView;\n  mat4 cc_matViewInv;\n  mat4 cc_matProj;\n  mat4 cc_matProjInv;\n  mat4 cc_matViewProj;\n  mat4 cc_matViewProjInv;\n  vec4 cc_cameraPos;\n  vec4 cc_time;\n  mediump vec4 cc_screenSize;\n  mediump vec4 cc_screenScale;\n};\nuniform CCLocal {\n  mat4 cc_matWorld;\n  mat4 cc_matWorldIT;\n};\nin vec3 a_position;\nin vec4 a_color;\nout vec4 v_color;\n#if USE_TEXTURE\nin vec2 a_uv0;\nout vec2 v_uv0;\n#endif\nvoid main () {\n  vec4 pos = vec4(a_position, 1);\n  #if CC_USE_MODEL\n  pos = cc_matViewProj * cc_matWorld * pos;\n  #else\n  pos = cc_matViewProj * pos;\n  #endif\n  #if USE_TEXTURE\n  v_uv0 = a_uv0;\n  #endif\n  v_color = a_color;\n  gl_Position = pos;\n}","frag":"\nprecision highp float;\n#if USE_ALPHA_TEST\n  uniform ALPHA_TEST {\n    float alphaThreshold;\n  };\n#endif\nvoid ALPHA_TEST (in vec4 color) {\n  #if USE_ALPHA_TEST\n      if (color.a < alphaThreshold) discard;\n  #endif\n}\nvoid ALPHA_TEST (in float alpha) {\n  #if USE_ALPHA_TEST\n      if (alpha < alphaThreshold) discard;\n  #endif\n}\nuniform CCGlobal {\n  mat4 cc_matView;\n  mat4 cc_matViewInv;\n  mat4 cc_matProj;\n  mat4 cc_matProjInv;\n  mat4 cc_matViewProj;\n  mat4 cc_matViewProjInv;\n  vec4 cc_cameraPos;\n  vec4 cc_time;\n  mediump vec4 cc_screenSize;\n  mediump vec4 cc_screenScale;\n};\nuniform CCLocal {\n  mat4 cc_matWorld;\n  mat4 cc_matWorldIT;\n};\nin vec4 v_color;\n#if USE_TEXTURE\nin vec2 v_uv0;\nuniform sampler2D texture;\n#endif\n#if USE_FLOW_FLIGHT\nuniform FlowLight {\n  float density;\n  float frequency;\n};\nvec4 getColor(){\n  float time = cc_time.x * frequency + 0.5;\n  vec4 center = vec4(0.0,0.0,0.0,0.0);\n  vec2 UVnormalize;\n  UVnormalize.x = (v_uv0.x-center.x)/(center.z-center.x);\n  UVnormalize.y = (v_uv0.y-center.y)/(center.w-center.y);\n  vec2 uv = v_uv0.xy;\n  vec2 p = mod(uv*density, density)-250.0;\n  vec2 i = vec2(p);\n  float c = 1.0;\n  float inten = .0065;\n  for (int n = 0; n < 5; n++)\n  {\n    float t =  time * (1.0 - (3.5 / float(n+1)));\n    i = p + vec2(cos(t - i.x) + sin(t + i.y), sin(t - i.y) + cos(1.5*t + i.x));\n    c += 1.0/length(vec2(p.x / (cos(i.x+t)/inten),p.y / (cos(i.y+t)/inten)));\n  }\n  c /= float(5);\n  c = 1.17-pow(c, 1.4);\n  vec4 color = vec4(1, 1, 1, 1);\n  vec4 texture_tmp = texture(texture, v_uv0);\n  #if CC_USE_ALPHA_ATLAS_texture\n      texture_tmp.a *= texture(texture, v_uv0 + vec2(0, 0.5)).r;\n  #endif\n  #if INPUT_IS_GAMMA\n    color.rgb *= (texture_tmp.rgb * texture_tmp.rgb);\n    color.a *= texture_tmp.a;\n  #else\n    color *= texture_tmp;\n  #endif\n  vec3 lightColor = vec3(pow(abs(c), 20.0));\n  lightColor = clamp(lightColor + vec3(0.0, 0.0, .0), 0.0, color.a);\n  float alpha = c*color[3];\n  color[0] = color[0] + lightColor[0]*alpha;\n  color[1] = color[1] + lightColor[1]*alpha;\n  color[2] = color[2] + lightColor[2]*alpha;\n  return vec4(1,1,1,1) * color;\n}\n#endif\nvoid main () {\n  vec4 o = vec4(1, 1, 1, 1);\n  #if USE_TEXTURE\n  vec4 texture_tmp = texture(texture, v_uv0);\n  #if CC_USE_ALPHA_ATLAS_texture\n      texture_tmp.a *= texture(texture, v_uv0 + vec2(0, 0.5)).r;\n  #endif\n  #if INPUT_IS_GAMMA\n    o.rgb *= (texture_tmp.rgb * texture_tmp.rgb);\n    o.a *= texture_tmp.a;\n  #else\n    o *= texture_tmp;\n  #endif\n  #endif\n  #if USE_FLOW_FLIGHT\n  o = getColor();\n  #endif\n  o *= v_color;\n  ALPHA_TEST(o);\n  gl_FragColor = o;\n}"},"glsl1":{"vert":"\nprecision highp float;\nuniform mat4 cc_matViewProj;\nuniform mat4 cc_matWorld;\nattribute vec3 a_position;\nattribute vec4 a_color;\nvarying vec4 v_color;\n#if USE_TEXTURE\nattribute vec2 a_uv0;\nvarying vec2 v_uv0;\n#endif\nvoid main () {\n  vec4 pos = vec4(a_position, 1);\n  #if CC_USE_MODEL\n  pos = cc_matViewProj * cc_matWorld * pos;\n  #else\n  pos = cc_matViewProj * pos;\n  #endif\n  #if USE_TEXTURE\n  v_uv0 = a_uv0;\n  #endif\n  v_color = a_color;\n  gl_Position = pos;\n}","frag":"\nprecision highp float;\n#if USE_ALPHA_TEST\n  uniform float alphaThreshold;\n#endif\nvoid ALPHA_TEST (in vec4 color) {\n  #if USE_ALPHA_TEST\n      if (color.a < alphaThreshold) discard;\n  #endif\n}\nvoid ALPHA_TEST (in float alpha) {\n  #if USE_ALPHA_TEST\n      if (alpha < alphaThreshold) discard;\n  #endif\n}\nuniform vec4 cc_time;\nvarying vec4 v_color;\n#if USE_TEXTURE\nvarying vec2 v_uv0;\nuniform sampler2D texture;\n#endif\n#if USE_FLOW_FLIGHT\nuniform float density;\nuniform float frequency;\nvec4 getColor(){\n  float time = cc_time.x * frequency + 0.5;\n  vec4 center = vec4(0.0,0.0,0.0,0.0);\n  vec2 UVnormalize;\n  UVnormalize.x = (v_uv0.x-center.x)/(center.z-center.x);\n  UVnormalize.y = (v_uv0.y-center.y)/(center.w-center.y);\n  vec2 uv = v_uv0.xy;\n  vec2 p = mod(uv*density, density)-250.0;\n  vec2 i = vec2(p);\n  float c = 1.0;\n  float inten = .0065;\n  for (int n = 0; n < 5; n++)\n  {\n    float t =  time * (1.0 - (3.5 / float(n+1)));\n    i = p + vec2(cos(t - i.x) + sin(t + i.y), sin(t - i.y) + cos(1.5*t + i.x));\n    c += 1.0/length(vec2(p.x / (cos(i.x+t)/inten),p.y / (cos(i.y+t)/inten)));\n  }\n  c /= float(5);\n  c = 1.17-pow(c, 1.4);\n  vec4 color = vec4(1, 1, 1, 1);\n  vec4 texture_tmp = texture2D(texture, v_uv0);\n  #if CC_USE_ALPHA_ATLAS_texture\n      texture_tmp.a *= texture2D(texture, v_uv0 + vec2(0, 0.5)).r;\n  #endif\n  #if INPUT_IS_GAMMA\n    color.rgb *= (texture_tmp.rgb * texture_tmp.rgb);\n    color.a *= texture_tmp.a;\n  #else\n    color *= texture_tmp;\n  #endif\n  vec3 lightColor = vec3(pow(abs(c), 20.0));\n  lightColor = clamp(lightColor + vec3(0.0, 0.0, .0), 0.0, color.a);\n  float alpha = c*color[3];\n  color[0] = color[0] + lightColor[0]*alpha;\n  color[1] = color[1] + lightColor[1]*alpha;\n  color[2] = color[2] + lightColor[2]*alpha;\n  return vec4(1,1,1,1) * color;\n}\n#endif\nvoid main () {\n  vec4 o = vec4(1, 1, 1, 1);\n  #if USE_TEXTURE\n  vec4 texture_tmp = texture2D(texture, v_uv0);\n  #if CC_USE_ALPHA_ATLAS_texture\n      texture_tmp.a *= texture2D(texture, v_uv0 + vec2(0, 0.5)).r;\n  #endif\n  #if INPUT_IS_GAMMA\n    o.rgb *= (texture_tmp.rgb * texture_tmp.rgb);\n    o.a *= texture_tmp.a;\n  #else\n    o *= texture_tmp;\n  #endif\n  #endif\n  #if USE_FLOW_FLIGHT\n  o = getColor();\n  #endif\n  o *= v_color;\n  ALPHA_TEST(o);\n  gl_FragColor = o;\n}"},"builtins":{"globals":{"blocks":[{"name":"CCGlobal","defines":[]}],"samplers":[]},"locals":{"blocks":[{"name":"CCLocal","defines":[]}],"samplers":[]}},"defines":[{"name":"USE_TEXTURE","type":"boolean","defines":[]},{"name":"CC_USE_MODEL","type":"boolean","defines":[]},{"name":"USE_ALPHA_TEST","type":"boolean","defines":[]},{"name":"USE_FLOW_FLIGHT","type":"boolean","defines":[]},{"name":"CC_USE_ALPHA_ATLAS_texture","type":"boolean","defines":["USE_FLOW_FLIGHT"]},{"name":"INPUT_IS_GAMMA","type":"boolean","defines":["USE_FLOW_FLIGHT"]}],"blocks":[{"name":"ALPHA_TEST","binding":0,"members":[{"name":"alphaThreshold","type":13,"count":1}],"defines":["USE_ALPHA_TEST"]},{"name":"FlowLight","binding":1,"members":[{"name":"density","type":13,"count":1},{"name":"frequency","type":13,"count":1}],"defines":["USE_FLOW_FLIGHT"]}],"samplers":[{"name":"texture","type":29,"count":1,"binding":30,"defines":["USE_TEXTURE"]}]}],[{"passes":[{"program":"flow_light|vs|fs","blendState":{"targets":[{"blend":true}]},"rasterizerState":{"cullMode":0},"properties":{"texture":{"value":"white","type":29},"alphaThreshold":{"type":13,"value":[0.5]},"density":{"type":13,"value":[5.5],"inspector":{"tooltip":"密度"}},"frequency":{"type":13,"value":[0.5],"inspector":{"tooltip":"频率"}}}}]}]]],0,0,[],[],[]],[[[17,"flash_light"],[20,"flash_light",[-14,-15],[[16,0,45,200,150,-2],[69,-13,-12,-11,-10,-9,-8,-7,-6,-5,-4,-3]],[0,"ebQrhbnqhODaA0TvDfqIf5",-1],[4,4286218881],[5,720,1280],[360,640,0,0,0,0,1,1,1,1]],[15,"sliders",[-18,-19,-20,-21,-22,-23,-24,-25,-26],[[31,1,2,20,-16,[5,720,610]],[24,41,-140,300,-17]],[0,"e0c78Gq6xDs6SYnrSaMso9",1],[5,720,610],[0,155,0,0,0,0,1,1,1,1]],[14,"red",2,[-29,-30,-31],[[-27,[4,1,1,20,-28,[5,522.42,50]]],1,4],[0,"f43FQsIiJNd4SZeKJkZT3N",1],[5,522.42,50],[0,280,0,0,0,0,1,1,1,1]],[14,"green",2,[-34,-35,-36],[[-32,[4,1,1,20,-33,[5,522.42,50]]],1,4],[0,"46tk3Cp4BMYon6nh3AZx8b",1],[5,522.42,50],[0,210,0,0,0,0,1,1,1,1]],[14,"blue",2,[-39,-40,-41],[[-37,[4,1,1,20,-38,[5,522.42,50]]],1,4],[0,"d5CYHNmfNMvromhLyyJNBF",1],[5,522.42,50],[0,140,0,0,0,0,1,1,1,1]],[14,"alpha",2,[-44,-45,-46],[[-42,[4,1,1,20,-43,[5,522.42,50]]],1,4],[0,"d4hpfyr+9Jy6jmjxq/y+MM",1],[5,522.42,50],[0,70,0,0,0,0,1,1,1,1]],[38,"angle",2,[-49,-50,-51],[[-47,[4,1,1,20,-48,[5,522.42,50]]],1,4],[0,"e4JoSLAH1EaoPeunhdL8mW",1],[5,522.42,50]],[14,"width",2,[-54,-55,-56],[[-52,[4,1,1,20,-53,[5,522.42,50]]],1,4],[0,"17p6JrauVPDZIhl2VJdnY+",1],[5,522.42,50],[0,-70,0,0,0,0,1,1,1,1]],[39,"gradient",512,2,[-59,-60],[[[4,1,1,20,-57,[5,201.42,50]],-58],4,1],[0,"6evgbdgZRGpbxZ++wqeKEc",1],[5,201.42,50],[0,-140,0,0,0,0,1,1,1,1]],[39,"cropAlpha",512,2,[-63,-64],[[[4,1,1,20,-61,[5,248.12,50]],-62],4,1],[0,"beN0ECiwVNCYtA7h5JIYRK",1],[5,248.12,50],[0,-210,0,0,0,0,1,1,1,1]],[39,"enbleFrog",512,2,[-67,-68],[[[4,1,1,20,-65,[5,265.90999999999997,50]],-66],4,1],[0,"c0XQF+Yw9HSrqWr/k+UWFe",1],[5,265.90999999999997,50],[0,-280,0,0,0,0,1,1,1,1]],[3,"slider",3,[-70,-71],[-69],[0,"38irvdNEFIM6q5cLz97i/S",1],[5,297.87,20],[14.425000000000011,0,0,0,0,0,1,1,1,1]],[7,"Handle",512,12,[[[2,1,2,-72,[4],5],-73],4,1],[0,"67sMqObq5E2KA20e0oR1Od",1],[5,32,32],[0,0,0,0,0,0,1,1,1,0]],[3,"slider",4,[-75,-76],[-74],[0,"576dMB8PNGtIXLnYwR4vky",1],[5,297.87,20],[14.425000000000011,0,0,0,0,0,1,1,1,1]],[7,"Handle",512,14,[[[2,1,2,-77,[10],11],-78],4,1],[0,"9elfW30g1Li4aSqQXHytUU",1],[5,32,32],[0,0,0,0,0,0,1,1,1,0]],[3,"slider",5,[-80,-81],[-79],[0,"6eFRp4qzxHa5aBkyo4B6O8",1],[5,297.87,20],[14.425000000000011,0,0,0,0,0,1,1,1,1]],[7,"Handle",512,16,[[[2,1,2,-82,[16],17],-83],4,1],[0,"bdScKAS45L94VoFIRWCPl1",1],[5,32,32],[0,0,0,0,0,0,1,1,1,0]],[3,"slider",6,[-85,-86],[-84],[0,"c9U/9hX0BEmomdLMJVX5/l",1],[5,297.87,20],[14.425000000000011,0,0,0,0,0,1,1,1,1]],[7,"Handle",512,18,[[[2,1,2,-87,[22],23],-88],4,1],[0,"42I+iHV7VNnYf5BxGBPknI",1],[5,32,32],[0,0,0,0,0,0,1,1,1,0]],[3,"slider",7,[-90,-91],[-89],[0,"a6CSoaWkNLCb3Kx6xcLox+",1],[5,297.87,20],[14.425000000000011,0,0,0,0,0,1,1,1,1]],[7,"Handle",512,20,[[[2,1,2,-92,[28],29],-93],4,1],[0,"90iUWLQPZEhq50RMT3huiR",1],[5,32,32],[0,0,0,0,0,0,1,1,1,0]],[3,"slider",8,[-95,-96],[-94],[0,"faC7meTWlLsbSSvYwtFTR9",1],[5,297.87,20],[14.425000000000011,0,0,0,0,0,1,1,1,1]],[7,"Handle",512,22,[[[2,1,2,-97,[34],35],-98],4,1],[0,"8fq6vS3HZPOLtkXcnnYuSH",1],[5,32,32],[0,0,0,0,0,0,1,1,1,0]],[3,"toggle",9,[-100,-101],[-99],[0,"53MRvJFlNAHLDfDs/v+UoC",1],[5,28,28],[86.71,0,0,0,0,0,1,1,1,1]],[3,"toggle",10,[-103,-104],[-102],[0,"bfvBiZAJNEBbsNfbsMK2xr",1],[5,28,28],[110.06,0,0,0,0,0,1,1,1,1]],[3,"toggle",11,[-106,-107],[-105],[0,"5efqzFngNMvadGcDIChH41",1],[5,28,28],[118.95500000000001,0,0,0,0,0,1,1,1,1]],[13,"topView",1,[-109],[[21,45,0.5,false,-108]],[0,"bdFX8j0cZKOoWuxz22Pcvu",1],[5,720,640],[0,320,0,0,0,0,1,1,1,1]],[25,"image",27,[[-110,[19,18,-111]],1,4],[0,"b77LrM3VxNrZYU9stsHbEE",1],[5,195,270]],[13,"bottomView",1,[2],[[22,45,0.5,false,-112]],[0,"79u5wAkqpHap95nZwuB7aW",1],[5,720,640],[0,-320,0,0,0,0,1,1,1,1]],[6,"Background",512,12,[[2,1,0,-113,[2],3],[5,40,300,-114]],[0,"40lhFcsuBF2457lg1bbx4P",1],[5,297.87,20]],[6,"Background",512,14,[[2,1,0,-115,[8],9],[5,40,300,-116]],[0,"95jaB/AbBPD7RC9eRSO1/a",1],[5,297.87,20]],[6,"Background",512,16,[[2,1,0,-117,[14],15],[5,40,300,-118]],[0,"6braKqw35FUrDCFf4IbzMF",1],[5,297.87,20]],[6,"Background",512,18,[[2,1,0,-119,[20],21],[5,40,300,-120]],[0,"2eN4QqoSVDfpqz7aw+3fle",1],[5,297.87,20]],[6,"Background",512,20,[[2,1,0,-121,[26],27],[5,40,300,-122]],[0,"25kWMDsQ9BcIKvhHQdbrXC",1],[5,297.87,20]],[6,"Background",512,22,[[2,1,0,-123,[32],33],[5,40,300,-124]],[0,"d9YOIXe4hP1KwzDaSPpr/P",1],[5,297.87,20]],[29,"Background",512,24,[[28,-125,[38],39]],[0,"56pZastMFNMqw/OrbjwU5s",1],[5,28,28],[0,0,0,0,0,0,1,1,1,0]],[29,"Background",512,25,[[28,-126,[42],43]],[0,"6aUbBHCoNDXbIxZNzPUGg7",1],[5,28,28],[0,0,0,0,0,0,1,1,1,0]],[29,"Background",512,26,[[28,-127,[46],47]],[0,"443u01iepPL6xb/iQJInjA",1],[5,28,28],[0,0,0,0,0,0,1,1,1,0]],[33,28,[0]],[1,"name",3,[-128],[0,"e3f0t4pGBNbo2ip5snAhp9",1],[5,106.7,50.4],[-207.85999999999999,0,0,0,0,0,1,1,1,1]],[11,"Red",false,1,2,40,[1]],[9,1.1,true,3,13,[4,4294967295],[4,4294967295],13],[12,12,42],[1,"value",3,[-129],[0,"0dsY1x/aNK4p1G62Pdfe4c",1],[5,77.85,50.4],[222.28500000000003,0,0,0,0,0,1,1,1,1]],[8,"1.00",1,1,44,[6]],[10,3,41,43,45],[1,"name",4,[-130],[0,"a4YbXSE3pMqrlQh3DJWS0L",1],[5,106.7,50.4],[-207.85999999999999,0,0,0,0,0,1,1,1,1]],[11,"Green",false,1,2,47,[7]],[9,1.1,true,3,15,[4,4294967295],[4,4294967295],15],[12,14,49],[1,"value",4,[-131],[0,"8631XI4O1F14jqiyTq7TX7",1],[5,77.85,50.4],[222.28500000000003,0,0,0,0,0,1,1,1,1]],[8,"1.00",1,1,51,[12]],[10,4,48,50,52],[1,"name",5,[-132],[0,"d6cnrkexhJNLJfyK+k7jFn",1],[5,106.7,50.4],[-207.85999999999999,0,0,0,0,0,1,1,1,1]],[11,"Blue",false,1,2,54,[13]],[9,1.1,true,3,17,[4,4294967295],[4,4294967295],17],[12,16,56],[1,"value",5,[-133],[0,"c5C48RPn5FVKglHq2n8I6f",1],[5,77.85,50.4],[222.28500000000003,0,0,0,0,0,1,1,1,1]],[8,"1.00",1,1,58,[18]],[10,5,55,57,59],[1,"name",6,[-134],[0,"6eZSZV9W9EJLxDbgDOSP+c",1],[5,106.7,50.4],[-207.85999999999999,0,0,0,0,0,1,1,1,1]],[11,"Alpha",false,1,2,61,[19]],[9,1.1,true,3,19,[4,4294967295],[4,4294967295],19],[12,18,63],[1,"value",6,[-135],[0,"1dy80QL2NBEKygSvP7Q9xn",1],[5,77.85,50.4],[222.28500000000003,0,0,0,0,0,1,1,1,1]],[8,"1.00",1,1,65,[24]],[10,6,62,64,66],[1,"name",7,[-136],[0,"e4QE3+h1tG0bdFokZ2qc0V",1],[5,106.7,50.4],[-207.85999999999999,0,0,0,0,0,1,1,1,1]],[11,"Angle",false,1,2,68,[25]],[9,1.1,true,3,21,[4,4294967295],[4,4294967295],21],[12,20,70],[1,"value",7,[-137],[0,"3384RXRMxIq7Pzz2DUdmoY",1],[5,77.85,50.4],[222.28500000000003,0,0,0,0,0,1,1,1,1]],[8,"1.00",1,1,72,[30]],[10,7,69,71,73],[1,"name",8,[-138],[0,"acHyrJW5xBkI333IPhJk73",1],[5,106.7,50.4],[-207.85999999999999,0,0,0,0,0,1,1,1,1]],[11,"Width",false,1,2,75,[31]],[9,1.1,true,3,23,[4,4294967295],[4,4294967295],23],[12,22,77],[1,"value",8,[-139],[0,"78TtoF2qlJEp/KYmKqCBkG",1],[5,77.85,50.4],[222.28500000000003,0,0,0,0,0,1,1,1,1]],[8,"1.00",1,1,79,[36]],[10,8,76,78,80],[1,"name",9,[-140],[0,"58GHI7KiFHK6/qWGI05MK0",1],[5,153.42,50.4],[-24,0,0,0,0,0,1,1,1,1]],[34,"Gradient",false,1,1,82,[37]],[30,"checkmark",512,24,[-141],[0,"51YRpXV/lN0KoRlsSCSWA/",1],[5,28,28]],[26,2,false,84,[40]],[35,0.9,3,24,[4,4292269782],36,85],[36,9,83,86],[1,"name",10,[-142],[0,"db3UPJJ4NAd5gCQ+XRPazO",1],[5,200.12,50.4],[-24,0,0,0,0,0,1,1,1,1]],[34,"Crop Alpha",false,1,1,88,[41]],[30,"checkmark",512,25,[-143],[0,"afqj3Bz95Gx4oFOeYDUhor",1],[5,28,28]],[26,2,false,90,[44]],[35,0.9,3,25,[4,4292269782],37,91],[36,10,89,92],[1,"name",11,[-144],[0,"0fXuD1K1tI+7TxPYf6VHkP",1],[5,217.91,50.4],[-23.999999999999986,0,0,0,0,0,1,1,1,1]],[34,"Enable Frog",false,1,1,94,[45]],[30,"checkmark",512,26,[-145],[0,"8dBmXyxjBICI/+0/zDnzN8",1],[5,28,28]],[26,2,false,96,[48]],[35,0.9,3,26,[4,4292269782],38,97],[36,11,95,98]],0,[0,8,1,0,0,1,0,26,99,0,27,93,0,40,87,0,41,81,0,42,74,0,21,67,0,17,60,0,18,53,0,19,46,0,12,39,0,0,1,0,-1,27,0,-2,29,0,0,2,0,0,2,0,-1,3,0,-2,4,0,-3,5,0,-4,6,0,-5,7,0,-6,8,0,-7,9,0,-8,10,0,-9,11,0,-1,46,0,0,3,0,-1,40,0,-2,12,0,-3,44,0,-1,53,0,0,4,0,-1,47,0,-2,14,0,-3,51,0,-1,60,0,0,5,0,-1,54,0,-2,16,0,-3,58,0,-1,67,0,0,6,0,-1,61,0,-2,18,0,-3,65,0,-1,74,0,0,7,0,-1,68,0,-2,20,0,-3,72,0,-1,81,0,0,8,0,-1,75,0,-2,22,0,-3,79,0,0,9,0,-2,87,0,-1,82,0,-2,24,0,0,10,0,-2,93,0,-1,88,0,-2,25,0,0,11,0,-2,99,0,-1,94,0,-2,26,0,-1,43,0,-1,30,0,-2,13,0,0,13,0,-2,42,0,-1,50,0,-1,31,0,-2,15,0,0,15,0,-2,49,0,-1,57,0,-1,32,0,-2,17,0,0,17,0,-2,56,0,-1,64,0,-1,33,0,-2,19,0,0,19,0,-2,63,0,-1,71,0,-1,34,0,-2,21,0,0,21,0,-2,70,0,-1,78,0,-1,35,0,-2,23,0,0,23,0,-2,77,0,-1,86,0,-1,36,0,-2,84,0,-1,92,0,-1,37,0,-2,90,0,-1,98,0,-1,38,0,-2,96,0,0,27,0,-1,28,0,-1,39,0,0,28,0,0,29,0,0,30,0,0,30,0,0,31,0,0,31,0,0,32,0,0,32,0,0,33,0,0,33,0,0,34,0,0,34,0,0,35,0,0,35,0,0,36,0,0,37,0,0,38,0,-1,41,0,-1,45,0,-1,48,0,-1,52,0,-1,55,0,-1,59,0,-1,62,0,-1,66,0,-1,69,0,-1,73,0,-1,76,0,-1,80,0,-1,83,0,-1,85,0,-1,89,0,-1,91,0,-1,95,0,-1,97,0,9,1,2,7,29,145],[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,39,42,42,42,42,42,49,49,49,49,49,56,56,56,56,56,63,63,63,63,63,70,70,70,70,70,77,77,77,77,77,85,86,86,91,92,92,97,98,98],[-1,-1,-1,1,-1,1,-1,-1,-1,1,-1,1,-1,-1,-1,1,-1,1,-1,-1,-1,1,-1,1,-1,-1,-1,1,-1,1,-1,-1,-1,1,-1,1,-1,-1,-1,1,-1,-1,-1,1,-1,-1,-1,1,-1,1,2,3,4,5,6,2,3,4,5,6,2,3,4,5,6,2,3,4,5,6,2,3,4,5,6,2,3,4,5,6,1,2,15,1,2,15,1,2,15],[55,0,0,3,0,1,0,0,0,3,0,1,0,0,0,3,0,1,0,0,0,3,0,1,0,0,0,3,0,1,0,0,0,3,0,1,0,0,0,6,0,0,0,6,0,0,0,6,0,5,0,1,1,1,2,0,1,1,1,2,0,1,1,1,2,0,1,1,1,2,0,1,1,1,2,0,1,1,1,2,7,0,8,7,0,8,7,0,8]],[["0,9729,9729,33071,33071,0,0,1",-1],[0],0,[],[],[]],[[[37,"inner_glow",[{},"0",11,[{"defines":{"USE_TEXTURE":true,"USE_INNER_GLOW":true}},"props",11,[{"glowThreshold":1,"glowLevel":0.2},"glowColor",8,[4,4278190335]]]]]],0,0,[0],[10],[56]],[[[17,"flow_light"],[20,"flow_light",[-7,-8],[[16,0,45,200,150,-2],[70,-6,-5,-4,-3]],[40,-1],[4,4286218881],[5,720,1280],[360,640,0,0,0,0,1,1,1,1]],[41,"density",[-11,-12,-13],[[-9,[4,1,1,20,-10,[5,522.42,50]]],1,4],[0,"daee7ZQS9GV4L/nCkd6kTk",1],[5,522.42,50],[0,25,0,0,0,0,1,1,1,1]],[41,"frequency",[-16,-17,-18],[[-14,[4,1,1,20,-15,[5,522.42,50]]],1,4],[0,"56IEhrl09F9ZENflzUpHDN",1],[5,522.42,50],[0,-25,0,0,0,0,1,1,1,1]],[15,"sliders",[2,3],[[32,1,2,-19,[5,720,100]],[24,41,-25,300,-20]],[0,"31tV8AQ1BB96WHxS1Pyu2q",1],[5,720,100],[0,295,0,0,0,0,1,1,1,1]],[3,"slider",2,[-22,-23],[-21],[0,"5clF3XbtpJLaGof5ZqTnhE",1],[5,297.87,20],[14.425000000000011,0,0,0,0,0,1,1,1,1]],[7,"Handle",512,5,[[[2,1,2,-24,[4],5],-25],4,1],[0,"df+G2iAJBBPb7Sr+UA63lm",1],[5,32,32],[148.935,0,0,0,0,0,1,1,1,0]],[3,"slider",3,[-27,-28],[-26],[0,"1avA5FGp1CzIpYqTcbOSq4",1],[5,297.87,20],[14.425000000000011,0,0,0,0,0,1,1,1,1]],[7,"Handle",512,7,[[[2,1,2,-29,[10],11],-30],4,1],[0,"bbj3MawLhGQrbHaJ9I2MmV",1],[5,32,32],[148.935,0,0,0,0,0,1,1,1,0]],[13,"topView",1,[-32],[[21,45,0.5,false,-31]],[0,"bdFX8j0cZKOoWuxz22Pcvu",1],[5,720,640],[0,320,0,0,0,0,1,1,1,1]],[25,"image",9,[[-33,[19,18,-34]],1,4],[0,"b77LrM3VxNrZYU9stsHbEE",1],[5,221,219]],[13,"bottomView",1,[4],[[22,45,0.5,false,-35]],[0,"79u5wAkqpHap95nZwuB7aW",1],[5,720,640],[0,-320,0,0,0,0,1,1,1,1]],[6,"Background",512,5,[[2,1,0,-36,[2],3],[5,40,300,-37]],[0,"6eWFT1+EVJHJE9hDGHcryW",1],[5,297.87,20]],[6,"Background",512,7,[[2,1,0,-38,[8],9],[5,40,300,-39]],[0,"3bkC5FeUlK67yo/wzbjtDT",1],[5,297.87,20]],[33,10,[0]],[1,"name",2,[-40],[0,"8aoPHnRzxMVJmkOADgxqm0",1],[5,106.7,50.4],[-207.85999999999999,0,0,0,0,0,1,1,1,1]],[11,"Density",false,1,2,15,[1]],[9,1.1,true,3,6,[4,4294967295],[4,4294967295],6],[18,1,5,17],[1,"value",2,[-41],[0,"67YF171gBDAqSctuTMXggg",1],[5,77.85,50.4],[222.28500000000003,0,0,0,0,0,1,1,1,1]],[8,"1.00",1,1,19,[6]],[10,2,16,18,20],[1,"name",3,[-42],[0,"b4xU5MBmpOCZpzSCrZSgvW",1],[5,106.7,50.4],[-207.85999999999999,0,0,0,0,0,1,1,1,1]],[11,"Frequency",false,1,2,22,[7]],[9,1.1,true,3,8,[4,4294967295],[4,4294967295],8],[18,1,7,24],[1,"value",3,[-43],[0,"6682uk/FVKo5xIOjsSEXZo",1],[5,77.85,50.4],[222.28500000000003,0,0,0,0,0,1,1,1,1]],[8,"1.00",1,1,26,[12]],[10,3,23,25,27]],0,[0,8,1,0,0,1,0,28,28,0,43,21,0,12,14,0,0,1,0,-1,9,0,-2,11,0,-1,21,0,0,2,0,-1,15,0,-2,5,0,-3,19,0,-1,28,0,0,3,0,-1,22,0,-2,7,0,-3,26,0,0,4,0,0,4,0,-1,18,0,-1,12,0,-2,6,0,0,6,0,-2,17,0,-1,25,0,-1,13,0,-2,8,0,0,8,0,-2,24,0,0,9,0,-1,10,0,-1,14,0,0,10,0,0,11,0,0,12,0,0,12,0,0,13,0,0,13,0,-1,16,0,-1,20,0,-1,23,0,-1,27,0,9,1,2,7,4,3,7,4,4,7,11,43],[0,0,0,0,0,0,0,0,0,0,0,0,0,14,17,17,17,17,17,24,24,24,24,24],[-1,-1,-1,1,-1,1,-1,-1,-1,1,-1,1,-1,1,2,3,4,5,6,2,3,4,5,6],[57,0,0,3,0,1,0,0,0,3,0,1,0,10,0,1,1,1,2,0,1,1,1,2]],[["0,9729,9729,33071,33071,0,0,0",-1],[0],0,[],[],[]],[[{"name":"default_radio_button_off","rect":[3,3,26,26],"offset":[0,0],"originalSize":[32,32],"capInsets":[0,0,0,0]}],[1],0,[0],[11],[58]],[["0,9729,9729,33071,33071,0,0,1",-1],[0],0,[],[],[]],[[{"name":"default_btn_pressed","rect":[0,0,40,40],"offset":[0,0],"originalSize":[40,40],"capInsets":[12,12,12,12]}],[1],0,[0],[11],[59]],[[{"name":"default_btn_normal","rect":[0,0,40,40],"offset":[0,0],"originalSize":[40,40],"capInsets":[12,12,12,12]}],[1],0,[0],[11],[60]],[[{"name":"icon","rect":[0,0,195,270],"offset":[0,0],"originalSize":[195,270],"capInsets":[0,0,0,0]}],[1],0,[0],[11],[61]],[[[23,"mosaic",[{"hash":3736940126,"record":null,"name":"mosaic|vs|fs","glsl3":{"vert":"\nprecision highp float;\nuniform CCGlobal {\n  mat4 cc_matView;\n  mat4 cc_matViewInv;\n  mat4 cc_matProj;\n  mat4 cc_matProjInv;\n  mat4 cc_matViewProj;\n  mat4 cc_matViewProjInv;\n  vec4 cc_cameraPos;\n  vec4 cc_time;\n  mediump vec4 cc_screenSize;\n  mediump vec4 cc_screenScale;\n};\nuniform CCLocal {\n  mat4 cc_matWorld;\n  mat4 cc_matWorldIT;\n};\nin vec3 a_position;\nin vec4 a_color;\nout vec4 v_color;\n#if USE_TEXTURE\nin vec2 a_uv0;\nout vec2 v_uv0;\n#endif\nvoid main () {\n  vec4 pos = vec4(a_position, 1);\n  #if CC_USE_MODEL\n  pos = cc_matViewProj * cc_matWorld * pos;\n  #else\n  pos = cc_matViewProj * pos;\n  #endif\n  #if USE_TEXTURE\n  v_uv0 = a_uv0;\n  #endif\n  v_color = a_color;\n  gl_Position = pos;\n}","frag":"\nprecision highp float;\n#if USE_ALPHA_TEST\n  uniform ALPHA_TEST {\n    float alphaThreshold;\n  };\n#endif\nvoid ALPHA_TEST (in vec4 color) {\n  #if USE_ALPHA_TEST\n      if (color.a < alphaThreshold) discard;\n  #endif\n}\nvoid ALPHA_TEST (in float alpha) {\n  #if USE_ALPHA_TEST\n      if (alpha < alphaThreshold) discard;\n  #endif\n}\nin vec4 v_color;\n#if USE_TEXTURE\nin vec2 v_uv0;\nuniform sampler2D texture;\n#endif\n#if USE_MOSAIC\nuniform Mosaic{\n  float xLevel;\n  float yLevel;\n};\nvec2 getUvMapPos(){\n  float width = xLevel * 0.5;\n  float height = yLevel * 0.5;\n  float x = v_uv0.x;\n  if(width > 0.0){\n      float xIndex = floor(v_uv0.x / width);\n      x = width * (xIndex + 0.5);\n  }\n  float y = v_uv0.y;\n  if(height > 0.0){\n      float yIndex = floor(v_uv0.y / height);\n      y = height * yIndex;\n  }\n  return vec2(x, y);\n}\n#endif\nvoid main () {\n  vec4 o = vec4(1, 1, 1, 1);\n  vec2 realPos = v_uv0;\n  #if USE_MOSAIC\n  realPos = getUvMapPos();\n  #endif\n  #if USE_TEXTURE\n  vec4 texture_tmp = texture(texture, realPos);\n  #if CC_USE_ALPHA_ATLAS_texture\n      texture_tmp.a *= texture(texture, realPos + vec2(0, 0.5)).r;\n  #endif\n  #if INPUT_IS_GAMMA\n    o.rgb *= (texture_tmp.rgb * texture_tmp.rgb);\n    o.a *= texture_tmp.a;\n  #else\n    o *= texture_tmp;\n  #endif\n  #endif\n  o *= v_color;\n  ALPHA_TEST(o);\n  gl_FragColor = o;\n}"},"glsl1":{"vert":"\nprecision highp float;\nuniform mat4 cc_matViewProj;\nuniform mat4 cc_matWorld;\nattribute vec3 a_position;\nattribute vec4 a_color;\nvarying vec4 v_color;\n#if USE_TEXTURE\nattribute vec2 a_uv0;\nvarying vec2 v_uv0;\n#endif\nvoid main () {\n  vec4 pos = vec4(a_position, 1);\n  #if CC_USE_MODEL\n  pos = cc_matViewProj * cc_matWorld * pos;\n  #else\n  pos = cc_matViewProj * pos;\n  #endif\n  #if USE_TEXTURE\n  v_uv0 = a_uv0;\n  #endif\n  v_color = a_color;\n  gl_Position = pos;\n}","frag":"\nprecision highp float;\n#if USE_ALPHA_TEST\n  uniform float alphaThreshold;\n#endif\nvoid ALPHA_TEST (in vec4 color) {\n  #if USE_ALPHA_TEST\n      if (color.a < alphaThreshold) discard;\n  #endif\n}\nvoid ALPHA_TEST (in float alpha) {\n  #if USE_ALPHA_TEST\n      if (alpha < alphaThreshold) discard;\n  #endif\n}\nvarying vec4 v_color;\n#if USE_TEXTURE\nvarying vec2 v_uv0;\nuniform sampler2D texture;\n#endif\n#if USE_MOSAIC\nuniform float xLevel;\nuniform float yLevel;\nvec2 getUvMapPos(){\n  float width = xLevel * 0.5;\n  float height = yLevel * 0.5;\n  float x = v_uv0.x;\n  if(width > 0.0){\n      float xIndex = floor(v_uv0.x / width);\n      x = width * (xIndex + 0.5);\n  }\n  float y = v_uv0.y;\n  if(height > 0.0){\n      float yIndex = floor(v_uv0.y / height);\n      y = height * yIndex;\n  }\n  return vec2(x, y);\n}\n#endif\nvoid main () {\n  vec4 o = vec4(1, 1, 1, 1);\n  vec2 realPos = v_uv0;\n  #if USE_MOSAIC\n  realPos = getUvMapPos();\n  #endif\n  #if USE_TEXTURE\n  vec4 texture_tmp = texture2D(texture, realPos);\n  #if CC_USE_ALPHA_ATLAS_texture\n      texture_tmp.a *= texture2D(texture, realPos + vec2(0, 0.5)).r;\n  #endif\n  #if INPUT_IS_GAMMA\n    o.rgb *= (texture_tmp.rgb * texture_tmp.rgb);\n    o.a *= texture_tmp.a;\n  #else\n    o *= texture_tmp;\n  #endif\n  #endif\n  o *= v_color;\n  ALPHA_TEST(o);\n  gl_FragColor = o;\n}"},"builtins":{"globals":{"blocks":[{"name":"CCGlobal","defines":[]}],"samplers":[]},"locals":{"blocks":[{"name":"CCLocal","defines":[]}],"samplers":[]}},"defines":[{"name":"USE_TEXTURE","type":"boolean","defines":[]},{"name":"CC_USE_MODEL","type":"boolean","defines":[]},{"name":"USE_ALPHA_TEST","type":"boolean","defines":[]},{"name":"USE_MOSAIC","type":"boolean","defines":[]},{"name":"CC_USE_ALPHA_ATLAS_texture","type":"boolean","defines":["USE_TEXTURE"]},{"name":"INPUT_IS_GAMMA","type":"boolean","defines":["USE_TEXTURE"]}],"blocks":[{"name":"ALPHA_TEST","binding":0,"members":[{"name":"alphaThreshold","type":13,"count":1}],"defines":["USE_ALPHA_TEST"]},{"name":"Mosaic","binding":1,"members":[{"name":"xLevel","type":13,"count":1},{"name":"yLevel","type":13,"count":1}],"defines":["USE_MOSAIC"]}],"samplers":[{"name":"texture","type":29,"count":1,"binding":30,"defines":["USE_TEXTURE"]}]}],[{"passes":[{"program":"mosaic|vs|fs","blendState":{"targets":[{"blend":true}]},"rasterizerState":{"cullMode":0},"properties":{"texture":{"value":"white","type":29},"alphaThreshold":{"type":13,"value":[0.5]},"xLevel":{"type":13,"value":[0.5],"inspector":{"tooltip":"X Block Count","range":[0,1]}},"yLevel":{"type":13,"value":[0.5],"inspector":{"tooltip":"Y Block Count","range":[0,1]}}}}]}]]],0,0,[],[],[]]]]