{"version":3,"sources":["assets/bundles/shader_scene/script/ui_component/CheckBox.ts","assets/bundles/shader_scene/script/layer/FlashLight.ts","assets/bundles/shader_scene/script/layer/FlowLight.ts","assets/bundles/shader_scene/script/layer/InnerGlow.ts","assets/bundles/shader_scene/script/layer/Lighting.ts","assets/bundles/shader_scene/script/layer/Mosaic.ts","assets/bundles/shader_scene/script/layer/OldPhoto.ts","assets/bundles/shader_scene/script/layer/PointLight.ts","assets/bundles/shader_scene/script/ShaderScene.ts","assets/bundles/shader_scene/script/ui_component/SliderWithValue.ts","assets/bundles/shader_scene/script/layer/WaterRing.ts","assets/bundles/shader_scene/script/layer/WaveMask.ts"],"names":[],"mappings":"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","sourcesContent":["// Learn TypeScript:\r\n//  - https://docs.cocos.com/creator/manual/en/scripting/typescript.html\r\n// Learn Attribute:\r\n//  - https://docs.cocos.com/creator/manual/en/scripting/reference/attributes.html\r\n// Learn life-cycle callbacks:\r\n//  - https://docs.cocos.com/creator/manual/en/scripting/life-cycle-callbacks.html\r\n\r\nconst { ccclass, property } = cc._decorator;\r\n\r\n@ccclass\r\nexport default class CheckBox extends cc.Component {\r\n\r\n    @property(cc.Label)\r\n    nameLabel: cc.Label = null;\r\n\r\n    @property(cc.Toggle)\r\n    toggle: cc.Toggle = null;\r\n\r\n\r\n    onLoad() {\r\n\r\n    }\r\n\r\n    start() {\r\n        this.toggle.checkEvents.push(this.createEventHandler(\"onCheckEvent\"));\r\n    }\r\n\r\n    // update (dt) {}\r\n\r\n    private onCheckEvent(toggle: cc.Toggle) {\r\n\r\n    }\r\n\r\n    protected createEventHandler(hanlder: string): cc.Component.EventHandler {\r\n        let sliderEventHandler = new cc.Component.EventHandler();\r\n        sliderEventHandler.target = this.node;\r\n        sliderEventHandler.component = \"SliderWithValue\";\r\n        sliderEventHandler.handler = hanlder;\r\n        return sliderEventHandler;\r\n    }\r\n\r\n    public pushEventHandler(hanlder: cc.Component.EventHandler) {\r\n        this.toggle.checkEvents.push(hanlder);\r\n    }\r\n\r\n    public get isChecked(): boolean {\r\n        return this.toggle.isChecked;\r\n    }\r\n}\r\n","// Learn TypeScript:\r\n//  - https://docs.cocos.com/creator/manual/en/scripting/typescript.html\r\n// Learn Attribute:\r\n//  - https://docs.cocos.com/creator/manual/en/scripting/reference/attributes.html\r\n// Learn life-cycle callbacks:\r\n//  - https://docs.cocos.com/creator/manual/en/scripting/life-cycle-callbacks.html\r\n\r\nimport SliderWithValue from \"../ui_component/SliderWithValue\";\r\nimport CheckBox from \"../ui_component/CheckBox\";\r\n\r\nconst { ccclass, property } = cc._decorator;\r\n\r\n@ccclass\r\nexport default class FlashLight extends cc.Component {\r\n\r\n    @property(cc.Sprite)\r\n    image: cc.Sprite = null;\r\n\r\n    @property(SliderWithValue)\r\n    red: SliderWithValue = null;\r\n\r\n    @property(SliderWithValue)\r\n    green: SliderWithValue = null;\r\n\r\n    @property(SliderWithValue)\r\n    blue: SliderWithValue = null;\r\n\r\n    @property(SliderWithValue)\r\n    alpha: SliderWithValue = null;\r\n\r\n    @property(SliderWithValue)\r\n    lineAngle: SliderWithValue = null;\r\n\r\n    @property(SliderWithValue)\r\n    lineWidth: SliderWithValue = null;\r\n\r\n    @property(CheckBox)\r\n    gradient: CheckBox = null;\r\n\r\n    @property(CheckBox)\r\n    cropAlpha: CheckBox = null;\r\n\r\n    @property(CheckBox)\r\n    enableFrog: CheckBox = null;\r\n\r\n    // LIFE-CYCLE CALLBACKS:\r\n\r\n    // onLoad () {}\r\n\r\n    start() {\r\n        this.red.pushEventHandler(this.createEventHandler(\"onColorSliderEvent\"));\r\n        this.green.pushEventHandler(this.createEventHandler(\"onColorSliderEvent\"));\r\n        this.blue.pushEventHandler(this.createEventHandler(\"onColorSliderEvent\"));\r\n        this.alpha.pushEventHandler(this.createEventHandler(\"onColorSliderEvent\"));\r\n\r\n        this.lineAngle.pushEventHandler(this.createEventHandler(\"onAngleSliderEvent\"));\r\n        this.lineWidth.pushEventHandler(this.createEventHandler(\"onWidthSliderEvent\"));\r\n\r\n        this.gradient.pushEventHandler(this.createEventHandler(\"onGradientCheckEvent\"));\r\n        this.cropAlpha.pushEventHandler(this.createEventHandler(\"onCropAlphaCheckEvent\"));\r\n        this.enableFrog.pushEventHandler(this.createEventHandler(\"onEnableFrogCheckEvent\"));\r\n\r\n        this.image.node.on(cc.Node.EventType.TOUCH_START, this.onImageTouchStartEvent, this);\r\n        this.image.node.on(cc.Node.EventType.TOUCH_MOVE, this.onImageTouchStartEvent, this);\r\n        this.image.node.on(cc.Node.EventType.TOUCH_END, this.onImageTouchStartEvent, this);\r\n    }\r\n\r\n    // update (dt) {}\r\n\r\n    private onColorSliderEvent(slider: cc.Slider) {\r\n        let material = this.image.getMaterial(0);\r\n        material.setProperty(\"lightColor\", new cc.Vec4(this.red.progress, this.green.progress, this.blue.progress, this.alpha.progress));\r\n        this.image.setMaterial(0, material);\r\n    }\r\n\r\n    private onImageTouchStartEvent(event: cc.Event.EventTouch) {\r\n        let localPos = this.image.node.convertToNodeSpace(event.getLocation());\r\n\r\n        let x = localPos.x / this.image.node.getContentSize().width\r\n        let y = 1.0 - localPos.y / this.image.node.getContentSize().height\r\n\r\n\r\n        let material = this.image.getMaterial(0);\r\n        material.setProperty(\"centerPoint\", new cc.Vec2(x, y));\r\n        this.image.setMaterial(0, material);\r\n    }\r\n\r\n    private onAngleSliderEvent(slider: cc.Slider) {\r\n        let material = this.image.getMaterial(0);\r\n        material.setProperty(\"angle\", this.lineAngle.progress * 180.0);\r\n        this.image.setMaterial(0, material);\r\n    }\r\n\r\n    private onWidthSliderEvent(slider: cc.Slider) {\r\n        let material = this.image.getMaterial(0);\r\n        material.setProperty(\"width\", this.lineWidth.progress);\r\n        this.image.setMaterial(0, material);\r\n    }\r\n\r\n    private onGradientCheckEvent(toggle: cc.Toggle) {\r\n        let material = this.image.getMaterial(0);\r\n        material.setProperty(\"gradient\", this.gradient.isChecked);\r\n        this.image.setMaterial(0, material);\r\n    }\r\n\r\n    private onCropAlphaCheckEvent(toggle: cc.Toggle) {\r\n        let material = this.image.getMaterial(0);\r\n        material.setProperty(\"cropAlpha\", this.cropAlpha.isChecked);\r\n        this.image.setMaterial(0, material);\r\n    }\r\n\r\n    private onEnableFrogCheckEvent(toggle: cc.Toggle) {\r\n        let material = this.image.getMaterial(0);\r\n        material.setProperty(\"enableFog\", this.enableFrog.isChecked);\r\n        this.image.setMaterial(0, material);\r\n    }\r\n\r\n    protected createEventHandler(hanlder: string): cc.Component.EventHandler {\r\n        let sliderEventHandler = new cc.Component.EventHandler();\r\n        sliderEventHandler.target = this.node;\r\n        sliderEventHandler.component = \"FlashLight\";\r\n        sliderEventHandler.handler = hanlder;\r\n        return sliderEventHandler;\r\n    }\r\n}\r\n","import SliderWithValue from \"../ui_component/SliderWithValue\";\r\n\r\n\r\nconst { ccclass, property } = cc._decorator;\r\n\r\n@ccclass\r\nexport default class FlowLight extends cc.Component {\r\n\r\n    @property(cc.Sprite)\r\n    image: cc.Sprite = null;\r\n\r\n    @property(SliderWithValue)\r\n    density: SliderWithValue = null;\r\n\r\n    @property(SliderWithValue)\r\n    frequency: SliderWithValue = null;\r\n\r\n    // LIFE-CYCLE CALLBACKS:\r\n\r\n    onLoad() {\r\n\r\n    }\r\n\r\n    start() {\r\n        this.density.pushEventHandler(this.createEventHandler(\"onDensitySliderEvent\"));\r\n        this.frequency.pushEventHandler(this.createEventHandler(\"onFrequencySliderEvent\"));\r\n\r\n\r\n    }\r\n\r\n    // update (dt) {}\r\n\r\n    private onDensitySliderEvent(slider: cc.Slider) {\r\n        let material = this.image.getMaterial(0);\r\n        material.setProperty(\"density\", slider.progress * 10);\r\n    }\r\n\r\n    private onFrequencySliderEvent(slider: cc.Slider) {\r\n        let material = this.image.getMaterial(0);\r\n        material.setProperty(\"frequency\", slider.progress);\r\n    }\r\n\r\n    protected createEventHandler(hanlder: string): cc.Component.EventHandler {\r\n        let sliderEventHandler = new cc.Component.EventHandler();\r\n        sliderEventHandler.target = this.node;\r\n        sliderEventHandler.component = \"FlowLight\";\r\n        sliderEventHandler.handler = hanlder;\r\n        return sliderEventHandler;\r\n    }\r\n}\r\n","// Learn TypeScript:\r\n//  - https://docs.cocos.com/creator/manual/en/scripting/typescript.html\r\n// Learn Attribute:\r\n//  - https://docs.cocos.com/creator/manual/en/scripting/reference/attributes.html\r\n// Learn life-cycle callbacks:\r\n//  - https://docs.cocos.com/creator/manual/en/scripting/life-cycle-callbacks.html\r\n\r\nimport SliderWithValue from \"../ui_component/SliderWithValue\";\r\n\r\nconst { ccclass, property } = cc._decorator;\r\n\r\n@ccclass\r\nexport default class InnerGlow extends cc.Component {\r\n\r\n    @property(cc.Sprite)\r\n    image: cc.Sprite = null;\r\n\r\n    @property(SliderWithValue)\r\n    red: SliderWithValue = null;\r\n\r\n    @property(SliderWithValue)\r\n    green: SliderWithValue = null;\r\n\r\n    @property(SliderWithValue)\r\n    blue: SliderWithValue = null;\r\n\r\n    @property(SliderWithValue)\r\n    level: SliderWithValue = null;\r\n\r\n    @property(SliderWithValue)\r\n    threshold: SliderWithValue = null;\r\n    // LIFE-CYCLE CALLBACKS:\r\n\r\n    onLoad() {\r\n\r\n    }\r\n\r\n    start() {\r\n        this.red.pushEventHandler(this.createEventHandler(\"onColorSliderEvent\"));\r\n        this.green.pushEventHandler(this.createEventHandler(\"onColorSliderEvent\"));\r\n        this.blue.pushEventHandler(this.createEventHandler(\"onColorSliderEvent\"));\r\n\r\n        this.level.pushEventHandler(this.createEventHandler(\"onLevelSliderEvent\"));\r\n        this.threshold.pushEventHandler(this.createEventHandler(\"onThresoldSliderEvent\"));\r\n    }\r\n\r\n    // update (dt) {}\r\n    private onColorSliderEvent(slider: cc.Slider) {\r\n        let material = this.image.getMaterial(0);\r\n        material.setProperty(\"glowColor\", new cc.Vec4(this.red.progress, this.green.progress, this.blue.progress, 1.0));\r\n\r\n        this.image.setMaterial(0, material);\r\n    }\r\n\r\n    private onLevelSliderEvent(slider: cc.Slider) {\r\n        let material = this.image.getMaterial(0);\r\n        material.setProperty(\"glowLevel\", this.level.progress);\r\n        this.image.setMaterial(0, material);\r\n    }\r\n\r\n    private onThresoldSliderEvent(slider: cc.Slider) {\r\n        let material = this.image.getMaterial(0);\r\n        material.setProperty(\"glowThreshold\", this.threshold.progress);\r\n        this.image.setMaterial(0, material);\r\n    }\r\n\r\n    protected createEventHandler(hanlder: string): cc.Component.EventHandler {\r\n        let sliderEventHandler = new cc.Component.EventHandler();\r\n        sliderEventHandler.target = this.node;\r\n        sliderEventHandler.component = \"InnerGlow\";\r\n        sliderEventHandler.handler = hanlder;\r\n        return sliderEventHandler;\r\n    }\r\n}\r\n","// Learn TypeScript:\r\n//  - https://docs.cocos.com/creator/manual/en/scripting/typescript.html\r\n// Learn Attribute:\r\n//  - https://docs.cocos.com/creator/manual/en/scripting/reference/attributes.html\r\n// Learn life-cycle callbacks:\r\n//  - https://docs.cocos.com/creator/manual/en/scripting/life-cycle-callbacks.html\r\n\r\nimport SliderWithValue from \"../ui_component/SliderWithValue\";\r\n\r\nconst { ccclass, property } = cc._decorator;\r\n\r\n@ccclass\r\nexport default class Lighting extends cc.Component {\r\n\r\n    @property(cc.Sprite)\r\n    image: cc.Sprite = null;\r\n\r\n    @property(SliderWithValue)\r\n    red: SliderWithValue = null;\r\n\r\n    @property(SliderWithValue)\r\n    green: SliderWithValue = null;\r\n\r\n    @property(SliderWithValue)\r\n    blue: SliderWithValue = null;\r\n\r\n    @property(SliderWithValue)\r\n    alpha: SliderWithValue = null;\r\n\r\n\r\n    @property(SliderWithValue)\r\n    threshold: SliderWithValue = null;\r\n    // LIFE-CYCLE CALLBACKS:\r\n\r\n    onLoad() {\r\n\r\n    }\r\n\r\n    start() {\r\n        this.red.pushEventHandler(this.createEventHandler(\"onColorSliderEvent\"));\r\n        this.green.pushEventHandler(this.createEventHandler(\"onColorSliderEvent\"));\r\n        this.blue.pushEventHandler(this.createEventHandler(\"onColorSliderEvent\"));\r\n        this.alpha.pushEventHandler(this.createEventHandler(\"onColorSliderEvent\"));\r\n\r\n        this.threshold.pushEventHandler(this.createEventHandler(\"onThresoldSliderEvent\"));\r\n    }\r\n\r\n    // update (dt) {}\r\n    private onColorSliderEvent(slider: cc.Slider) {\r\n        let material = this.image.getMaterial(0);\r\n        material.setProperty(\"blendColor\", new cc.Vec4(this.red.progress, this.green.progress, this.blue.progress, this.alpha.progress));\r\n        this.image.setMaterial(0, material);\r\n    }\r\n\r\n    private onThresoldSliderEvent(slider: cc.Slider) {\r\n        let material = this.image.getMaterial(0);\r\n        material.setProperty(\"blendThreshold\", this.threshold.progress);\r\n        this.image.setMaterial(0, material);\r\n    }\r\n\r\n    protected createEventHandler(hanlder: string): cc.Component.EventHandler {\r\n        let sliderEventHandler = new cc.Component.EventHandler();\r\n        sliderEventHandler.target = this.node;\r\n        sliderEventHandler.component = \"Lighting\";\r\n        sliderEventHandler.handler = hanlder;\r\n        return sliderEventHandler;\r\n    }\r\n}\r\n","// Learn TypeScript:\r\n//  - https://docs.cocos.com/creator/manual/en/scripting/typescript.html\r\n// Learn Attribute:\r\n//  - https://docs.cocos.com/creator/manual/en/scripting/reference/attributes.html\r\n// Learn life-cycle callbacks:\r\n//  - https://docs.cocos.com/creator/manual/en/scripting/life-cycle-callbacks.html\r\n\r\nimport SliderWithValue from \"../ui_component/SliderWithValue\";\r\n\r\nconst { ccclass, property } = cc._decorator;\r\n\r\n@ccclass\r\nexport default class Mosaic extends cc.Component {\r\n\r\n    @property(cc.Sprite)\r\n    image: cc.Sprite = null;\r\n\r\n    @property(SliderWithValue)\r\n    xLevel: SliderWithValue = null;\r\n\r\n    @property(SliderWithValue)\r\n    yLevel: SliderWithValue = null;\r\n\r\n    @property(SliderWithValue)\r\n    bothLevel: SliderWithValue = null;\r\n    // LIFE-CYCLE CALLBACKS:\r\n\r\n    onLoad() {\r\n\r\n    }\r\n\r\n    start() {\r\n        this.xLevel.pushEventHandler(this.createEventHandler(\"onXLevelSliderEvent\"));\r\n        this.yLevel.pushEventHandler(this.createEventHandler(\"onYLevelSliderEvent\"));\r\n        this.bothLevel.pushEventHandler(this.createEventHandler(\"onBothLevelSliderEvent\"));\r\n    }\r\n\r\n    // update (dt) {}\r\n    private onXLevelSliderEvent(slider: cc.Slider) {\r\n        let material = this.image.getMaterial(0);\r\n        material.setProperty(\"xLevel\", slider.progress);\r\n        this.image.setMaterial(0, material);\r\n    }\r\n\r\n    private onYLevelSliderEvent(slider: cc.Slider) {\r\n        let material = this.image.getMaterial(0);\r\n        material.setProperty(\"yLevel\", slider.progress);\r\n        this.image.setMaterial(0, material);\r\n    }\r\n\r\n    private onBothLevelSliderEvent(slider: cc.Slider) {\r\n        let material = this.image.getMaterial(0);\r\n        material.setProperty(\"xLevel\", slider.progress);\r\n        material.setProperty(\"yLevel\", slider.progress);\r\n        this.image.setMaterial(0, material);\r\n    }\r\n\r\n    protected createEventHandler(hanlder: string): cc.Component.EventHandler {\r\n        let sliderEventHandler = new cc.Component.EventHandler();\r\n        sliderEventHandler.target = this.node;\r\n        sliderEventHandler.component = \"Mosaic\";\r\n        sliderEventHandler.handler = hanlder;\r\n        return sliderEventHandler;\r\n    }\r\n}\r\n","// Learn TypeScript:\r\n//  - https://docs.cocos.com/creator/manual/en/scripting/typescript.html\r\n// Learn Attribute:\r\n//  - https://docs.cocos.com/creator/manual/en/scripting/reference/attributes.html\r\n// Learn life-cycle callbacks:\r\n//  - https://docs.cocos.com/creator/manual/en/scripting/life-cycle-callbacks.html\r\n\r\nimport SliderWithValue from \"../ui_component/SliderWithValue\";\r\n\r\n\r\nconst { ccclass, property } = cc._decorator;\r\n\r\n@ccclass\r\nexport default class OldPhoto extends cc.Component {\r\n\r\n    @property(cc.Sprite)\r\n    image: cc.Sprite = null;\r\n\r\n    @property(SliderWithValue)\r\n    slider: SliderWithValue = null;\r\n\r\n    // LIFE-CYCLE CALLBACKS:\r\n\r\n    onLoad() {\r\n\r\n    }\r\n\r\n    start() {\r\n        this.slider.pushEventHandler(this.createEventHandler(\"onSliderEvent\"));\r\n    }\r\n\r\n    // update (dt) {}\r\n    private onSliderEvent(slider: cc.Slider) {\r\n        let material = this.image.getMaterial(0);\r\n        material.setProperty(\"oldLevel\", slider.progress);\r\n    }\r\n\r\n    protected createEventHandler(hanlder: string): cc.Component.EventHandler {\r\n        let sliderEventHandler = new cc.Component.EventHandler();\r\n        sliderEventHandler.target = this.node;\r\n        sliderEventHandler.component = \"OldPhoto\";\r\n        sliderEventHandler.handler = hanlder;\r\n        return sliderEventHandler;\r\n    }\r\n}\r\n","// Learn TypeScript:\r\n//  - https://docs.cocos.com/creator/manual/en/scripting/typescript.html\r\n// Learn Attribute:\r\n//  - https://docs.cocos.com/creator/manual/en/scripting/reference/attributes.html\r\n// Learn life-cycle callbacks:\r\n//  - https://docs.cocos.com/creator/manual/en/scripting/life-cycle-callbacks.html\r\n\r\nimport SliderWithValue from \"../ui_component/SliderWithValue\";\r\nimport CheckBox from \"../ui_component/CheckBox\";\r\n\r\nconst { ccclass, property } = cc._decorator;\r\n\r\n@ccclass\r\nexport default class PointLight extends cc.Component {\r\n\r\n    @property(cc.Sprite)\r\n    image: cc.Sprite = null;\r\n\r\n    @property(SliderWithValue)\r\n    red: SliderWithValue = null;\r\n\r\n    @property(SliderWithValue)\r\n    green: SliderWithValue = null;\r\n\r\n    @property(SliderWithValue)\r\n    blue: SliderWithValue = null;\r\n\r\n    @property(SliderWithValue)\r\n    alpha: SliderWithValue = null;\r\n\r\n    @property(SliderWithValue)\r\n    radius: SliderWithValue = null;\r\n\r\n    @property(CheckBox)\r\n    cropAlpha: CheckBox = null;\r\n\r\n    @property(CheckBox)\r\n    enableFrog: CheckBox = null;\r\n\r\n    // LIFE-CYCLE CALLBACKS:\r\n\r\n    // onLoad () {}\r\n\r\n    start() {\r\n        this.red.pushEventHandler(this.createEventHandler(\"onColorSliderEvent\"));\r\n        this.green.pushEventHandler(this.createEventHandler(\"onColorSliderEvent\"));\r\n        this.blue.pushEventHandler(this.createEventHandler(\"onColorSliderEvent\"));\r\n        this.alpha.pushEventHandler(this.createEventHandler(\"onColorSliderEvent\"));\r\n        this.radius.pushEventHandler(this.createEventHandler(\"onRadiusSliderEvent\"));\r\n\r\n        this.cropAlpha.pushEventHandler(this.createEventHandler(\"onCropAlphaCheckEvent\"));\r\n        this.enableFrog.pushEventHandler(this.createEventHandler(\"onEnableFrogCheckEvent\"));\r\n\r\n        this.image.node.on(cc.Node.EventType.TOUCH_START, this.onImageTouchStartEvent, this);\r\n        this.image.node.on(cc.Node.EventType.TOUCH_MOVE, this.onImageTouchStartEvent, this);\r\n        this.image.node.on(cc.Node.EventType.TOUCH_END, this.onImageTouchStartEvent, this);\r\n    }\r\n\r\n    // update (dt) {}\r\n\r\n    private onColorSliderEvent(slider: cc.Slider) {\r\n        let material = this.image.getMaterial(0);\r\n        material.setProperty(\"centerColor\", new cc.Vec4(this.red.progress, this.green.progress, this.blue.progress, this.alpha.progress));\r\n        this.image.setMaterial(0, material);\r\n    }\r\n\r\n    private onImageTouchStartEvent(event: cc.Event.EventTouch) {\r\n        let localPos = this.image.node.convertToNodeSpace(event.getLocation());\r\n\r\n        let x = localPos.x / this.image.node.getContentSize().width\r\n        let y = 1.0 - localPos.y / this.image.node.getContentSize().height\r\n\r\n\r\n        let material = this.image.getMaterial(0);\r\n        material.setProperty(\"centerPoint\", new cc.Vec2(x, y));\r\n        this.image.setMaterial(0, material);\r\n    }\r\n\r\n    private onRadiusSliderEvent(slider: cc.Slider) {\r\n        let material = this.image.getMaterial(0);\r\n        material.setProperty(\"radius\", this.radius.progress);\r\n        this.image.setMaterial(0, material);\r\n    }\r\n\r\n    private onCropAlphaCheckEvent(toggle: cc.Toggle) {\r\n        let material = this.image.getMaterial(0);\r\n        material.setProperty(\"cropAlpha\", this.cropAlpha.isChecked);\r\n        this.image.setMaterial(0, material);\r\n    }\r\n\r\n    private onEnableFrogCheckEvent(toggle: cc.Toggle) {\r\n        let material = this.image.getMaterial(0);\r\n        material.setProperty(\"enableFog\", this.enableFrog.isChecked);\r\n        this.image.setMaterial(0, material);\r\n    }\r\n\r\n    protected createEventHandler(hanlder: string): cc.Component.EventHandler {\r\n        let sliderEventHandler = new cc.Component.EventHandler();\r\n        sliderEventHandler.target = this.node;\r\n        sliderEventHandler.component = \"PointLight\";\r\n        sliderEventHandler.handler = hanlder;\r\n        return sliderEventHandler;\r\n    }\r\n}\r\n","import { AssetBundleID, SceneName } from \"../../../scripts/Defines/Defines\";\r\nimport IGame from \"../../../scripts/Frameworks/IGame/IGame\";\r\nimport PreloadBundleInfo from \"../../../scripts/Frameworks/SceneDirector/PreloadAssetInfo\";\r\nimport SceneBase from \"../../../scripts/Frameworks/SceneDirector/SceneBase\";\r\nimport SceneEnterParamBase from \"../../../scripts/Frameworks/SceneDirector/SceneEnterParamBase\";\r\n\r\nconst { ccclass, property } = cc._decorator;\r\n@ccclass\r\nexport default class ShaderScene extends SceneBase {\r\n    public getSceneName(): string {\r\n        return SceneName.ShaderScene;\r\n    }\r\n\r\n    @property(cc.Node)\r\n    layerContainer: cc.Node = null;\r\n\r\n    @property(cc.Node)\r\n    previousBtn: cc.Node = null;\r\n\r\n    @property(cc.Node)\r\n    quitBtn: cc.Node = null;\r\n\r\n    @property(cc.Node)\r\n    nextBtn: cc.Node = null;\r\n\r\n    @property([cc.Prefab])\r\n    testPrefabs: cc.Prefab[] = [];\r\n\r\n    // LIFE-CYCLE CALLBACKS:\r\n\r\n    public onSceneLoad(): void {\r\n        this.setTestWithIndex(0);\r\n    }\r\n    public onSceneEnable(): void {\r\n\r\n    }\r\n    public onSceneEnter(param: SceneEnterParamBase): void {\r\n\r\n    }\r\n    public onSceneStart(): void {\r\n        this.previousBtn.on(cc.Node.EventType.TOUCH_END, this.onPreviousBtn, this);\r\n        this.quitBtn.on(cc.Node.EventType.TOUCH_END, this.onQuitBtn, this);\r\n        this.nextBtn.on(cc.Node.EventType.TOUCH_END, this.onNextBtn, this);\r\n    }\r\n    public onSceneUpdate(dt: number): void {\r\n\r\n    }\r\n    public onSceneExit(): void {\r\n\r\n    }\r\n    public onSceneDisable(): void {\r\n\r\n    }\r\n    public onSceneDestroy(): void {\r\n\r\n    }\r\n\r\n    onLoad() {\r\n        this.setTestWithIndex(0);\r\n    }\r\n\r\n    start() {\r\n        this.previousBtn.on(cc.Node.EventType.TOUCH_END, this.onPreviousBtn, this);\r\n        this.quitBtn.on(cc.Node.EventType.TOUCH_END, this.onQuitBtn, this);\r\n        this.nextBtn.on(cc.Node.EventType.TOUCH_END, this.onNextBtn, this);\r\n    }\r\n\r\n    // update (dt) {}\r\n\r\n    private onPreviousBtn() {\r\n        this.setTestWithIndex(this._testIndex - 1);\r\n    }\r\n\r\n    private onNextBtn() {\r\n        this.setTestWithIndex(this._testIndex + 1);\r\n    }\r\n\r\n    private onQuitBtn() {\r\n        let preloadInfo = PreloadBundleInfo.create();\r\n        preloadInfo.extiBundles = [AssetBundleID.ShaderScene];\r\n        preloadInfo.enterBundles[AssetBundleID.MainScene] = [];\r\n        IGame.getInstance().replaceSceneWithSwitchScene(preloadInfo, SceneName.MainScene);\r\n    }\r\n\r\n    private _layer: cc.Node = null;\r\n    private _testIndex: number = 0;\r\n    private setTestWithIndex(index: number) {\r\n        this._testIndex = (index + this.testPrefabs.length) % this.testPrefabs.length\r\n        if (this._layer) {\r\n            this._layer.destroy();\r\n        }\r\n        this._layer = cc.instantiate(this.testPrefabs[this._testIndex]);\r\n        this.layerContainer.addChild(this._layer);\r\n    }\r\n}\r\n","// Learn TypeScript:\r\n//  - https://docs.cocos.com/creator/manual/en/scripting/typescript.html\r\n// Learn Attribute:\r\n//  - https://docs.cocos.com/creator/manual/en/scripting/reference/attributes.html\r\n// Learn life-cycle callbacks:\r\n//  - https://docs.cocos.com/creator/manual/en/scripting/life-cycle-callbacks.html\r\n\r\nconst { ccclass, property } = cc._decorator;\r\n\r\n@ccclass\r\nexport default class SliderWithValue extends cc.Component {\r\n\r\n    @property(cc.Label)\r\n    nameLabel: cc.Label = null;\r\n\r\n    @property(cc.Slider)\r\n    slider: cc.Slider = null;\r\n\r\n    @property(cc.Label)\r\n    valueLabel: cc.Label = null;\r\n\r\n    // LIFE-CYCLE CALLBACKS:\r\n\r\n    onLoad() {\r\n        this.onSliderEvent(this.slider);\r\n    }\r\n\r\n    start() {\r\n        this.slider.slideEvents.push(this.createEventHandler(\"onSliderEvent\"));\r\n    }\r\n\r\n    // update (dt) {}\r\n\r\n    private onSliderEvent(slider: cc.Slider) {\r\n        this.valueLabel.string = slider.progress.toFixed(2);\r\n    }\r\n\r\n    protected createEventHandler(hanlder: string): cc.Component.EventHandler {\r\n        let sliderEventHandler = new cc.Component.EventHandler();\r\n        sliderEventHandler.target = this.node;\r\n        sliderEventHandler.component = \"SliderWithValue\";\r\n        sliderEventHandler.handler = hanlder;\r\n        return sliderEventHandler;\r\n    }\r\n\r\n    public pushEventHandler(hanlder: cc.Component.EventHandler) {\r\n        this.slider.slideEvents.push(hanlder);\r\n    }\r\n\r\n    public get progress(): number {\r\n        return this.slider.progress;\r\n    }\r\n}\r\n","import SliderWithValue from \"../ui_component/SliderWithValue\";\r\n\r\n\r\nconst { ccclass, property } = cc._decorator;\r\n\r\n@ccclass\r\nexport default class WaterRing extends cc.Component {\r\n\r\n    @property(cc.Sprite)\r\n    image: cc.Sprite = null;\r\n\r\n    @property(SliderWithValue)\r\n    radius: SliderWithValue = null;\r\n\r\n    @property(SliderWithValue)\r\n    offset: SliderWithValue = null;\r\n\r\n    // LIFE-CYCLE CALLBACKS:\r\n\r\n    onLoad() {\r\n\r\n    }\r\n\r\n    start() {\r\n        this.radius.pushEventHandler(this.createEventHandler(\"onRadiusSliderEvent\"));\r\n        this.offset.pushEventHandler(this.createEventHandler(\"onOffsetSliderEvent\"));\r\n\r\n        this.image.node.on(cc.Node.EventType.TOUCH_START, this.onImageTouchStartEvent, this);\r\n        this.image.node.on(cc.Node.EventType.TOUCH_MOVE, this.onImageTouchStartEvent, this);\r\n        this.image.node.on(cc.Node.EventType.TOUCH_END, this.onImageTouchStartEvent, this);\r\n    }\r\n\r\n    // update (dt) {}\r\n\r\n    private onRadiusSliderEvent(slider: cc.Slider) {\r\n        let material = this.image.getMaterial(0);\r\n        material.setProperty(\"radius\", slider.progress * 10);\r\n    }\r\n\r\n    private onOffsetSliderEvent(slider: cc.Slider) {\r\n        let material = this.image.getMaterial(0);\r\n        material.setProperty(\"offset\", slider.progress * 10);\r\n    }\r\n\r\n    private onImageTouchStartEvent(event: cc.Event.EventTouch) {\r\n        let localPos = this.image.node.convertToNodeSpace(event.getLocation());\r\n\r\n        let x = localPos.x / this.image.node.getContentSize().width\r\n        let y = 1.0 - localPos.y / this.image.node.getContentSize().height\r\n        let material = this.image.getMaterial(0);\r\n        material.setProperty(\"center\", new cc.Vec2(x, y));\r\n        this.image.setMaterial(0, material);\r\n    }\r\n\r\n    protected createEventHandler(hanlder: string): cc.Component.EventHandler {\r\n        let sliderEventHandler = new cc.Component.EventHandler();\r\n        sliderEventHandler.target = this.node;\r\n        sliderEventHandler.component = \"WaterRing\";\r\n        sliderEventHandler.handler = hanlder;\r\n        return sliderEventHandler;\r\n    }\r\n}\r\n","import SliderWithValue from \"../ui_component/SliderWithValue\";\r\n\r\n\r\nconst { ccclass, property } = cc._decorator;\r\n\r\n@ccclass\r\nexport default class WaveMask extends cc.Component {\r\n\r\n    @property(cc.Sprite)\r\n    image: cc.Sprite = null;\r\n\r\n    @property(SliderWithValue)\r\n    amplitude: SliderWithValue = null;\r\n\r\n    @property(SliderWithValue)\r\n    angularVelocity: SliderWithValue = null;\r\n\r\n    @property(SliderWithValue)\r\n    frequency: SliderWithValue = null;\r\n\r\n    @property(SliderWithValue)\r\n    offset: SliderWithValue = null;\r\n\r\n    // LIFE-CYCLE CALLBACKS:\r\n\r\n    onLoad() {\r\n\r\n    }\r\n\r\n    start() {\r\n        this.amplitude.pushEventHandler(this.createEventHandler(\"onAmplitudeSliderEvent\"));\r\n        this.angularVelocity.pushEventHandler(this.createEventHandler(\"onAngularVelocitySliderEvent\"));\r\n        this.frequency.pushEventHandler(this.createEventHandler(\"onFrequencySliderEvent\"));\r\n        this.offset.pushEventHandler(this.createEventHandler(\"onOffsetSliderEvent\"));\r\n    }\r\n\r\n    // update (dt) {}\r\n    private onAmplitudeSliderEvent(slider: cc.Slider) {\r\n        let material = this.image.getMaterial(0);\r\n        material.setProperty(\"amplitude\", slider.progress);\r\n    }\r\n\r\n    private onAngularVelocitySliderEvent(slider: cc.Slider) {\r\n        let material = this.image.getMaterial(0);\r\n        material.setProperty(\"angularVelocity\", Math.round(slider.progress * 360));\r\n    }\r\n\r\n    private onFrequencySliderEvent(slider: cc.Slider) {\r\n        let material = this.image.getMaterial(0);\r\n        material.setProperty(\"frequency\", Math.round(slider.progress * 100));\r\n    }\r\n\r\n    private onOffsetSliderEvent(slider: cc.Slider) {\r\n        let material = this.image.getMaterial(0);\r\n        material.setProperty(\"offset\", slider.progress);\r\n    }\r\n\r\n    protected createEventHandler(hanlder: string): cc.Component.EventHandler {\r\n        let sliderEventHandler = new cc.Component.EventHandler();\r\n        sliderEventHandler.target = this.node;\r\n        sliderEventHandler.component = \"WaveMask\";\r\n        sliderEventHandler.handler = hanlder;\r\n        return sliderEventHandler;\r\n    }\r\n}\r\n"],"file":"index.js"}